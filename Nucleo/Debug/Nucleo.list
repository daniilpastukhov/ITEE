
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00001af0  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001b00  20001b00  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e733  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003b55  00000000  00000000  0003e773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b37a  00000000  00000000  000422c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000eb0  00000000  00000000  0004d648  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001340  00000000  00000000  0004e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008c08  00000000  00000000  0004f838  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006076  00000000  00000000  00058440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005e4b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002b94  00000000  00000000  0005e534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e64 	.word	0x08002e64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08002e64 	.word	0x08002e64

080001e0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x20>)
{
 80001e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ec:	2003      	movs	r0, #3
 80001ee:	f000 fbaf 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f002 fd64 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f8:	f002 fcbc 	bl	8002b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001fc:	2000      	movs	r0, #0
 80001fe:	bd08      	pop	{r3, pc}
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <HAL_IncTick+0x10>)
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_IncTick+0x14>)
 8000208:	6811      	ldr	r1, [r2, #0]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	440b      	add	r3, r1
 800020e:	6013      	str	r3, [r2, #0]
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	200019dc 	.word	0x200019dc
 8000218:	20000000 	.word	0x20000000

0800021c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	200019dc 	.word	0x200019dc

08000228 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000228:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800022a:	6803      	ldr	r3, [r0, #0]
{
 800022c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800022e:	6898      	ldr	r0, [r3, #8]
 8000230:	f000 0003 	and.w	r0, r0, #3
 8000234:	2801      	cmp	r0, #1
 8000236:	d001      	beq.n	800023c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000238:	2000      	movs	r0, #0
 800023a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	07d2      	lsls	r2, r2, #31
 8000240:	d5fa      	bpl.n	8000238 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	f002 020d 	and.w	r2, r2, #13
 8000248:	2a01      	cmp	r2, #1
 800024a:	d11b      	bne.n	8000284 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800024c:	689a      	ldr	r2, [r3, #8]
 800024e:	f042 0202 	orr.w	r2, r2, #2
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	2203      	movs	r2, #3
 8000256:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000258:	f7ff ffe0 	bl	800021c <HAL_GetTick>
 800025c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800025e:	6823      	ldr	r3, [r4, #0]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	07db      	lsls	r3, r3, #31
 8000264:	d5e8      	bpl.n	8000238 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000266:	f7ff ffd9 	bl	800021c <HAL_GetTick>
 800026a:	1b40      	subs	r0, r0, r5
 800026c:	2802      	cmp	r0, #2
 800026e:	d9f6      	bls.n	800025e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000270:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000278:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
 8000282:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000284:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800028c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000294:	bd38      	pop	{r3, r4, r5, pc}
	...

08000298 <HAL_ADC_Init>:
{
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 800029c:	2300      	movs	r3, #0
 800029e:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80002a0:	4604      	mov	r4, r0
 80002a2:	2800      	cmp	r0, #0
 80002a4:	f000 8091 	beq.w	80003ca <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80002aa:	06d2      	lsls	r2, r2, #27
 80002ac:	d463      	bmi.n	8000376 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80002ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d02e      	beq.n	8000312 <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b4:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	00d1      	lsls	r1, r2, #3
 80002bc:	d502      	bpl.n	80002c4 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80002be:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80002c0:	009a      	lsls	r2, r3, #2
 80002c2:	d50a      	bpl.n	80002da <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 80002c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002c6:	f023 0312 	bic.w	r3, r3, #18
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80002d8:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002dc:	06db      	lsls	r3, r3, #27
 80002de:	d46e      	bmi.n	80003be <HAL_ADC_Init+0x126>
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d16c      	bne.n	80003be <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80002e4:	6823      	ldr	r3, [r4, #0]
 80002e6:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80002e8:	f015 0504 	ands.w	r5, r5, #4
 80002ec:	d167      	bne.n	80003be <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 80002ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002f0:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80002f4:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80002f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80002fc:	6462      	str	r2, [r4, #68]	; 0x44
 80002fe:	4a78      	ldr	r2, [pc, #480]	; (80004e0 <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000300:	d065      	beq.n	80003ce <HAL_ADC_Init+0x136>
 8000302:	4293      	cmp	r3, r2
 8000304:	d166      	bne.n	80003d4 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000306:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800030a:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800030c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8000310:	e066      	b.n	80003e0 <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 8000312:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000314:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000316:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000318:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 800031c:	f002 fc4a 	bl	8002bb4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000320:	6823      	ldr	r3, [r4, #0]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	00de      	lsls	r6, r3, #3
 8000326:	d4c5      	bmi.n	80002b4 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8000328:	4620      	mov	r0, r4
 800032a:	f7ff ff7d 	bl	8000228 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800032e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000330:	06d5      	lsls	r5, r2, #27
 8000332:	d4c0      	bmi.n	80002b6 <HAL_ADC_Init+0x1e>
 8000334:	2800      	cmp	r0, #0
 8000336:	d1be      	bne.n	80002b6 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000338:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800033a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800033e:	f023 0302 	bic.w	r3, r3, #2
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000348:	6823      	ldr	r3, [r4, #0]
 800034a:	689a      	ldr	r2, [r3, #8]
 800034c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000350:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000358:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800035a:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <HAL_ADC_Init+0x24c>)
 800035c:	4a62      	ldr	r2, [pc, #392]	; (80004e8 <HAL_ADC_Init+0x250>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	fbb3 f2f2 	udiv	r2, r3, r2
 8000364:	230a      	movs	r3, #10
 8000366:	4353      	muls	r3, r2
            wait_loop_index--;
 8000368:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800036a:	9b00      	ldr	r3, [sp, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0a1      	beq.n	80002b4 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8000370:	9b00      	ldr	r3, [sp, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	e7f8      	b.n	8000368 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000376:	4618      	mov	r0, r3
 8000378:	e7af      	b.n	80002da <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800037a:	4293      	cmp	r3, r2
 800037c:	bf0c      	ite	eq
 800037e:	9101      	streq	r1, [sp, #4]
 8000380:	9001      	strne	r0, [sp, #4]
 8000382:	e02c      	b.n	80003de <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 8000384:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000386:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800038a:	f042 0220 	orr.w	r2, r2, #32
 800038e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000390:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000392:	f042 0201 	orr.w	r2, r2, #1
 8000396:	64a2      	str	r2, [r4, #72]	; 0x48
 8000398:	e052      	b.n	8000440 <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800039a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800039e:	e06d      	b.n	800047c <HAL_ADC_Init+0x1e4>
 80003a0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80003a4:	e06a      	b.n	800047c <HAL_ADC_Init+0x1e4>
 80003a6:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80003aa:	e067      	b.n	800047c <HAL_ADC_Init+0x1e4>
 80003ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b0:	e064      	b.n	800047c <HAL_ADC_Init+0x1e4>
 80003b2:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 80003b6:	e061      	b.n	800047c <HAL_ADC_Init+0x1e4>
 80003b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80003bc:	e05e      	b.n	800047c <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 80003be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003c0:	f023 0312 	bic.w	r3, r3, #18
 80003c4:	f043 0310 	orr.w	r3, r3, #16
 80003c8:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 80003ca:	2001      	movs	r0, #1
 80003cc:	e085      	b.n	80004da <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003ce:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80003d0:	4a46      	ldr	r2, [pc, #280]	; (80004ec <HAL_ADC_Init+0x254>)
 80003d2:	e005      	b.n	80003e0 <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003d4:	4946      	ldr	r1, [pc, #280]	; (80004f0 <HAL_ADC_Init+0x258>)
 80003d6:	4a47      	ldr	r2, [pc, #284]	; (80004f4 <HAL_ADC_Init+0x25c>)
 80003d8:	428b      	cmp	r3, r1
 80003da:	d1ce      	bne.n	800037a <HAL_ADC_Init+0xe2>
 80003dc:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80003de:	4a46      	ldr	r2, [pc, #280]	; (80004f8 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003e0:	6899      	ldr	r1, [r3, #8]
 80003e2:	f001 0103 	and.w	r1, r1, #3
 80003e6:	2901      	cmp	r1, #1
 80003e8:	d102      	bne.n	80003f0 <HAL_ADC_Init+0x158>
 80003ea:	6819      	ldr	r1, [r3, #0]
 80003ec:	07ce      	lsls	r6, r1, #31
 80003ee:	d40f      	bmi.n	8000410 <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80003f0:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003f2:	b139      	cbz	r1, 8000404 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80003f4:	688e      	ldr	r6, [r1, #8]
 80003f6:	f006 0603 	and.w	r6, r6, #3
 80003fa:	2e01      	cmp	r6, #1
 80003fc:	d102      	bne.n	8000404 <HAL_ADC_Init+0x16c>
 80003fe:	6809      	ldr	r1, [r1, #0]
 8000400:	07c9      	lsls	r1, r1, #31
 8000402:	d405      	bmi.n	8000410 <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000404:	6891      	ldr	r1, [r2, #8]
 8000406:	6866      	ldr	r6, [r4, #4]
 8000408:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800040c:	4331      	orrs	r1, r6
 800040e:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000410:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000412:	68a6      	ldr	r6, [r4, #8]
 8000414:	69e2      	ldr	r2, [r4, #28]
 8000416:	2901      	cmp	r1, #1
 8000418:	68e1      	ldr	r1, [r4, #12]
 800041a:	ea41 0106 	orr.w	r1, r1, r6
 800041e:	bf18      	it	ne
 8000420:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 8000424:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 8000428:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800042a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800042c:	2d01      	cmp	r5, #1
 800042e:	d107      	bne.n	8000440 <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000430:	2a00      	cmp	r2, #0
 8000432:	d1a7      	bne.n	8000384 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000436:	3a01      	subs	r2, #1
 8000438:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 800043c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000442:	2a01      	cmp	r2, #1
 8000444:	d01d      	beq.n	8000482 <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000446:	4d2a      	ldr	r5, [pc, #168]	; (80004f0 <HAL_ADC_Init+0x258>)
 8000448:	42ab      	cmp	r3, r5
 800044a:	d003      	beq.n	8000454 <HAL_ADC_Init+0x1bc>
 800044c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8000450:	42ab      	cmp	r3, r5
 8000452:	d1a2      	bne.n	800039a <HAL_ADC_Init+0x102>
 8000454:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8000458:	d0a2      	beq.n	80003a0 <HAL_ADC_Init+0x108>
 800045a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800045e:	d0a2      	beq.n	80003a6 <HAL_ADC_Init+0x10e>
 8000460:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8000464:	d0a2      	beq.n	80003ac <HAL_ADC_Init+0x114>
 8000466:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 800046a:	d0a2      	beq.n	80003b2 <HAL_ADC_Init+0x11a>
 800046c:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000470:	d0a2      	beq.n	80003b8 <HAL_ADC_Init+0x120>
 8000472:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8000476:	bf08      	it	eq
 8000478:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 800047c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800047e:	4329      	orrs	r1, r5
 8000480:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	f012 0f0c 	tst.w	r2, #12
 8000488:	d10b      	bne.n	80004a2 <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800048a:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800048c:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800048e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000492:	f022 0202 	bic.w	r2, r2, #2
 8000496:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000498:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 80004a0:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80004a2:	68dd      	ldr	r5, [r3, #12]
 80004a4:	4a15      	ldr	r2, [pc, #84]	; (80004fc <HAL_ADC_Init+0x264>)
 80004a6:	402a      	ands	r2, r5
 80004a8:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80004aa:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80004ac:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80004ae:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80004b0:	bf05      	ittet	eq
 80004b2:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 80004b4:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80004b6:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80004b8:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 80004bc:	bf06      	itte	eq
 80004be:	f021 010f 	biceq.w	r1, r1, #15
 80004c2:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80004c4:	f022 020f 	bicne.w	r2, r2, #15
 80004c8:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80004ca:	2300      	movs	r3, #0
 80004cc:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80004ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004d0:	f023 0303 	bic.w	r3, r3, #3
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80004da:	b016      	add	sp, #88	; 0x58
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	bf00      	nop
 80004e0:	50000100 	.word	0x50000100
 80004e4:	2000000c 	.word	0x2000000c
 80004e8:	000f4240 	.word	0x000f4240
 80004ec:	50000300 	.word	0x50000300
 80004f0:	50000400 	.word	0x50000400
 80004f4:	50000500 	.word	0x50000500
 80004f8:	50000700 	.word	0x50000700
 80004fc:	fff0c007 	.word	0xfff0c007

08000500 <HAL_ADC_ConfigChannel>:
{
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000504:	2300      	movs	r3, #0
 8000506:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8000508:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800050c:	2b01      	cmp	r3, #1
{
 800050e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000510:	f000 8163 	beq.w	80007da <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000514:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000516:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000518:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800051a:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800051c:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 800051e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000522:	f100 8155 	bmi.w	80007d0 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 8000526:	6848      	ldr	r0, [r1, #4]
 8000528:	680c      	ldr	r4, [r1, #0]
 800052a:	2804      	cmp	r0, #4
 800052c:	f04f 0206 	mov.w	r2, #6
 8000530:	d831      	bhi.n	8000596 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000532:	4342      	muls	r2, r0
 8000534:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000536:	201f      	movs	r0, #31
 8000538:	4090      	lsls	r0, r2
 800053a:	ea27 0000 	bic.w	r0, r7, r0
 800053e:	fa04 f202 	lsl.w	r2, r4, r2
 8000542:	4302      	orrs	r2, r0
 8000544:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000546:	689a      	ldr	r2, [r3, #8]
 8000548:	f012 0f0c 	tst.w	r2, #12
 800054c:	d162      	bne.n	8000614 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800054e:	2c09      	cmp	r4, #9
 8000550:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000554:	688f      	ldr	r7, [r1, #8]
 8000556:	d946      	bls.n	80005e6 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000558:	4422      	add	r2, r4
 800055a:	6998      	ldr	r0, [r3, #24]
 800055c:	3a1e      	subs	r2, #30
 800055e:	f04f 0e07 	mov.w	lr, #7
 8000562:	fa0e fe02 	lsl.w	lr, lr, r2
 8000566:	ea20 000e 	bic.w	r0, r0, lr
 800056a:	fa07 f202 	lsl.w	r2, r7, r2
 800056e:	4302      	orrs	r2, r0
 8000570:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000578:	694a      	ldr	r2, [r1, #20]
 800057a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800057e:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000582:	690a      	ldr	r2, [r1, #16]
 8000584:	3a01      	subs	r2, #1
 8000586:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800058a:	2a03      	cmp	r2, #3
 800058c:	d873      	bhi.n	8000676 <HAL_ADC_ConfigChannel+0x176>
 800058e:	e8df f002 	tbb	[pc, r2]
 8000592:	5137      	.short	0x5137
 8000594:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8000596:	2809      	cmp	r0, #9
 8000598:	d80b      	bhi.n	80005b2 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800059a:	4342      	muls	r2, r0
 800059c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800059e:	3a1e      	subs	r2, #30
 80005a0:	201f      	movs	r0, #31
 80005a2:	4090      	lsls	r0, r2
 80005a4:	ea27 0000 	bic.w	r0, r7, r0
 80005a8:	fa04 f202 	lsl.w	r2, r4, r2
 80005ac:	4302      	orrs	r2, r0
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
 80005b0:	e7c9      	b.n	8000546 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 80005b2:	280e      	cmp	r0, #14
 80005b4:	d80b      	bhi.n	80005ce <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80005b6:	4342      	muls	r2, r0
 80005b8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80005ba:	3a3c      	subs	r2, #60	; 0x3c
 80005bc:	201f      	movs	r0, #31
 80005be:	4090      	lsls	r0, r2
 80005c0:	ea27 0000 	bic.w	r0, r7, r0
 80005c4:	fa04 f202 	lsl.w	r2, r4, r2
 80005c8:	4302      	orrs	r2, r0
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38
 80005cc:	e7bb      	b.n	8000546 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80005ce:	4342      	muls	r2, r0
 80005d0:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80005d2:	3a5a      	subs	r2, #90	; 0x5a
 80005d4:	201f      	movs	r0, #31
 80005d6:	4090      	lsls	r0, r2
 80005d8:	ea27 0000 	bic.w	r0, r7, r0
 80005dc:	fa04 f202 	lsl.w	r2, r4, r2
 80005e0:	4302      	orrs	r2, r0
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e4:	e7af      	b.n	8000546 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80005e6:	6958      	ldr	r0, [r3, #20]
 80005e8:	4422      	add	r2, r4
 80005ea:	f04f 0e07 	mov.w	lr, #7
 80005ee:	fa0e fe02 	lsl.w	lr, lr, r2
 80005f2:	ea20 000e 	bic.w	r0, r0, lr
 80005f6:	fa07 f202 	lsl.w	r2, r7, r2
 80005fa:	4302      	orrs	r2, r0
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	e7b8      	b.n	8000572 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000602:	4f83      	ldr	r7, [pc, #524]	; (8000810 <HAL_ADC_ConfigChannel+0x310>)
 8000604:	4017      	ands	r7, r2
 8000606:	ea47 020c 	orr.w	r2, r7, ip
 800060a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800060e:	ea42 020e 	orr.w	r2, r2, lr
 8000612:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000614:	689a      	ldr	r2, [r3, #8]
 8000616:	f002 0203 	and.w	r2, r2, #3
 800061a:	2a01      	cmp	r2, #1
 800061c:	f040 80df 	bne.w	80007de <HAL_ADC_ConfigChannel+0x2de>
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	07d7      	lsls	r7, r2, #31
 8000624:	f140 80db 	bpl.w	80007de <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000628:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800062a:	2300      	movs	r3, #0
 800062c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000630:	b017      	add	sp, #92	; 0x5c
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000634:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000636:	4f76      	ldr	r7, [pc, #472]	; (8000810 <HAL_ADC_ConfigChannel+0x310>)
 8000638:	4017      	ands	r7, r2
 800063a:	ea47 020c 	orr.w	r2, r7, ip
 800063e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000642:	ea42 020e 	orr.w	r2, r2, lr
 8000646:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000648:	e7e4      	b.n	8000614 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800064a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800064c:	4870      	ldr	r0, [pc, #448]	; (8000810 <HAL_ADC_ConfigChannel+0x310>)
 800064e:	4010      	ands	r0, r2
 8000650:	ea40 020c 	orr.w	r2, r0, ip
 8000654:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000658:	ea42 020e 	orr.w	r2, r2, lr
 800065c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800065e:	e7d9      	b.n	8000614 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000660:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000662:	4a6b      	ldr	r2, [pc, #428]	; (8000810 <HAL_ADC_ConfigChannel+0x310>)
 8000664:	4002      	ands	r2, r0
 8000666:	ea42 020c 	orr.w	r2, r2, ip
 800066a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800066e:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000672:	66da      	str	r2, [r3, #108]	; 0x6c
 8000674:	e7ce      	b.n	8000614 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000678:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800067c:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800067e:	bf02      	ittt	eq
 8000680:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000682:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000686:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000688:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800068a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800068e:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000690:	bf02      	ittt	eq
 8000692:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000694:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000698:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800069a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800069c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80006a0:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80006a2:	bf02      	ittt	eq
 80006a4:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 80006a6:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80006aa:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80006ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80006ae:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80006b2:	4594      	cmp	ip, r2
 80006b4:	d1ae      	bne.n	8000614 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80006b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80006b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80006bc:	e7d9      	b.n	8000672 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80006be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80006c2:	2101      	movs	r1, #1
 80006c4:	40a1      	lsls	r1, r4
 80006c6:	ea22 0201 	bic.w	r2, r2, r1
 80006ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80006ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006d2:	d01e      	beq.n	8000712 <HAL_ADC_ConfigChannel+0x212>
 80006d4:	494f      	ldr	r1, [pc, #316]	; (8000814 <HAL_ADC_ConfigChannel+0x314>)
 80006d6:	4a50      	ldr	r2, [pc, #320]	; (8000818 <HAL_ADC_ConfigChannel+0x318>)
 80006d8:	4850      	ldr	r0, [pc, #320]	; (800081c <HAL_ADC_ConfigChannel+0x31c>)
 80006da:	4283      	cmp	r3, r0
 80006dc:	bf08      	it	eq
 80006de:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006e0:	2c10      	cmp	r4, #16
 80006e2:	d118      	bne.n	8000716 <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80006e4:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80006e6:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80006ea:	d19d      	bne.n	8000628 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80006ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006f0:	494a      	ldr	r1, [pc, #296]	; (800081c <HAL_ADC_ConfigChannel+0x31c>)
 80006f2:	d11c      	bne.n	800072e <HAL_ADC_ConfigChannel+0x22e>
 80006f4:	9101      	str	r1, [sp, #4]
 80006f6:	e024      	b.n	8000742 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 80006f8:	1c60      	adds	r0, r4, #1
 80006fa:	6959      	ldr	r1, [r3, #20]
 80006fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000700:	2207      	movs	r2, #7
 8000702:	4082      	lsls	r2, r0
 8000704:	ea21 0102 	bic.w	r1, r1, r2
 8000708:	fa06 f200 	lsl.w	r2, r6, r0
 800070c:	430a      	orrs	r2, r1
 800070e:	615a      	str	r2, [r3, #20]
 8000710:	e7dd      	b.n	80006ce <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000712:	4a40      	ldr	r2, [pc, #256]	; (8000814 <HAL_ADC_ConfigChannel+0x314>)
 8000714:	e7e4      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000716:	2c11      	cmp	r4, #17
 8000718:	d103      	bne.n	8000722 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800071a:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800071c:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000720:	e7e3      	b.n	80006ea <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000722:	2c12      	cmp	r4, #18
 8000724:	d180      	bne.n	8000628 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000726:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000728:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 800072c:	e7dd      	b.n	80006ea <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800072e:	428b      	cmp	r3, r1
 8000730:	d102      	bne.n	8000738 <HAL_ADC_ConfigChannel+0x238>
 8000732:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000736:	e7dd      	b.n	80006f4 <HAL_ADC_ConfigChannel+0x1f4>
 8000738:	4939      	ldr	r1, [pc, #228]	; (8000820 <HAL_ADC_ConfigChannel+0x320>)
 800073a:	483a      	ldr	r0, [pc, #232]	; (8000824 <HAL_ADC_ConfigChannel+0x324>)
 800073c:	428b      	cmp	r3, r1
 800073e:	d12b      	bne.n	8000798 <HAL_ADC_ConfigChannel+0x298>
 8000740:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000742:	6899      	ldr	r1, [r3, #8]
 8000744:	f001 0103 	and.w	r1, r1, #3
 8000748:	2901      	cmp	r1, #1
 800074a:	d102      	bne.n	8000752 <HAL_ADC_ConfigChannel+0x252>
 800074c:	6819      	ldr	r1, [r3, #0]
 800074e:	07c8      	lsls	r0, r1, #31
 8000750:	d438      	bmi.n	80007c4 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000752:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000754:	b139      	cbz	r1, 8000766 <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000756:	6888      	ldr	r0, [r1, #8]
 8000758:	f000 0003 	and.w	r0, r0, #3
 800075c:	2801      	cmp	r0, #1
 800075e:	d102      	bne.n	8000766 <HAL_ADC_ConfigChannel+0x266>
 8000760:	6809      	ldr	r1, [r1, #0]
 8000762:	07c9      	lsls	r1, r1, #31
 8000764:	d42e      	bmi.n	80007c4 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000766:	2c10      	cmp	r4, #16
 8000768:	d11a      	bne.n	80007a0 <HAL_ADC_ConfigChannel+0x2a0>
 800076a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800076e:	f47f af5b 	bne.w	8000628 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000772:	6893      	ldr	r3, [r2, #8]
 8000774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000778:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <HAL_ADC_ConfigChannel+0x328>)
 800077c:	4a2b      	ldr	r2, [pc, #172]	; (800082c <HAL_ADC_ConfigChannel+0x32c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	fbb3 f2f2 	udiv	r2, r3, r2
 8000784:	230a      	movs	r3, #10
 8000786:	4353      	muls	r3, r2
            wait_loop_index--;
 8000788:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 800078a:	9b00      	ldr	r3, [sp, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	f43f af4b 	beq.w	8000628 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000792:	9b00      	ldr	r3, [sp, #0]
 8000794:	3b01      	subs	r3, #1
 8000796:	e7f7      	b.n	8000788 <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000798:	4283      	cmp	r3, r0
 800079a:	bf18      	it	ne
 800079c:	2100      	movne	r1, #0
 800079e:	e7a9      	b.n	80006f4 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80007a0:	2c11      	cmp	r4, #17
 80007a2:	d108      	bne.n	80007b6 <HAL_ADC_ConfigChannel+0x2b6>
 80007a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007a8:	f47f af3e 	bne.w	8000628 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80007b2:	6093      	str	r3, [r2, #8]
 80007b4:	e738      	b.n	8000628 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80007b6:	2c12      	cmp	r4, #18
 80007b8:	f47f af36 	bne.w	8000628 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80007bc:	6893      	ldr	r3, [r2, #8]
 80007be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c2:	e7f6      	b.n	80007b2 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007c4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 80007cc:	2001      	movs	r0, #1
 80007ce:	e72c      	b.n	800062a <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007d0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007d2:	f043 0320 	orr.w	r3, r3, #32
 80007d6:	646b      	str	r3, [r5, #68]	; 0x44
 80007d8:	e727      	b.n	800062a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 80007da:	2002      	movs	r0, #2
 80007dc:	e728      	b.n	8000630 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80007de:	2e01      	cmp	r6, #1
 80007e0:	f47f af6d 	bne.w	80006be <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80007e8:	40a6      	lsls	r6, r4
 80007ea:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80007ec:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80007ee:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 80007f2:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80007f4:	d980      	bls.n	80006f8 <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 80007f6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80007fa:	6999      	ldr	r1, [r3, #24]
 80007fc:	3a1b      	subs	r2, #27
 80007fe:	2007      	movs	r0, #7
 8000800:	4090      	lsls	r0, r2
 8000802:	ea21 0100 	bic.w	r1, r1, r0
 8000806:	fa06 f202 	lsl.w	r2, r6, r2
 800080a:	430a      	orrs	r2, r1
 800080c:	619a      	str	r2, [r3, #24]
 800080e:	e75e      	b.n	80006ce <HAL_ADC_ConfigChannel+0x1ce>
 8000810:	83fff000 	.word	0x83fff000
 8000814:	50000300 	.word	0x50000300
 8000818:	50000700 	.word	0x50000700
 800081c:	50000100 	.word	0x50000100
 8000820:	50000400 	.word	0x50000400
 8000824:	50000500 	.word	0x50000500
 8000828:	2000000c 	.word	0x2000000c
 800082c:	000f4240 	.word	0x000f4240

08000830 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000832:	6802      	ldr	r2, [r0, #0]
 8000834:	4b41      	ldr	r3, [pc, #260]	; (800093c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000836:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800083a:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800083c:	d101      	bne.n	8000842 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	e009      	b.n	8000856 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000842:	429a      	cmp	r2, r3
 8000844:	d102      	bne.n	800084c <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8000846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800084a:	e7f8      	b.n	800083e <HAL_ADCEx_MultiModeConfigChannel+0xe>
 800084c:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800084e:	4c3d      	ldr	r4, [pc, #244]	; (8000944 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8000850:	429a      	cmp	r2, r3
 8000852:	d130      	bne.n	80008b6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000854:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000856:	9c01      	ldr	r4, [sp, #4]
 8000858:	2c00      	cmp	r4, #0
 800085a:	d058      	beq.n	800090e <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 800085c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000860:	2b01      	cmp	r3, #1
 8000862:	d056      	beq.n	8000912 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8000864:	2301      	movs	r3, #1
 8000866:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800086a:	6893      	ldr	r3, [r2, #8]
 800086c:	075b      	lsls	r3, r3, #29
 800086e:	d443      	bmi.n	80008f8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000870:	68a3      	ldr	r3, [r4, #8]
 8000872:	075f      	lsls	r7, r3, #29
 8000874:	d440      	bmi.n	80008f8 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000876:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800087a:	d020      	beq.n	80008be <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 800087c:	4d32      	ldr	r5, [pc, #200]	; (8000948 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8000880:	4e2e      	ldr	r6, [pc, #184]	; (800093c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000882:	42b2      	cmp	r2, r6
 8000884:	bf08      	it	eq
 8000886:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000888:	680d      	ldr	r5, [r1, #0]
 800088a:	b1d5      	cbz	r5, 80008c2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800088c:	684e      	ldr	r6, [r1, #4]
 800088e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000892:	4637      	mov	r7, r6
 8000894:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000896:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 800089a:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 800089e:	433e      	orrs	r6, r7
 80008a0:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80008a2:	6896      	ldr	r6, [r2, #8]
 80008a4:	f006 0603 	and.w	r6, r6, #3
 80008a8:	2e01      	cmp	r6, #1
 80008aa:	d134      	bne.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 80008ac:	6812      	ldr	r2, [r2, #0]
 80008ae:	07d6      	lsls	r6, r2, #31
 80008b0:	d531      	bpl.n	8000916 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e025      	b.n	8000902 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008b6:	42a2      	cmp	r2, r4
 80008b8:	bf18      	it	ne
 80008ba:	2300      	movne	r3, #0
 80008bc:	e7bf      	b.n	800083e <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008be:	4b22      	ldr	r3, [pc, #136]	; (8000948 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80008c0:	e7e2      	b.n	8000888 <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80008c2:	6899      	ldr	r1, [r3, #8]
 80008c4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80008c8:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80008ca:	6891      	ldr	r1, [r2, #8]
 80008cc:	f001 0103 	and.w	r1, r1, #3
 80008d0:	2901      	cmp	r1, #1
 80008d2:	d102      	bne.n	80008da <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80008d4:	6812      	ldr	r2, [r2, #0]
 80008d6:	07d1      	lsls	r1, r2, #31
 80008d8:	d4eb      	bmi.n	80008b2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80008da:	68a2      	ldr	r2, [r4, #8]
 80008dc:	f002 0203 	and.w	r2, r2, #3
 80008e0:	2a01      	cmp	r2, #1
 80008e2:	d102      	bne.n	80008ea <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80008e4:	6822      	ldr	r2, [r4, #0]
 80008e6:	07d2      	lsls	r2, r2, #31
 80008e8:	d4e3      	bmi.n	80008b2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80008ea:	689a      	ldr	r2, [r3, #8]
 80008ec:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80008f0:	f022 020f 	bic.w	r2, r2, #15
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	e7dc      	b.n	80008b2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008fa:	f043 0320 	orr.w	r3, r3, #32
 80008fe:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000902:	2200      	movs	r2, #0
 8000904:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8000908:	4618      	mov	r0, r3
 800090a:	b017      	add	sp, #92	; 0x5c
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e7fa      	b.n	8000908 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8000912:	2302      	movs	r3, #2
 8000914:	e7f8      	b.n	8000908 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000916:	68a2      	ldr	r2, [r4, #8]
 8000918:	f002 0203 	and.w	r2, r2, #3
 800091c:	2a01      	cmp	r2, #1
 800091e:	d102      	bne.n	8000926 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	07d4      	lsls	r4, r2, #31
 8000924:	d4c5      	bmi.n	80008b2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	6889      	ldr	r1, [r1, #8]
 800092a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800092e:	430d      	orrs	r5, r1
 8000930:	f022 020f 	bic.w	r2, r2, #15
 8000934:	4315      	orrs	r5, r2
 8000936:	609d      	str	r5, [r3, #8]
 8000938:	e7bb      	b.n	80008b2 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 800093a:	bf00      	nop
 800093c:	50000100 	.word	0x50000100
 8000940:	50000400 	.word	0x50000400
 8000944:	50000500 	.word	0x50000500
 8000948:	50000300 	.word	0x50000300
 800094c:	50000700 	.word	0x50000700

08000950 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000952:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000954:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000958:	041b      	lsls	r3, r3, #16
 800095a:	0c1b      	lsrs	r3, r3, #16
 800095c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000960:	0200      	lsls	r0, r0, #8
 8000962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000966:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800096a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800096c:	60d3      	str	r3, [r2, #12]
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000976:	b530      	push	{r4, r5, lr}
 8000978:	68dc      	ldr	r4, [r3, #12]
 800097a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000984:	2b04      	cmp	r3, #4
 8000986:	bf28      	it	cs
 8000988:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	f04f 0501 	mov.w	r5, #1
 8000990:	fa05 f303 	lsl.w	r3, r5, r3
 8000994:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000998:	bf8c      	ite	hi
 800099a:	3c03      	subhi	r4, #3
 800099c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099e:	4019      	ands	r1, r3
 80009a0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a2:	fa05 f404 	lsl.w	r4, r5, r4
 80009a6:	3c01      	subs	r4, #1
 80009a8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	ea42 0201 	orr.w	r2, r2, r1
 80009b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	bfaf      	iteee	ge
 80009b6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ba:	f000 000f 	andlt.w	r0, r0, #15
 80009be:	4b06      	ldrlt	r3, [pc, #24]	; (80009d8 <HAL_NVIC_SetPriority+0x64>)
 80009c0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c2:	bfa5      	ittet	ge
 80009c4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009c8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009d0:	bd30      	pop	{r4, r5, pc}
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00
 80009d8:	e000ed14 	.word	0xe000ed14

080009dc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80009dc:	0942      	lsrs	r2, r0, #5
 80009de:	2301      	movs	r3, #1
 80009e0:	f000 001f 	and.w	r0, r0, #31
 80009e4:	fa03 f000 	lsl.w	r0, r3, r0
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <HAL_NVIC_EnableIRQ+0x14>)
 80009ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009f8:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fc:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000b90 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a00:	4a61      	ldr	r2, [pc, #388]	; (8000b88 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000a02:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a04:	fa38 f403 	lsrs.w	r4, r8, r3
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000a0a:	b003      	add	sp, #12
 8000a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a10:	f04f 0e01 	mov.w	lr, #1
 8000a14:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000a18:	ea18 060e 	ands.w	r6, r8, lr
 8000a1c:	f000 80a6 	beq.w	8000b6c <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a20:	684c      	ldr	r4, [r1, #4]
 8000a22:	f024 0710 	bic.w	r7, r4, #16
 8000a26:	2f02      	cmp	r7, #2
 8000a28:	d116      	bne.n	8000a58 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000a2a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a2e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a32:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000a36:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a3a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a3e:	f04f 0c0f 	mov.w	ip, #15
 8000a42:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a46:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a4a:	690d      	ldr	r5, [r1, #16]
 8000a4c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a50:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000a54:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a58:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a5c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a5e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a62:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a66:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a68:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a6c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a70:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a74:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a76:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a7a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a7c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a80:	d811      	bhi.n	8000aa6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000a82:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a84:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a88:	68cf      	ldr	r7, [r1, #12]
 8000a8a:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a8e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a92:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a94:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a9a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a9e:	409f      	lsls	r7, r3
 8000aa0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000aa4:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000aa6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aa8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aaa:	688f      	ldr	r7, [r1, #8]
 8000aac:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ab0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ab2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab4:	00e5      	lsls	r5, r4, #3
 8000ab6:	d559      	bpl.n	8000b6c <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000abc:	f045 0501 	orr.w	r5, r5, #1
 8000ac0:	f8c9 5018 	str.w	r5, [r9, #24]
 8000ac4:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000ac8:	f023 0703 	bic.w	r7, r3, #3
 8000acc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ad0:	f005 0501 	and.w	r5, r5, #1
 8000ad4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ad8:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ada:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000ae0:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ae2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ae6:	f04f 0e0f 	mov.w	lr, #15
 8000aea:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000aee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000af2:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000af6:	d03b      	beq.n	8000b70 <HAL_GPIO_Init+0x17c>
 8000af8:	4d24      	ldr	r5, [pc, #144]	; (8000b8c <HAL_GPIO_Init+0x198>)
 8000afa:	42a8      	cmp	r0, r5
 8000afc:	d03a      	beq.n	8000b74 <HAL_GPIO_Init+0x180>
 8000afe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	d038      	beq.n	8000b78 <HAL_GPIO_Init+0x184>
 8000b06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b0a:	42a8      	cmp	r0, r5
 8000b0c:	d036      	beq.n	8000b7c <HAL_GPIO_Init+0x188>
 8000b0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b12:	42a8      	cmp	r0, r5
 8000b14:	d034      	beq.n	8000b80 <HAL_GPIO_Init+0x18c>
 8000b16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b1a:	42a8      	cmp	r0, r5
 8000b1c:	d032      	beq.n	8000b84 <HAL_GPIO_Init+0x190>
 8000b1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b22:	42a8      	cmp	r0, r5
 8000b24:	bf14      	ite	ne
 8000b26:	2507      	movne	r5, #7
 8000b28:	2506      	moveq	r5, #6
 8000b2a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b2e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000b32:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b34:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b36:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b38:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b3c:	bf0c      	ite	eq
 8000b3e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000b40:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000b42:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000b44:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b46:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b4a:	bf0c      	ite	eq
 8000b4c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000b4e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000b50:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000b52:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b54:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b58:	bf0c      	ite	eq
 8000b5a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000b5c:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000b5e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000b60:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b62:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b64:	bf54      	ite	pl
 8000b66:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000b68:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000b6a:	60d5      	str	r5, [r2, #12]
    position++;
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	e749      	b.n	8000a04 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b70:	2500      	movs	r5, #0
 8000b72:	e7da      	b.n	8000b2a <HAL_GPIO_Init+0x136>
 8000b74:	2501      	movs	r5, #1
 8000b76:	e7d8      	b.n	8000b2a <HAL_GPIO_Init+0x136>
 8000b78:	2502      	movs	r5, #2
 8000b7a:	e7d6      	b.n	8000b2a <HAL_GPIO_Init+0x136>
 8000b7c:	2503      	movs	r5, #3
 8000b7e:	e7d4      	b.n	8000b2a <HAL_GPIO_Init+0x136>
 8000b80:	2504      	movs	r5, #4
 8000b82:	e7d2      	b.n	8000b2a <HAL_GPIO_Init+0x136>
 8000b84:	2505      	movs	r5, #5
 8000b86:	e7d0      	b.n	8000b2a <HAL_GPIO_Init+0x136>
 8000b88:	40010400 	.word	0x40010400
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b94:	b10a      	cbz	r2, 8000b9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b96:	6181      	str	r1, [r0, #24]
 8000b98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b9a:	6281      	str	r1, [r0, #40]	; 0x28
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	b918      	cbnz	r0, 8000bb0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000ba8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000baa:	b002      	add	sp, #8
 8000bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb0:	6803      	ldr	r3, [r0, #0]
 8000bb2:	07df      	lsls	r7, r3, #31
 8000bb4:	d411      	bmi.n	8000bda <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	079e      	lsls	r6, r3, #30
 8000bba:	f100 8088 	bmi.w	8000cce <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bbe:	682b      	ldr	r3, [r5, #0]
 8000bc0:	071c      	lsls	r4, r3, #28
 8000bc2:	f100 80fc 	bmi.w	8000dbe <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	0758      	lsls	r0, r3, #29
 8000bca:	f100 8145 	bmi.w	8000e58 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bce:	69aa      	ldr	r2, [r5, #24]
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	f040 81dc 	bne.w	8000f8e <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e7e7      	b.n	8000baa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bda:	4cbd      	ldr	r4, [pc, #756]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000bdc:	6863      	ldr	r3, [r4, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d00a      	beq.n	8000bfc <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d119      	bne.n	8000c24 <HAL_RCC_OscConfig+0x84>
 8000bf0:	6863      	ldr	r3, [r4, #4]
 8000bf2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfa:	d113      	bne.n	8000c24 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c00:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c04:	6821      	ldr	r1, [r4, #0]
 8000c06:	fa93 f3a3 	rbit	r3, r3
 8000c0a:	fab3 f383 	clz	r3, r3
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	2201      	movs	r2, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	420b      	tst	r3, r1
 8000c1a:	d0cc      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x16>
 8000c1c:	686b      	ldr	r3, [r5, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1c9      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x16>
 8000c22:	e7c1      	b.n	8000ba8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c24:	686b      	ldr	r3, [r5, #4]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d11e      	bne.n	8000c6a <HAL_RCC_OscConfig+0xca>
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c34:	f7ff faf2 	bl	800021c <HAL_GetTick>
 8000c38:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c3c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	2701      	movs	r7, #1
 8000c40:	fa96 f3a6 	rbit	r3, r6
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	fa96 f3a6 	rbit	r3, r6
 8000c4a:	fab3 f383 	clz	r3, r3
 8000c4e:	f003 031f 	and.w	r3, r3, #31
 8000c52:	fa07 f303 	lsl.w	r3, r7, r3
 8000c56:	4213      	tst	r3, r2
 8000c58:	d1ad      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5a:	f7ff fadf 	bl	800021c <HAL_GetTick>
 8000c5e:	eba0 0008 	sub.w	r0, r0, r8
 8000c62:	2864      	cmp	r0, #100	; 0x64
 8000c64:	d9ec      	bls.n	8000c40 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000c66:	2003      	movs	r0, #3
 8000c68:	e79f      	b.n	8000baa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6a:	bb0b      	cbnz	r3, 8000cb0 <HAL_RCC_OscConfig+0x110>
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c72:	6023      	str	r3, [r4, #0]
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c7c:	f7ff face 	bl	800021c <HAL_GetTick>
 8000c80:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000c84:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	2701      	movs	r7, #1
 8000c88:	fa96 f3a6 	rbit	r3, r6
 8000c8c:	6822      	ldr	r2, [r4, #0]
 8000c8e:	fa96 f3a6 	rbit	r3, r6
 8000c92:	fab3 f383 	clz	r3, r3
 8000c96:	f003 031f 	and.w	r3, r3, #31
 8000c9a:	fa07 f303 	lsl.w	r3, r7, r3
 8000c9e:	4213      	tst	r3, r2
 8000ca0:	d089      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ca2:	f7ff fabb 	bl	800021c <HAL_GetTick>
 8000ca6:	eba0 0008 	sub.w	r0, r0, r8
 8000caa:	2864      	cmp	r0, #100	; 0x64
 8000cac:	d9ec      	bls.n	8000c88 <HAL_RCC_OscConfig+0xe8>
 8000cae:	e7da      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	d103      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x120>
 8000cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cbc:	6023      	str	r3, [r4, #0]
 8000cbe:	e7b5      	b.n	8000c2c <HAL_RCC_OscConfig+0x8c>
 8000cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	e7b1      	b.n	8000c32 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000cce:	4c80      	ldr	r4, [pc, #512]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	f013 0f0c 	tst.w	r3, #12
 8000cd6:	d00a      	beq.n	8000cee <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d125      	bne.n	8000d2e <HAL_RCC_OscConfig+0x18e>
 8000ce2:	6863      	ldr	r3, [r4, #4]
 8000ce4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cec:	d11f      	bne.n	8000d2e <HAL_RCC_OscConfig+0x18e>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf4:	6821      	ldr	r1, [r4, #0]
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	fab3 f383 	clz	r3, r3
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	2201      	movs	r2, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	420b      	tst	r3, r1
 8000d0a:	d003      	beq.n	8000d14 <HAL_RCC_OscConfig+0x174>
 8000d0c:	68eb      	ldr	r3, [r5, #12]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	f47f af4a 	bne.w	8000ba8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	6821      	ldr	r1, [r4, #0]
 8000d16:	23f8      	movs	r3, #248	; 0xf8
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	fab3 f283 	clz	r2, r3
 8000d20:	692b      	ldr	r3, [r5, #16]
 8000d22:	4093      	lsls	r3, r2
 8000d24:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	6023      	str	r3, [r4, #0]
 8000d2c:	e747      	b.n	8000bbe <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d2e:	68ea      	ldr	r2, [r5, #12]
 8000d30:	2601      	movs	r6, #1
 8000d32:	b30a      	cbz	r2, 8000d78 <HAL_RCC_OscConfig+0x1d8>
 8000d34:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000d38:	fab3 f383 	clz	r3, r3
 8000d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	2702      	movs	r7, #2
 8000d48:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000d4a:	f7ff fa67 	bl	800021c <HAL_GetTick>
 8000d4e:	4680      	mov	r8, r0
 8000d50:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	6822      	ldr	r2, [r4, #0]
 8000d56:	fa97 f3a7 	rbit	r3, r7
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	fa06 f303 	lsl.w	r3, r6, r3
 8000d66:	4213      	tst	r3, r2
 8000d68:	d1d4      	bne.n	8000d14 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fa57 	bl	800021c <HAL_GetTick>
 8000d6e:	eba0 0008 	sub.w	r0, r0, r8
 8000d72:	2802      	cmp	r0, #2
 8000d74:	d9ec      	bls.n	8000d50 <HAL_RCC_OscConfig+0x1b0>
 8000d76:	e776      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
 8000d78:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000d7c:	fab3 f383 	clz	r3, r3
 8000d80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	2702      	movs	r7, #2
 8000d8c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fa45 	bl	800021c <HAL_GetTick>
 8000d92:	4680      	mov	r8, r0
 8000d94:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	fa97 f3a7 	rbit	r3, r7
 8000d9e:	fab3 f383 	clz	r3, r3
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	fa06 f303 	lsl.w	r3, r6, r3
 8000daa:	4213      	tst	r3, r2
 8000dac:	f43f af07 	beq.w	8000bbe <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000db0:	f7ff fa34 	bl	800021c <HAL_GetTick>
 8000db4:	eba0 0008 	sub.w	r0, r0, r8
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d9eb      	bls.n	8000d94 <HAL_RCC_OscConfig+0x1f4>
 8000dbc:	e753      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dbe:	696a      	ldr	r2, [r5, #20]
 8000dc0:	4e43      	ldr	r6, [pc, #268]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000dc2:	4944      	ldr	r1, [pc, #272]	; (8000ed4 <HAL_RCC_OscConfig+0x334>)
 8000dc4:	2401      	movs	r4, #1
 8000dc6:	b31a      	cbz	r2, 8000e10 <HAL_RCC_OscConfig+0x270>
 8000dc8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000dcc:	fab3 f383 	clz	r3, r3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	2702      	movs	r7, #2
 8000dd6:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fa20 	bl	800021c <HAL_GetTick>
 8000ddc:	4680      	mov	r8, r0
 8000dde:	fa97 f3a7 	rbit	r3, r7
 8000de2:	fa97 f3a7 	rbit	r3, r7
 8000de6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000dec:	fa97 f3a7 	rbit	r3, r7
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	f003 031f 	and.w	r3, r3, #31
 8000df8:	fa04 f303 	lsl.w	r3, r4, r3
 8000dfc:	4213      	tst	r3, r2
 8000dfe:	f47f aee2 	bne.w	8000bc6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e02:	f7ff fa0b 	bl	800021c <HAL_GetTick>
 8000e06:	eba0 0008 	sub.w	r0, r0, r8
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9e7      	bls.n	8000dde <HAL_RCC_OscConfig+0x23e>
 8000e0e:	e72a      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
 8000e10:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	440b      	add	r3, r1
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	2702      	movs	r7, #2
 8000e1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e20:	f7ff f9fc 	bl	800021c <HAL_GetTick>
 8000e24:	4680      	mov	r8, r0
 8000e26:	fa97 f3a7 	rbit	r3, r7
 8000e2a:	fa97 f3a7 	rbit	r3, r7
 8000e2e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e32:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000e34:	fa97 f3a7 	rbit	r3, r7
 8000e38:	fab3 f383 	clz	r3, r3
 8000e3c:	f003 031f 	and.w	r3, r3, #31
 8000e40:	fa04 f303 	lsl.w	r3, r4, r3
 8000e44:	4213      	tst	r3, r2
 8000e46:	f43f aebe 	beq.w	8000bc6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e4a:	f7ff f9e7 	bl	800021c <HAL_GetTick>
 8000e4e:	eba0 0008 	sub.w	r0, r0, r8
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9e7      	bls.n	8000e26 <HAL_RCC_OscConfig+0x286>
 8000e56:	e706      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e58:	4c1d      	ldr	r4, [pc, #116]	; (8000ed0 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	69e3      	ldr	r3, [r4, #28]
 8000e5c:	00d9      	lsls	r1, r3, #3
 8000e5e:	d434      	bmi.n	8000eca <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	69e3      	ldr	r3, [r4, #28]
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	61e3      	str	r3, [r4, #28]
 8000e68:	69e3      	ldr	r3, [r4, #28]
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e72:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e74:	4f18      	ldr	r7, [pc, #96]	; (8000ed8 <HAL_RCC_OscConfig+0x338>)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	05da      	lsls	r2, r3, #23
 8000e7a:	d52f      	bpl.n	8000edc <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7c:	68ab      	ldr	r3, [r5, #8]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d13d      	bne.n	8000efe <HAL_RCC_OscConfig+0x35e>
 8000e82:	6a23      	ldr	r3, [r4, #32]
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e8a:	f7ff f9c7 	bl	800021c <HAL_GetTick>
 8000e8e:	2702      	movs	r7, #2
 8000e90:	4682      	mov	sl, r0
 8000e92:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e94:	f04f 0801 	mov.w	r8, #1
 8000e98:	fa97 f3a7 	rbit	r3, r7
 8000e9c:	fa97 f3a7 	rbit	r3, r7
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d06c      	beq.n	8000f7e <HAL_RCC_OscConfig+0x3de>
 8000ea4:	6a22      	ldr	r2, [r4, #32]
 8000ea6:	fa99 f3a9 	rbit	r3, r9
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	fa08 f303 	lsl.w	r3, r8, r3
 8000eb6:	4213      	tst	r3, r2
 8000eb8:	d058      	beq.n	8000f6c <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f43f ae87 	beq.w	8000bce <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec0:	69e3      	ldr	r3, [r4, #28]
 8000ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	61e3      	str	r3, [r4, #28]
 8000ec8:	e681      	b.n	8000bce <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000eca:	2600      	movs	r6, #0
 8000ecc:	e7d2      	b.n	8000e74 <HAL_RCC_OscConfig+0x2d4>
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	10908120 	.word	0x10908120
 8000ed8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ee4:	f7ff f99a 	bl	800021c <HAL_GetTick>
 8000ee8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	d4c5      	bmi.n	8000e7c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef0:	f7ff f994 	bl	800021c <HAL_GetTick>
 8000ef4:	eba0 0008 	sub.w	r0, r0, r8
 8000ef8:	2864      	cmp	r0, #100	; 0x64
 8000efa:	d9f6      	bls.n	8000eea <HAL_RCC_OscConfig+0x34a>
 8000efc:	e6b3      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efe:	bb3b      	cbnz	r3, 8000f50 <HAL_RCC_OscConfig+0x3b0>
 8000f00:	6a23      	ldr	r3, [r4, #32]
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6223      	str	r3, [r4, #32]
 8000f08:	6a23      	ldr	r3, [r4, #32]
 8000f0a:	f023 0304 	bic.w	r3, r3, #4
 8000f0e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f10:	f7ff f984 	bl	800021c <HAL_GetTick>
 8000f14:	2702      	movs	r7, #2
 8000f16:	4682      	mov	sl, r0
 8000f18:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1a:	f04f 0801 	mov.w	r8, #1
 8000f1e:	fa97 f3a7 	rbit	r3, r7
 8000f22:	fa97 f3a7 	rbit	r3, r7
 8000f26:	b373      	cbz	r3, 8000f86 <HAL_RCC_OscConfig+0x3e6>
 8000f28:	6a22      	ldr	r2, [r4, #32]
 8000f2a:	fa99 f3a9 	rbit	r3, r9
 8000f2e:	fab3 f383 	clz	r3, r3
 8000f32:	f003 031f 	and.w	r3, r3, #31
 8000f36:	fa08 f303 	lsl.w	r3, r8, r3
 8000f3a:	4213      	tst	r3, r2
 8000f3c:	d0bd      	beq.n	8000eba <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff f96d 	bl	800021c <HAL_GetTick>
 8000f42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f46:	eba0 000a 	sub.w	r0, r0, sl
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d9e7      	bls.n	8000f1e <HAL_RCC_OscConfig+0x37e>
 8000f4e:	e68a      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	6a23      	ldr	r3, [r4, #32]
 8000f54:	d103      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3be>
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6223      	str	r3, [r4, #32]
 8000f5c:	e791      	b.n	8000e82 <HAL_RCC_OscConfig+0x2e2>
 8000f5e:	f023 0301 	bic.w	r3, r3, #1
 8000f62:	6223      	str	r3, [r4, #32]
 8000f64:	6a23      	ldr	r3, [r4, #32]
 8000f66:	f023 0304 	bic.w	r3, r3, #4
 8000f6a:	e78d      	b.n	8000e88 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f6c:	f7ff f956 	bl	800021c <HAL_GetTick>
 8000f70:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f74:	eba0 000a 	sub.w	r0, r0, sl
 8000f78:	4298      	cmp	r0, r3
 8000f7a:	d98d      	bls.n	8000e98 <HAL_RCC_OscConfig+0x2f8>
 8000f7c:	e673      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
 8000f7e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f84:	e78f      	b.n	8000ea6 <HAL_RCC_OscConfig+0x306>
 8000f86:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f8c:	e7cd      	b.n	8000f2a <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f8e:	4c44      	ldr	r4, [pc, #272]	; (80010a0 <HAL_RCC_OscConfig+0x500>)
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	f43f ae06 	beq.w	8000ba8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9c:	2a02      	cmp	r2, #2
 8000f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa2:	d158      	bne.n	8001056 <HAL_RCC_OscConfig+0x4b6>
 8000fa4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000fa8:	fab3 f383 	clz	r3, r3
 8000fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fba:	f7ff f92f 	bl	800021c <HAL_GetTick>
 8000fbe:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000fc2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc4:	2601      	movs	r6, #1
 8000fc6:	fa97 f3a7 	rbit	r3, r7
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	fa97 f3a7 	rbit	r3, r7
 8000fd0:	fab3 f383 	clz	r3, r3
 8000fd4:	f003 031f 	and.w	r3, r3, #31
 8000fd8:	fa06 f303 	lsl.w	r3, r6, r3
 8000fdc:	4213      	tst	r3, r2
 8000fde:	d133      	bne.n	8001048 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fe2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000fe4:	f023 030f 	bic.w	r3, r3, #15
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fec:	6862      	ldr	r2, [r4, #4]
 8000fee:	6a2b      	ldr	r3, [r5, #32]
 8000ff0:	69e9      	ldr	r1, [r5, #28]
 8000ff2:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000ff6:	430b      	orrs	r3, r1
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	6063      	str	r3, [r4, #4]
 8000ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001000:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001004:	fab3 f383 	clz	r3, r3
 8001008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800100c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001016:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001018:	f7ff f900 	bl	800021c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800101e:	4607      	mov	r7, r0
 8001020:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001024:	6822      	ldr	r2, [r4, #0]
 8001026:	fa95 f3a5 	rbit	r3, r5
 800102a:	fab3 f383 	clz	r3, r3
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	fa06 f303 	lsl.w	r3, r6, r3
 8001036:	4213      	tst	r3, r2
 8001038:	f47f adcd 	bne.w	8000bd6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103c:	f7ff f8ee 	bl	800021c <HAL_GetTick>
 8001040:	1bc0      	subs	r0, r0, r7
 8001042:	2802      	cmp	r0, #2
 8001044:	d9ec      	bls.n	8001020 <HAL_RCC_OscConfig+0x480>
 8001046:	e60e      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff f8e8 	bl	800021c <HAL_GetTick>
 800104c:	eba0 0008 	sub.w	r0, r0, r8
 8001050:	2802      	cmp	r0, #2
 8001052:	d9b8      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x426>
 8001054:	e607      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
 8001056:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800106c:	f7ff f8d6 	bl	800021c <HAL_GetTick>
 8001070:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001074:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001076:	2601      	movs	r6, #1
 8001078:	fa95 f3a5 	rbit	r3, r5
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	fa95 f3a5 	rbit	r3, r5
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	f003 031f 	and.w	r3, r3, #31
 800108a:	fa06 f303 	lsl.w	r3, r6, r3
 800108e:	4213      	tst	r3, r2
 8001090:	f43f ada1 	beq.w	8000bd6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001094:	f7ff f8c2 	bl	800021c <HAL_GetTick>
 8001098:	1bc0      	subs	r0, r0, r7
 800109a:	2802      	cmp	r0, #2
 800109c:	d9ec      	bls.n	8001078 <HAL_RCC_OscConfig+0x4d8>
 800109e:	e5e2      	b.n	8000c66 <HAL_RCC_OscConfig+0xc6>
 80010a0:	40021000 	.word	0x40021000

080010a4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80010a4:	4911      	ldr	r1, [pc, #68]	; (80010ec <HAL_RCC_GetSysClockFreq+0x48>)
 80010a6:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010a8:	f003 020c 	and.w	r2, r3, #12
 80010ac:	2a08      	cmp	r2, #8
 80010ae:	d11a      	bne.n	80010e6 <HAL_RCC_GetSysClockFreq+0x42>
 80010b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80010b4:	fa92 f2a2 	rbit	r2, r2
 80010b8:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80010ba:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80010be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80010c0:	fa90 f0a0 	rbit	r0, r0
 80010c4:	fab0 f080 	clz	r0, r0
 80010c8:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80010cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010d0:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80010d2:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x50>)
 80010d8:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x54>)
 80010dc:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80010e0:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80010e2:	4348      	muls	r0, r1
 80010e4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	08002f08 	.word	0x08002f08
 80010f4:	08002f18 	.word	0x08002f18
 80010f8:	007a1200 	.word	0x007a1200

080010fc <HAL_RCC_ClockConfig>:
{
 80010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001100:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001102:	4604      	mov	r4, r0
 8001104:	b910      	cbnz	r0, 800110c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001106:	2001      	movs	r0, #1
 8001108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_RCC_ClockConfig+0x144>)
 800110e:	6813      	ldr	r3, [r2, #0]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	428b      	cmp	r3, r1
 8001116:	d32e      	bcc.n	8001176 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001118:	6822      	ldr	r2, [r4, #0]
 800111a:	0791      	lsls	r1, r2, #30
 800111c:	d436      	bmi.n	800118c <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111e:	07d2      	lsls	r2, r2, #31
 8001120:	d43c      	bmi.n	800119c <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001122:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_RCC_ClockConfig+0x144>)
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	429d      	cmp	r5, r3
 800112c:	d375      	bcc.n	800121a <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	4d44      	ldr	r5, [pc, #272]	; (8001244 <HAL_RCC_ClockConfig+0x148>)
 8001132:	f012 0f04 	tst.w	r2, #4
 8001136:	d17c      	bne.n	8001232 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	0713      	lsls	r3, r2, #28
 800113a:	d506      	bpl.n	800114a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800113c:	686b      	ldr	r3, [r5, #4]
 800113e:	6922      	ldr	r2, [r4, #16]
 8001140:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001144:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001148:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800114a:	f7ff ffab 	bl	80010a4 <HAL_RCC_GetSysClockFreq>
 800114e:	686b      	ldr	r3, [r5, #4]
 8001150:	22f0      	movs	r2, #240	; 0xf0
 8001152:	fa92 f2a2 	rbit	r2, r2
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800115e:	40d3      	lsrs	r3, r2
 8001160:	4a39      	ldr	r2, [pc, #228]	; (8001248 <HAL_RCC_ClockConfig+0x14c>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
 8001164:	40d8      	lsrs	r0, r3
 8001166:	4b39      	ldr	r3, [pc, #228]	; (800124c <HAL_RCC_ClockConfig+0x150>)
 8001168:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800116a:	2000      	movs	r0, #0
 800116c:	f001 fda8 	bl	8002cc0 <HAL_InitTick>
  return HAL_OK;
 8001170:	2000      	movs	r0, #0
 8001172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	6813      	ldr	r3, [r2, #0]
 8001178:	f023 0307 	bic.w	r3, r3, #7
 800117c:	430b      	orrs	r3, r1
 800117e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001180:	6813      	ldr	r3, [r2, #0]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	4299      	cmp	r1, r3
 8001188:	d1bd      	bne.n	8001106 <HAL_RCC_ClockConfig+0xa>
 800118a:	e7c5      	b.n	8001118 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	492d      	ldr	r1, [pc, #180]	; (8001244 <HAL_RCC_ClockConfig+0x148>)
 800118e:	68a0      	ldr	r0, [r4, #8]
 8001190:	684b      	ldr	r3, [r1, #4]
 8001192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001196:	4303      	orrs	r3, r0
 8001198:	604b      	str	r3, [r1, #4]
 800119a:	e7c0      	b.n	800111e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119c:	6862      	ldr	r2, [r4, #4]
 800119e:	4e29      	ldr	r6, [pc, #164]	; (8001244 <HAL_RCC_ClockConfig+0x148>)
 80011a0:	2a01      	cmp	r2, #1
 80011a2:	d127      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xf8>
 80011a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ac:	6831      	ldr	r1, [r6, #0]
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	d0a1      	beq.n	8001106 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c2:	6873      	ldr	r3, [r6, #4]
 80011c4:	f023 0303 	bic.w	r3, r3, #3
 80011c8:	431a      	orrs	r2, r3
 80011ca:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80011cc:	f7ff f826 	bl	800021c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80011d4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	6873      	ldr	r3, [r6, #4]
 80011d8:	6862      	ldr	r2, [r4, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80011e2:	d09e      	beq.n	8001122 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e4:	f7ff f81a 	bl	800021c <HAL_GetTick>
 80011e8:	1bc0      	subs	r0, r0, r7
 80011ea:	4540      	cmp	r0, r8
 80011ec:	d9f3      	bls.n	80011d6 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80011ee:	2003      	movs	r0, #3
}
 80011f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f4:	2a02      	cmp	r2, #2
 80011f6:	bf0c      	ite	eq
 80011f8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80011fc:	2302      	movne	r3, #2
 80011fe:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	6830      	ldr	r0, [r6, #0]
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	4203      	tst	r3, r0
 8001218:	e7d2      	b.n	80011c0 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	6813      	ldr	r3, [r2, #0]
 800121c:	f023 0307 	bic.w	r3, r3, #7
 8001220:	432b      	orrs	r3, r5
 8001222:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	429d      	cmp	r5, r3
 800122c:	f47f af6b 	bne.w	8001106 <HAL_RCC_ClockConfig+0xa>
 8001230:	e77d      	b.n	800112e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001232:	686b      	ldr	r3, [r5, #4]
 8001234:	68e1      	ldr	r1, [r4, #12]
 8001236:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800123a:	430b      	orrs	r3, r1
 800123c:	606b      	str	r3, [r5, #4]
 800123e:	e77b      	b.n	8001138 <HAL_RCC_ClockConfig+0x3c>
 8001240:	40022000 	.word	0x40022000
 8001244:	40021000 	.word	0x40021000
 8001248:	08002f7f 	.word	0x08002f7f
 800124c:	2000000c 	.word	0x2000000c

08001250 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001252:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	fa92 f2a2 	rbit	r2, r2
 800125c:	fab2 f282 	clz	r2, r2
 8001260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001264:	40d3      	lsrs	r3, r2
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800126c:	6810      	ldr	r0, [r2, #0]
}    
 800126e:	40d8      	lsrs	r0, r3
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	08002f8f 	.word	0x08002f8f
 800127c:	2000000c 	.word	0x2000000c

08001280 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001282:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	fa92 f2a2 	rbit	r2, r2
 800128c:	fab2 f282 	clz	r2, r2
 8001290:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001294:	40d3      	lsrs	r3, r2
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001298:	5cd3      	ldrb	r3, [r2, r3]
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x2c>)
 800129c:	6810      	ldr	r0, [r2, #0]
} 
 800129e:	40d8      	lsrs	r0, r3
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08002f8f 	.word	0x08002f8f
 80012ac:	2000000c 	.word	0x2000000c

080012b0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012b0:	230f      	movs	r3, #15
 80012b2:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_RCC_GetClockConfig+0x34>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80012c4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80012cc:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012d6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_RCC_GetClockConfig+0x38>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	600b      	str	r3, [r1, #0]
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012ec:	6803      	ldr	r3, [r0, #0]
{
 80012ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012f2:	03df      	lsls	r7, r3, #15
{
 80012f4:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012f6:	d523      	bpl.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f8:	4d9b      	ldr	r5, [pc, #620]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80012fa:	69eb      	ldr	r3, [r5, #28]
 80012fc:	00de      	lsls	r6, r3, #3
 80012fe:	f100 80d7 	bmi.w	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	69eb      	ldr	r3, [r5, #28]
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	61eb      	str	r3, [r5, #28]
 800130a:	69eb      	ldr	r3, [r5, #28]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001314:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001316:	4f95      	ldr	r7, [pc, #596]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	05d8      	lsls	r0, r3, #23
 800131c:	f140 80ca 	bpl.w	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001320:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001322:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001326:	f040 80da 	bne.w	80014de <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800132a:	6a2b      	ldr	r3, [r5, #32]
 800132c:	6862      	ldr	r2, [r4, #4]
 800132e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001332:	4313      	orrs	r3, r2
 8001334:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001336:	b11e      	cbz	r6, 8001340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001338:	69eb      	ldr	r3, [r5, #28]
 800133a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133e:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	07c3      	lsls	r3, r0, #31
 8001344:	d506      	bpl.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001346:	4a88      	ldr	r2, [pc, #544]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001348:	68a1      	ldr	r1, [r4, #8]
 800134a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800134c:	f023 0303 	bic.w	r3, r3, #3
 8001350:	430b      	orrs	r3, r1
 8001352:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001354:	0787      	lsls	r7, r0, #30
 8001356:	d506      	bpl.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001358:	4a83      	ldr	r2, [pc, #524]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800135a:	68e1      	ldr	r1, [r4, #12]
 800135c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800135e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001362:	430b      	orrs	r3, r1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001366:	0746      	lsls	r6, r0, #29
 8001368:	d506      	bpl.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800136a:	4a7f      	ldr	r2, [pc, #508]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800136c:	6921      	ldr	r1, [r4, #16]
 800136e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001370:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001374:	430b      	orrs	r3, r1
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001378:	0685      	lsls	r5, r0, #26
 800137a:	d506      	bpl.n	800138a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800137c:	4a7a      	ldr	r2, [pc, #488]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800137e:	69e1      	ldr	r1, [r4, #28]
 8001380:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001382:	f023 0310 	bic.w	r3, r3, #16
 8001386:	430b      	orrs	r3, r1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800138a:	0381      	lsls	r1, r0, #14
 800138c:	d506      	bpl.n	800139c <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800138e:	4a76      	ldr	r2, [pc, #472]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001390:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001392:	6853      	ldr	r3, [r2, #4]
 8001394:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001398:	430b      	orrs	r3, r1
 800139a:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800139c:	0642      	lsls	r2, r0, #25
 800139e:	d506      	bpl.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80013a0:	4a71      	ldr	r2, [pc, #452]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013a2:	6a21      	ldr	r1, [r4, #32]
 80013a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013a6:	f023 0320 	bic.w	r3, r3, #32
 80013aa:	430b      	orrs	r3, r1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013ae:	0343      	lsls	r3, r0, #13
 80013b0:	d506      	bpl.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013b2:	4a6d      	ldr	r2, [pc, #436]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80013b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013bc:	430b      	orrs	r3, r1
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80013c0:	0707      	lsls	r7, r0, #28
 80013c2:	d506      	bpl.n	80013d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80013c4:	4a68      	ldr	r2, [pc, #416]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013c6:	6961      	ldr	r1, [r4, #20]
 80013c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013ca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80013d2:	06c6      	lsls	r6, r0, #27
 80013d4:	d506      	bpl.n	80013e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80013d6:	4a64      	ldr	r2, [pc, #400]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013d8:	69a1      	ldr	r1, [r4, #24]
 80013da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80013e4:	0585      	lsls	r5, r0, #22
 80013e6:	d506      	bpl.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80013e8:	4a5f      	ldr	r2, [pc, #380]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80013ec:	6853      	ldr	r3, [r2, #4]
 80013ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f2:	430b      	orrs	r3, r1
 80013f4:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80013f6:	0601      	lsls	r1, r0, #24
 80013f8:	d506      	bpl.n	8001408 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80013fa:	4a5b      	ldr	r2, [pc, #364]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80013fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001400:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001404:	430b      	orrs	r3, r1
 8001406:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001408:	05c2      	lsls	r2, r0, #23
 800140a:	d506      	bpl.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800140c:	4a56      	ldr	r2, [pc, #344]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800140e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001410:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001412:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001416:	430b      	orrs	r3, r1
 8001418:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800141a:	04c3      	lsls	r3, r0, #19
 800141c:	d506      	bpl.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800141e:	4a52      	ldr	r2, [pc, #328]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001422:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001428:	430b      	orrs	r3, r1
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800142c:	0487      	lsls	r7, r0, #18
 800142e:	d506      	bpl.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001430:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001432:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001434:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001436:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800143a:	430b      	orrs	r3, r1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800143e:	02c6      	lsls	r6, r0, #11
 8001440:	d506      	bpl.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001442:	4a49      	ldr	r2, [pc, #292]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001444:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001446:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800144c:	430b      	orrs	r3, r1
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001450:	0285      	lsls	r5, r0, #10
 8001452:	d506      	bpl.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001454:	4a44      	ldr	r2, [pc, #272]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001456:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001458:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800145a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800145e:	430b      	orrs	r3, r1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001462:	0241      	lsls	r1, r0, #9
 8001464:	d506      	bpl.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001466:	4a40      	ldr	r2, [pc, #256]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001468:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800146a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800146c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001470:	430b      	orrs	r3, r1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001474:	0202      	lsls	r2, r0, #8
 8001476:	d506      	bpl.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001478:	4a3b      	ldr	r2, [pc, #236]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800147a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800147c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800147e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001482:	430b      	orrs	r3, r1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001486:	01c3      	lsls	r3, r0, #7
 8001488:	d506      	bpl.n	8001498 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800148c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800148e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001494:	430b      	orrs	r3, r1
 8001496:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001498:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800149c:	d01c      	beq.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800149e:	4a32      	ldr	r2, [pc, #200]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80014a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80014a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80014a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80014ac:	2000      	movs	r0, #0
 80014ae:	e013      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	2600      	movs	r6, #0
 80014b2:	e730      	b.n	8001316 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80014bc:	f7fe feae 	bl	800021c <HAL_GetTick>
 80014c0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	05d9      	lsls	r1, r3, #23
 80014c6:	f53f af2b 	bmi.w	8001320 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7fe fea7 	bl	800021c <HAL_GetTick>
 80014ce:	eba0 0008 	sub.w	r0, r0, r8
 80014d2:	2864      	cmp	r0, #100	; 0x64
 80014d4:	d9f5      	bls.n	80014c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80014d6:	2003      	movs	r0, #3
}
 80014d8:	b002      	add	sp, #8
 80014da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014de:	6862      	ldr	r2, [r4, #4]
 80014e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80014e4:	4293      	cmp	r3, r2
 80014e6:	f43f af20 	beq.w	800132a <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014ea:	6a29      	ldr	r1, [r5, #32]
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80014f4:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80014f8:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001570 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80014fc:	fab2 f282 	clz	r2, r2
 8001500:	4472      	add	r2, lr
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	2701      	movs	r7, #1
 8001506:	6017      	str	r7, [r2, #0]
 8001508:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	4473      	add	r3, lr
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001518:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800151a:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800151c:	f57f af05 	bpl.w	800132a <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001520:	f7fe fe7c 	bl	800021c <HAL_GetTick>
 8001524:	f04f 0802 	mov.w	r8, #2
 8001528:	4682      	mov	sl, r0
 800152a:	46c1      	mov	r9, r8
 800152c:	fa98 f3a8 	rbit	r3, r8
 8001530:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001534:	b1a3      	cbz	r3, 8001560 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8001536:	6a2a      	ldr	r2, [r5, #32]
 8001538:	fa99 f3a9 	rbit	r3, r9
 800153c:	fab3 f383 	clz	r3, r3
 8001540:	f003 031f 	and.w	r3, r3, #31
 8001544:	fa07 f303 	lsl.w	r3, r7, r3
 8001548:	4213      	tst	r3, r2
 800154a:	f47f aeee 	bne.w	800132a <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7fe fe65 	bl	800021c <HAL_GetTick>
 8001552:	f241 3388 	movw	r3, #5000	; 0x1388
 8001556:	eba0 000a 	sub.w	r0, r0, sl
 800155a:	4298      	cmp	r0, r3
 800155c:	d9e6      	bls.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x240>
 800155e:	e7ba      	b.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001560:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001566:	e7e7      	b.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8001568:	40021000 	.word	0x40021000
 800156c:	40007000 	.word	0x40007000
 8001570:	10908100 	.word	0x10908100

08001574 <HAL_TIM_Base_MspInit>:
 8001574:	4770      	bx	lr

08001576 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001576:	6803      	ldr	r3, [r0, #0]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001588:	2000      	movs	r0, #0
 800158a:	4770      	bx	lr

0800158c <HAL_TIM_OC_DelayElapsedCallback>:
 800158c:	4770      	bx	lr

0800158e <HAL_TIM_IC_CaptureCallback>:
 800158e:	4770      	bx	lr

08001590 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001590:	4770      	bx	lr

08001592 <HAL_TIM_TriggerCallback>:
 8001592:	4770      	bx	lr

08001594 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001594:	6803      	ldr	r3, [r0, #0]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	0791      	lsls	r1, r2, #30
{
 800159a:	b510      	push	{r4, lr}
 800159c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800159e:	d50f      	bpl.n	80015c0 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	0792      	lsls	r2, r2, #30
 80015a4:	d50c      	bpl.n	80015c0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015a6:	f06f 0202 	mvn.w	r2, #2
 80015aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015ac:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015ae:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b0:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015b2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b4:	f000 8085 	beq.w	80016c2 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80015b8:	f7ff ffe9 	bl	800158e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015bc:	2300      	movs	r3, #0
 80015be:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	0752      	lsls	r2, r2, #29
 80015c6:	d510      	bpl.n	80015ea <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	0750      	lsls	r0, r2, #29
 80015cc:	d50d      	bpl.n	80015ea <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80015ce:	f06f 0204 	mvn.w	r2, #4
 80015d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015d4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015d6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015d8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015dc:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015de:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015e0:	d075      	beq.n	80016ce <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80015e2:	f7ff ffd4 	bl	800158e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015e6:	2300      	movs	r3, #0
 80015e8:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	0711      	lsls	r1, r2, #28
 80015f0:	d50f      	bpl.n	8001612 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	0712      	lsls	r2, r2, #28
 80015f6:	d50c      	bpl.n	8001612 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80015f8:	f06f 0208 	mvn.w	r2, #8
 80015fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015fe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001600:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001602:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001604:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001606:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001608:	d067      	beq.n	80016da <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800160a:	f7ff ffc0 	bl	800158e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160e:	2300      	movs	r3, #0
 8001610:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	06d0      	lsls	r0, r2, #27
 8001618:	d510      	bpl.n	800163c <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	06d1      	lsls	r1, r2, #27
 800161e:	d50d      	bpl.n	800163c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001620:	f06f 0210 	mvn.w	r2, #16
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001626:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001628:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800162a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800162e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001630:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001632:	d058      	beq.n	80016e6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001634:	f7ff ffab 	bl	800158e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001638:	2300      	movs	r3, #0
 800163a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	07d2      	lsls	r2, r2, #31
 8001642:	d508      	bpl.n	8001656 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	07d0      	lsls	r0, r2, #31
 8001648:	d505      	bpl.n	8001656 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800164a:	f06f 0201 	mvn.w	r2, #1
 800164e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001650:	4620      	mov	r0, r4
 8001652:	f001 fa53 	bl	8002afc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	0611      	lsls	r1, r2, #24
 800165c:	d508      	bpl.n	8001670 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	0612      	lsls	r2, r2, #24
 8001662:	d505      	bpl.n	8001670 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001668:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800166a:	4620      	mov	r0, r4
 800166c:	f000 f8c7 	bl	80017fe <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	05d0      	lsls	r0, r2, #23
 8001676:	d508      	bpl.n	800168a <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	0611      	lsls	r1, r2, #24
 800167c:	d505      	bpl.n	800168a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800167e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001682:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001684:	4620      	mov	r0, r4
 8001686:	f000 f8bb 	bl	8001800 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	0652      	lsls	r2, r2, #25
 8001690:	d508      	bpl.n	80016a4 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	0650      	lsls	r0, r2, #25
 8001696:	d505      	bpl.n	80016a4 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800169c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800169e:	4620      	mov	r0, r4
 80016a0:	f7ff ff77 	bl	8001592 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	0691      	lsls	r1, r2, #26
 80016aa:	d522      	bpl.n	80016f2 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	0692      	lsls	r2, r2, #26
 80016b0:	d51f      	bpl.n	80016f2 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80016b2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80016b8:	611a      	str	r2, [r3, #16]
    }
  }
}
 80016ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80016be:	f000 b89d 	b.w	80017fc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	f7ff ff63 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff ff62 	bl	8001590 <HAL_TIM_PWM_PulseFinishedCallback>
 80016cc:	e776      	b.n	80015bc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	f7ff ff5d 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ff5c 	bl	8001590 <HAL_TIM_PWM_PulseFinishedCallback>
 80016d8:	e785      	b.n	80015e6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016da:	f7ff ff57 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff ff56 	bl	8001590 <HAL_TIM_PWM_PulseFinishedCallback>
 80016e4:	e793      	b.n	800160e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e6:	f7ff ff51 	bl	800158c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ea:	4620      	mov	r0, r4
 80016ec:	f7ff ff50 	bl	8001590 <HAL_TIM_PWM_PulseFinishedCallback>
 80016f0:	e7a2      	b.n	8001638 <HAL_TIM_IRQHandler+0xa4>
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f4:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80016f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f8:	4290      	cmp	r0, r2
 80016fa:	d012      	beq.n	8001722 <TIM_Base_SetConfig+0x2e>
 80016fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001700:	d00f      	beq.n	8001722 <TIM_Base_SetConfig+0x2e>
 8001702:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001706:	4290      	cmp	r0, r2
 8001708:	d00b      	beq.n	8001722 <TIM_Base_SetConfig+0x2e>
 800170a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170e:	4290      	cmp	r0, r2
 8001710:	d007      	beq.n	8001722 <TIM_Base_SetConfig+0x2e>
 8001712:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001716:	4290      	cmp	r0, r2
 8001718:	d003      	beq.n	8001722 <TIM_Base_SetConfig+0x2e>
 800171a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800171e:	4290      	cmp	r0, r2
 8001720:	d115      	bne.n	800174e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001722:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001728:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <TIM_Base_SetConfig+0xcc>)
 800172c:	4290      	cmp	r0, r2
 800172e:	d01d      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 8001730:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001734:	d01a      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 8001736:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800173a:	4290      	cmp	r0, r2
 800173c:	d016      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 800173e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001742:	4290      	cmp	r0, r2
 8001744:	d012      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 8001746:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800174a:	4290      	cmp	r0, r2
 800174c:	d00e      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 800174e:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <TIM_Base_SetConfig+0xd0>)
 8001750:	4290      	cmp	r0, r2
 8001752:	d00b      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 8001754:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001758:	4290      	cmp	r0, r2
 800175a:	d007      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 800175c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001760:	4290      	cmp	r0, r2
 8001762:	d003      	beq.n	800176c <TIM_Base_SetConfig+0x78>
 8001764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001768:	4290      	cmp	r0, r2
 800176a:	d103      	bne.n	8001774 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800176c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800176e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001772:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001774:	694a      	ldr	r2, [r1, #20]
 8001776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800177a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800177c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800177e:	688b      	ldr	r3, [r1, #8]
 8001780:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001782:	680b      	ldr	r3, [r1, #0]
 8001784:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <TIM_Base_SetConfig+0xcc>)
 8001788:	4298      	cmp	r0, r3
 800178a:	d013      	beq.n	80017b4 <TIM_Base_SetConfig+0xc0>
 800178c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001790:	4298      	cmp	r0, r3
 8001792:	d00f      	beq.n	80017b4 <TIM_Base_SetConfig+0xc0>
 8001794:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001798:	4298      	cmp	r0, r3
 800179a:	d00b      	beq.n	80017b4 <TIM_Base_SetConfig+0xc0>
 800179c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a0:	4298      	cmp	r0, r3
 80017a2:	d007      	beq.n	80017b4 <TIM_Base_SetConfig+0xc0>
 80017a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a8:	4298      	cmp	r0, r3
 80017aa:	d003      	beq.n	80017b4 <TIM_Base_SetConfig+0xc0>
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	4298      	cmp	r0, r3
 80017b2:	d101      	bne.n	80017b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017b4:	690b      	ldr	r3, [r1, #16]
 80017b6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80017b8:	2301      	movs	r3, #1
 80017ba:	6143      	str	r3, [r0, #20]
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40014000 	.word	0x40014000

080017c8 <HAL_TIM_Base_Init>:
{ 
 80017c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80017ca:	4604      	mov	r4, r0
 80017cc:	b1a0      	cbz	r0, 80017f8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80017ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017d6:	b91b      	cbnz	r3, 80017e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017dc:	f7ff feca 	bl	8001574 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80017e0:	2302      	movs	r3, #2
 80017e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	1d21      	adds	r1, r4, #4
 80017ea:	f7ff ff83 	bl	80016f4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017f4:	2000      	movs	r0, #0
 80017f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017f8:	2001      	movs	r0, #1
}
 80017fa:	bd10      	pop	{r4, pc}

080017fc <HAL_TIMEx_CommutationCallback>:
 80017fc:	4770      	bx	lr

080017fe <HAL_TIMEx_BreakCallback>:
 80017fe:	4770      	bx	lr

08001800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001800:	4770      	bx	lr
	...

08001804 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001808:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800180a:	6921      	ldr	r1, [r4, #16]
 800180c:	68a2      	ldr	r2, [r4, #8]
 800180e:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001810:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001812:	430a      	orrs	r2, r1
 8001814:	6961      	ldr	r1, [r4, #20]
 8001816:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001818:	4977      	ldr	r1, [pc, #476]	; (80019f8 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800181a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800181c:	4001      	ands	r1, r0
 800181e:	430a      	orrs	r2, r1
 8001820:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001822:	686a      	ldr	r2, [r5, #4]
 8001824:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001826:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001828:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800182c:	430a      	orrs	r2, r1
 800182e:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001830:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001832:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001834:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001838:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800183a:	430a      	orrs	r2, r1
 800183c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800183e:	4a6f      	ldr	r2, [pc, #444]	; (80019fc <UART_SetConfig+0x1f8>)
 8001840:	4295      	cmp	r5, r2
 8001842:	d112      	bne.n	800186a <UART_SetConfig+0x66>
 8001844:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001848:	496d      	ldr	r1, [pc, #436]	; (8001a00 <UART_SetConfig+0x1fc>)
 800184a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800184c:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001854:	5c8a      	ldrb	r2, [r1, r2]
 8001856:	d066      	beq.n	8001926 <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001858:	2a08      	cmp	r2, #8
 800185a:	d819      	bhi.n	8001890 <UART_SetConfig+0x8c>
 800185c:	e8df f002 	tbb	[pc, r2]
 8001860:	189e92c2 	.word	0x189e92c2
 8001864:	181818a9 	.word	0x181818a9
 8001868:	ac          	.byte	0xac
 8001869:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800186a:	4a66      	ldr	r2, [pc, #408]	; (8001a04 <UART_SetConfig+0x200>)
 800186c:	4295      	cmp	r5, r2
 800186e:	d124      	bne.n	80018ba <UART_SetConfig+0xb6>
 8001870:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001874:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001876:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800187a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800187e:	f000 80a0 	beq.w	80019c2 <UART_SetConfig+0x1be>
 8001882:	d807      	bhi.n	8001894 <UART_SetConfig+0x90>
 8001884:	2a00      	cmp	r2, #0
 8001886:	f000 80aa 	beq.w	80019de <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800188a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800188e:	d076      	beq.n	800197e <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001890:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001892:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001894:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001898:	f000 8099 	beq.w	80019ce <UART_SetConfig+0x1ca>
 800189c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80018a0:	d1f3      	bne.n	800188a <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018a6:	d179      	bne.n	800199c <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018a8:	6860      	ldr	r0, [r4, #4]
 80018aa:	0843      	lsrs	r3, r0, #1
 80018ac:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80018b0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80018b8:	e054      	b.n	8001964 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018ba:	4a53      	ldr	r2, [pc, #332]	; (8001a08 <UART_SetConfig+0x204>)
 80018bc:	4295      	cmp	r5, r2
 80018be:	d10e      	bne.n	80018de <UART_SetConfig+0xda>
 80018c0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80018c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018c6:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80018ca:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80018ce:	d078      	beq.n	80019c2 <UART_SetConfig+0x1be>
 80018d0:	d9d8      	bls.n	8001884 <UART_SetConfig+0x80>
 80018d2:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80018d6:	d07a      	beq.n	80019ce <UART_SetConfig+0x1ca>
 80018d8:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80018dc:	e7e0      	b.n	80018a0 <UART_SetConfig+0x9c>
 80018de:	4a4b      	ldr	r2, [pc, #300]	; (8001a0c <UART_SetConfig+0x208>)
 80018e0:	4295      	cmp	r5, r2
 80018e2:	d10e      	bne.n	8001902 <UART_SetConfig+0xfe>
 80018e4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80018e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ea:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80018ee:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80018f2:	d066      	beq.n	80019c2 <UART_SetConfig+0x1be>
 80018f4:	d9c6      	bls.n	8001884 <UART_SetConfig+0x80>
 80018f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80018fa:	d068      	beq.n	80019ce <UART_SetConfig+0x1ca>
 80018fc:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001900:	e7ce      	b.n	80018a0 <UART_SetConfig+0x9c>
 8001902:	4a43      	ldr	r2, [pc, #268]	; (8001a10 <UART_SetConfig+0x20c>)
 8001904:	4295      	cmp	r5, r2
 8001906:	d1c0      	bne.n	800188a <UART_SetConfig+0x86>
 8001908:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 800190c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800190e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001912:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001916:	d054      	beq.n	80019c2 <UART_SetConfig+0x1be>
 8001918:	d9b4      	bls.n	8001884 <UART_SetConfig+0x80>
 800191a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800191e:	d056      	beq.n	80019ce <UART_SetConfig+0x1ca>
 8001920:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001924:	e7bc      	b.n	80018a0 <UART_SetConfig+0x9c>
    switch (clocksource)
 8001926:	2a08      	cmp	r2, #8
 8001928:	d829      	bhi.n	800197e <UART_SetConfig+0x17a>
 800192a:	a301      	add	r3, pc, #4	; (adr r3, 8001930 <UART_SetConfig+0x12c>)
 800192c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001930:	08001955 	.word	0x08001955
 8001934:	08001979 	.word	0x08001979
 8001938:	080018a9 	.word	0x080018a9
 800193c:	0800197f 	.word	0x0800197f
 8001940:	080019c9 	.word	0x080019c9
 8001944:	0800197f 	.word	0x0800197f
 8001948:	0800197f 	.word	0x0800197f
 800194c:	0800197f 	.word	0x0800197f
 8001950:	080019d5 	.word	0x080019d5
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001954:	f7ff fc7c 	bl	8001250 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001958:	6861      	ldr	r1, [r4, #4]
 800195a:	084a      	lsrs	r2, r1, #1
 800195c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001960:	fbb3 f3f1 	udiv	r3, r3, r1
 8001964:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001966:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001968:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800196c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800196e:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001972:	4313      	orrs	r3, r2
 8001974:	60cb      	str	r3, [r1, #12]
 8001976:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001978:	f7ff fc82 	bl	8001280 <HAL_RCC_GetPCLK2Freq>
 800197c:	e7ec      	b.n	8001958 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 800197e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001980:	2300      	movs	r3, #0
 8001982:	e7f1      	b.n	8001968 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001984:	f7ff fc7c 	bl	8001280 <HAL_RCC_GetPCLK2Freq>
 8001988:	6863      	ldr	r3, [r4, #4]
 800198a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800198e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <UART_SetConfig+0x1f8>)
 8001994:	b280      	uxth	r0, r0
 8001996:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001998:	2000      	movs	r0, #0
        break;
 800199a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800199c:	6862      	ldr	r2, [r4, #4]
 800199e:	0853      	lsrs	r3, r2, #1
 80019a0:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80019a4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	60eb      	str	r3, [r5, #12]
 80019b0:	e7f2      	b.n	8001998 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019b2:	f7ff fb77 	bl	80010a4 <HAL_RCC_GetSysClockFreq>
 80019b6:	e017      	b.n	80019e8 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019b8:	6862      	ldr	r2, [r4, #4]
 80019ba:	0853      	lsrs	r3, r2, #1
 80019bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019c0:	e7f2      	b.n	80019a8 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c6:	d1f4      	bne.n	80019b2 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019c8:	f7ff fb6c 	bl	80010a4 <HAL_RCC_GetSysClockFreq>
 80019cc:	e7c4      	b.n	8001958 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d2:	d1f1      	bne.n	80019b8 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80019d4:	6860      	ldr	r0, [r4, #4]
 80019d6:	0843      	lsrs	r3, r0, #1
 80019d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80019dc:	e76a      	b.n	80018b4 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019e2:	d0b7      	beq.n	8001954 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019e4:	f7ff fc34 	bl	8001250 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019e8:	6863      	ldr	r3, [r4, #4]
 80019ea:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80019ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80019f2:	b280      	uxth	r0, r0
 80019f4:	60e8      	str	r0, [r5, #12]
 80019f6:	e7cf      	b.n	8001998 <UART_SetConfig+0x194>
 80019f8:	efff69f3 	.word	0xefff69f3
 80019fc:	40013800 	.word	0x40013800
 8001a00:	08002f28 	.word	0x08002f28
 8001a04:	40004400 	.word	0x40004400
 8001a08:	40004800 	.word	0x40004800
 8001a0c:	40004c00 	.word	0x40004c00
 8001a10:	40005000 	.word	0x40005000

08001a14 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a16:	07da      	lsls	r2, r3, #31
{
 8001a18:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a1a:	d506      	bpl.n	8001a2a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a1c:	6801      	ldr	r1, [r0, #0]
 8001a1e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001a20:	684a      	ldr	r2, [r1, #4]
 8001a22:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a26:	4322      	orrs	r2, r4
 8001a28:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a2a:	079c      	lsls	r4, r3, #30
 8001a2c:	d506      	bpl.n	8001a3c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a2e:	6801      	ldr	r1, [r0, #0]
 8001a30:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a32:	684a      	ldr	r2, [r1, #4]
 8001a34:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a38:	4322      	orrs	r2, r4
 8001a3a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a3c:	0759      	lsls	r1, r3, #29
 8001a3e:	d506      	bpl.n	8001a4e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a40:	6801      	ldr	r1, [r0, #0]
 8001a42:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a44:	684a      	ldr	r2, [r1, #4]
 8001a46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a4a:	4322      	orrs	r2, r4
 8001a4c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a4e:	071a      	lsls	r2, r3, #28
 8001a50:	d506      	bpl.n	8001a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a52:	6801      	ldr	r1, [r0, #0]
 8001a54:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a56:	684a      	ldr	r2, [r1, #4]
 8001a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a5c:	4322      	orrs	r2, r4
 8001a5e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a60:	06dc      	lsls	r4, r3, #27
 8001a62:	d506      	bpl.n	8001a72 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a64:	6801      	ldr	r1, [r0, #0]
 8001a66:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a68:	688a      	ldr	r2, [r1, #8]
 8001a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a6e:	4322      	orrs	r2, r4
 8001a70:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a72:	0699      	lsls	r1, r3, #26
 8001a74:	d506      	bpl.n	8001a84 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a76:	6801      	ldr	r1, [r0, #0]
 8001a78:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a7a:	688a      	ldr	r2, [r1, #8]
 8001a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a80:	4322      	orrs	r2, r4
 8001a82:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a84:	065a      	lsls	r2, r3, #25
 8001a86:	d50f      	bpl.n	8001aa8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a88:	6801      	ldr	r1, [r0, #0]
 8001a8a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a8c:	684a      	ldr	r2, [r1, #4]
 8001a8e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001a92:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a94:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a98:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a9a:	d105      	bne.n	8001aa8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a9c:	684a      	ldr	r2, [r1, #4]
 8001a9e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aa0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001aa4:	4322      	orrs	r2, r4
 8001aa6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	d506      	bpl.n	8001aba <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001aac:	6802      	ldr	r2, [r0, #0]
 8001aae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ab0:	6853      	ldr	r3, [r2, #4]
 8001ab2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6053      	str	r3, [r2, #4]
 8001aba:	bd10      	pop	{r4, pc}

08001abc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac0:	9d06      	ldr	r5, [sp, #24]
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	460f      	mov	r7, r1
 8001ac6:	4616      	mov	r6, r2
 8001ac8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aca:	6821      	ldr	r1, [r4, #0]
 8001acc:	69ca      	ldr	r2, [r1, #28]
 8001ace:	ea37 0302 	bics.w	r3, r7, r2
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2201      	moveq	r2, #1
 8001ad6:	2200      	movne	r2, #0
 8001ad8:	42b2      	cmp	r2, r6
 8001ada:	d002      	beq.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001adc:	2000      	movs	r0, #0
}
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001ae2:	1c6b      	adds	r3, r5, #1
 8001ae4:	d0f2      	beq.n	8001acc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ae6:	b99d      	cbnz	r5, 8001b10 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001af0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001afa:	2320      	movs	r3, #32
 8001afc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001b00:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001b04:	2300      	movs	r3, #0
 8001b06:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001b10:	f7fe fb84 	bl	800021c <HAL_GetTick>
 8001b14:	eba0 0008 	sub.w	r0, r0, r8
 8001b18:	4285      	cmp	r5, r0
 8001b1a:	d2d6      	bcs.n	8001aca <UART_WaitOnFlagUntilTimeout+0xe>
 8001b1c:	e7e4      	b.n	8001ae8 <UART_WaitOnFlagUntilTimeout+0x2c>

08001b1e <UART_CheckIdleState>:
{
 8001b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b22:	2600      	movs	r6, #0
 8001b24:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001b26:	f7fe fb79 	bl	800021c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001b30:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b32:	d417      	bmi.n	8001b64 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	075b      	lsls	r3, r3, #29
 8001b3a:	d50a      	bpl.n	8001b52 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	462b      	mov	r3, r5
 8001b46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff ffb6 	bl	8001abc <UART_WaitOnFlagUntilTimeout>
 8001b50:	b9a0      	cbnz	r0, 8001b7c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001b52:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b54:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001b56:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001b5a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001b5e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001b62:	e00c      	b.n	8001b7e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	4632      	mov	r2, r6
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff ffa2 	bl	8001abc <UART_WaitOnFlagUntilTimeout>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d0db      	beq.n	8001b34 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001b7c:	2003      	movs	r0, #3
}
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd70      	pop	{r4, r5, r6, pc}

08001b82 <HAL_UART_Init>:
{
 8001b82:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001b84:	4604      	mov	r4, r0
 8001b86:	b360      	cbz	r0, 8001be2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b88:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001b8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b90:	b91b      	cbnz	r3, 8001b9a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001b92:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001b96:	f001 f863 	bl	8002c60 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001b9a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b9c:	2324      	movs	r3, #36	; 0x24
 8001b9e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001ba2:	6813      	ldr	r3, [r2, #0]
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff fe2a 	bl	8001804 <UART_SetConfig>
 8001bb0:	2801      	cmp	r0, #1
 8001bb2:	d016      	beq.n	8001be2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bb6:	b113      	cbz	r3, 8001bbe <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f7ff ff2b 	bl	8001a14 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001bd6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001bd8:	601a      	str	r2, [r3, #0]
}
 8001bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001bde:	f7ff bf9e 	b.w	8001b1e <UART_CheckIdleState>
}
 8001be2:	2001      	movs	r0, #1
 8001be4:	bd10      	pop	{r4, pc}

08001be6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001be6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001be8:	f000 fbde 	bl	80023a8 <vTaskStartScheduler>
  
  return osOK;
}
 8001bec:	2000      	movs	r0, #0
 8001bee:	bd08      	pop	{r3, pc}

08001bf0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bf0:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bf2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001bf6:	8a02      	ldrh	r2, [r0, #16]
{
 8001bf8:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bfa:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001bfe:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001c00:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001c02:	bf14      	ite	ne
 8001c04:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c06:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c08:	a803      	add	r0, sp, #12
 8001c0a:	9001      	str	r0, [sp, #4]
 8001c0c:	9400      	str	r4, [sp, #0]
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f000 fafa 	bl	8002208 <xTaskCreate>
 8001c14:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001c16:	bf0c      	ite	eq
 8001c18:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001c1a:	2000      	movne	r0, #0
}
 8001c1c:	b005      	add	sp, #20
 8001c1e:	bd30      	pop	{r4, r5, pc}

08001c20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c20:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c22:	2800      	cmp	r0, #0
 8001c24:	bf08      	it	eq
 8001c26:	2001      	moveq	r0, #1
 8001c28:	f000 fd0c 	bl	8002644 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	bd08      	pop	{r3, pc}

08001c30 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c30:	f100 0308 	add.w	r3, r0, #8
 8001c34:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c3a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c3c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c3e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c40:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c42:	6003      	str	r3, [r0, #0]
 8001c44:	4770      	bx	lr

08001c46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	6103      	str	r3, [r0, #16]
 8001c4a:	4770      	bx	lr

08001c4c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c4c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c4e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c58:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001c5a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c5c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001c5e:	3301      	adds	r3, #1
 8001c60:	6003      	str	r3, [r0, #0]
 8001c62:	4770      	bx	lr

08001c64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c64:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c66:	1c53      	adds	r3, r2, #1
{
 8001c68:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001c6a:	d10a      	bne.n	8001c82 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c6c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c72:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c74:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c76:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001c78:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c7a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	6003      	str	r3, [r0, #0]
 8001c80:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c82:	f100 0308 	add.w	r3, r0, #8
 8001c86:	685c      	ldr	r4, [r3, #4]
 8001c88:	6825      	ldr	r5, [r4, #0]
 8001c8a:	42aa      	cmp	r2, r5
 8001c8c:	d3ef      	bcc.n	8001c6e <vListInsert+0xa>
 8001c8e:	4623      	mov	r3, r4
 8001c90:	e7f9      	b.n	8001c86 <vListInsert+0x22>

08001c92 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c96:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c98:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c9a:	6882      	ldr	r2, [r0, #8]
 8001c9c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ca2:	bf08      	it	eq
 8001ca4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	3801      	subs	r0, #1
 8001cae:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001cb0:	4770      	bx	lr
	...

08001cb4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <prvTaskExitError+0x2c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	d008      	beq.n	8001cce <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	e7fe      	b.n	8001ccc <prvTaskExitError+0x18>
 8001cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd2:	f383 8811 	msr	BASEPRI, r3
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	e7fe      	b.n	8001cde <prvTaskExitError+0x2a>
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001ce4:	4806      	ldr	r0, [pc, #24]	; (8001d00 <prvPortStartFirstTask+0x1c>)
 8001ce6:	6800      	ldr	r0, [r0, #0]
 8001ce8:	6800      	ldr	r0, [r0, #0]
 8001cea:	f380 8808 	msr	MSP, r0
 8001cee:	b662      	cpsie	i
 8001cf0:	b661      	cpsie	f
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	df00      	svc	0
 8001cfc:	bf00      	nop
 8001cfe:	0000      	.short	0x0000
 8001d00:	e000ed08 	.word	0xe000ed08

08001d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d14 <vPortEnableVFP+0x10>
 8001d08:	6801      	ldr	r1, [r0, #0]
 8001d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d0e:	6001      	str	r1, [r0, #0]
 8001d10:	4770      	bx	lr
 8001d12:	0000      	.short	0x0000
 8001d14:	e000ed88 	.word	0xe000ed88

08001d18 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d1c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <pxPortInitialiseStack+0x28>)
 8001d22:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d26:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001d2a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d2e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d32:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001d36:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001d3a:	3844      	subs	r0, #68	; 0x44
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	08001cb5 	.word	0x08001cb5
	...

08001d50 <SVC_Handler>:
	__asm volatile (
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <pxCurrentTCBConst2>)
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	6808      	ldr	r0, [r1, #0]
 8001d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d5a:	f380 8809 	msr	PSP, r0
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f380 8811 	msr	BASEPRI, r0
 8001d6a:	4770      	bx	lr
 8001d6c:	f3af 8000 	nop.w

08001d70 <pxCurrentTCBConst2>:
 8001d70:	200018ac 	.word	0x200018ac

08001d74 <vPortEnterCritical>:
 8001d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d78:	f383 8811 	msr	BASEPRI, r3
 8001d7c:	f3bf 8f6f 	isb	sy
 8001d80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <vPortEnterCritical+0x3c>)
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001d8a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001d8c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001d8e:	d10d      	bne.n	8001dac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <vPortEnterCritical+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001d98:	d008      	beq.n	8001dac <vPortEnterCritical+0x38>
 8001d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	e7fe      	b.n	8001daa <vPortEnterCritical+0x36>
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000004 	.word	0x20000004
 8001db4:	e000ed04 	.word	0xe000ed04

08001db8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <vPortExitCritical+0x24>)
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	b943      	cbnz	r3, 8001dd0 <vPortExitCritical+0x18>
 8001dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	e7fe      	b.n	8001dce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001dd4:	b90b      	cbnz	r3, 8001dda <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	4770      	bx	lr
 8001ddc:	20000004 	.word	0x20000004

08001de0 <PendSV_Handler>:
	__asm volatile
 8001de0:	f3ef 8009 	mrs	r0, PSP
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <pxCurrentTCBConst>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	f01e 0f10 	tst.w	lr, #16
 8001df0:	bf08      	it	eq
 8001df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dfa:	6010      	str	r0, [r2, #0]
 8001dfc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e04:	f380 8811 	msr	BASEPRI, r0
 8001e08:	f3bf 8f4f 	dsb	sy
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f000 fc76 	bl	8002700 <vTaskSwitchContext>
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f380 8811 	msr	BASEPRI, r0
 8001e1c:	bc08      	pop	{r3}
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	6808      	ldr	r0, [r1, #0]
 8001e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e26:	f01e 0f10 	tst.w	lr, #16
 8001e2a:	bf08      	it	eq
 8001e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e30:	f380 8809 	msr	PSP, r0
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w

08001e40 <pxCurrentTCBConst>:
 8001e40:	200018ac 	.word	0x200018ac

08001e44 <SysTick_Handler>:
{
 8001e44:	b508      	push	{r3, lr}
	__asm volatile
 8001e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4a:	f383 8811 	msr	BASEPRI, r3
 8001e4e:	f3bf 8f6f 	isb	sy
 8001e52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001e56:	f000 faeb 	bl	8002430 <xTaskIncrementTick>
 8001e5a:	b118      	cbz	r0, 8001e64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <SysTick_Handler+0x28>)
 8001e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e62:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001e64:	2300      	movs	r3, #0
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	bd08      	pop	{r3, pc}
 8001e6c:	e000ed04 	.word	0xe000ed04

08001e70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <vPortSetupTimerInterrupt+0x1c>)
 8001e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <vPortSetupTimerInterrupt+0x20>)
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <vPortSetupTimerInterrupt+0x24>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	e000e014 	.word	0xe000e014
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <xPortStartScheduler+0xc8>)
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <xPortStartScheduler+0xcc>)
{
 8001e9c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	4291      	cmp	r1, r2
 8001ea2:	d108      	bne.n	8001eb6 <xPortStartScheduler+0x1e>
	__asm volatile
 8001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ea8:	f383 8811 	msr	BASEPRI, r3
 8001eac:	f3bf 8f6f 	isb	sy
 8001eb0:	f3bf 8f4f 	dsb	sy
 8001eb4:	e7fe      	b.n	8001eb4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <xPortStartScheduler+0xd0>)
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d108      	bne.n	8001ed0 <xPortStartScheduler+0x38>
 8001ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec2:	f383 8811 	msr	BASEPRI, r3
 8001ec6:	f3bf 8f6f 	isb	sy
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	e7fe      	b.n	8001ece <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <xPortStartScheduler+0xd4>)
 8001ed2:	781a      	ldrb	r2, [r3, #0]
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ed8:	22ff      	movs	r2, #255	; 0xff
 8001eda:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001edc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ede:	4a24      	ldr	r2, [pc, #144]	; (8001f70 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ee6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001eea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ef0:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <xPortStartScheduler+0xdc>)
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001efc:	0600      	lsls	r0, r0, #24
 8001efe:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8001f02:	d423      	bmi.n	8001f4c <xPortStartScheduler+0xb4>
 8001f04:	b101      	cbz	r1, 8001f08 <xPortStartScheduler+0x70>
 8001f06:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f0c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001f10:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <xPortStartScheduler+0xd4>)
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <xPortStartScheduler+0xe0>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f22:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001f2a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001f2c:	f7ff ffa0 	bl	8001e70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001f30:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <xPortStartScheduler+0xe4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001f36:	f7ff fee5 	bl	8001d04 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001f3a:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <xPortStartScheduler+0xe8>)
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001f42:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001f44:	f7ff fece 	bl	8001ce4 <prvPortStartFirstTask>
	prvTaskExitError();
 8001f48:	f7ff feb4 	bl	8001cb4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001f50:	0052      	lsls	r2, r2, #1
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	f88d 2003 	strb.w	r2, [sp, #3]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	4622      	mov	r2, r4
 8001f5c:	e7cc      	b.n	8001ef8 <xPortStartScheduler+0x60>
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00
 8001f64:	410fc271 	.word	0x410fc271
 8001f68:	410fc270 	.word	0x410fc270
 8001f6c:	e000e400 	.word	0xe000e400
 8001f70:	2000002c 	.word	0x2000002c
 8001f74:	20000030 	.word	0x20000030
 8001f78:	e000ed20 	.word	0xe000ed20
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	e000ef34 	.word	0xe000ef34

08001f84 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001f84:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <prvInsertBlockIntoFreeList+0x40>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4282      	cmp	r2, r0
 8001f8c:	d318      	bcc.n	8001fc0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f8e:	685c      	ldr	r4, [r3, #4]
 8001f90:	1919      	adds	r1, r3, r4
 8001f92:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f94:	bf01      	itttt	eq
 8001f96:	6841      	ldreq	r1, [r0, #4]
 8001f98:	4618      	moveq	r0, r3
 8001f9a:	1909      	addeq	r1, r1, r4
 8001f9c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f9e:	6844      	ldr	r4, [r0, #4]
 8001fa0:	1901      	adds	r1, r0, r4
 8001fa2:	428a      	cmp	r2, r1
 8001fa4:	d107      	bne.n	8001fb6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001fa6:	4908      	ldr	r1, [pc, #32]	; (8001fc8 <prvInsertBlockIntoFreeList+0x44>)
 8001fa8:	6809      	ldr	r1, [r1, #0]
 8001faa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001fac:	bf1f      	itttt	ne
 8001fae:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001fb0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001fb2:	1909      	addne	r1, r1, r4
 8001fb4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001fb6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001fb8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001fba:	bf18      	it	ne
 8001fbc:	6018      	strne	r0, [r3, #0]
 8001fbe:	bd10      	pop	{r4, pc}
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	e7e1      	b.n	8001f88 <prvInsertBlockIntoFreeList+0x4>
 8001fc4:	200018a4 	.word	0x200018a4
 8001fc8:	20000034 	.word	0x20000034

08001fcc <pvPortMalloc>:
{
 8001fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001fd2:	f000 fa25 	bl	8002420 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001fd6:	493e      	ldr	r1, [pc, #248]	; (80020d0 <pvPortMalloc+0x104>)
 8001fd8:	4d3e      	ldr	r5, [pc, #248]	; (80020d4 <pvPortMalloc+0x108>)
 8001fda:	680b      	ldr	r3, [r1, #0]
 8001fdc:	bb0b      	cbnz	r3, 8002022 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001fe0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001fe2:	bf1f      	itttt	ne
 8001fe4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fe6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001fea:	f502 53c3 	addne.w	r3, r2, #6240	; 0x1860
 8001fee:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ff0:	bf14      	ite	ne
 8001ff2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ff4:	f44f 53c3 	moveq.w	r3, #6240	; 0x1860
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001ff8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001ffa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ffc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002000:	4e36      	ldr	r6, [pc, #216]	; (80020dc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002002:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002004:	2000      	movs	r0, #0
 8002006:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002008:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800200a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800200c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800200e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002010:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002014:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002016:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <pvPortMalloc+0x118>)
 800201a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800201c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002020:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002022:	682f      	ldr	r7, [r5, #0]
 8002024:	4227      	tst	r7, r4
 8002026:	d116      	bne.n	8002056 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002028:	2c00      	cmp	r4, #0
 800202a:	d041      	beq.n	80020b0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800202c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002030:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002032:	bf1c      	itt	ne
 8002034:	f023 0307 	bicne.w	r3, r3, #7
 8002038:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800203a:	b163      	cbz	r3, 8002056 <pvPortMalloc+0x8a>
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <pvPortMalloc+0x118>)
 800203e:	6816      	ldr	r6, [r2, #0]
 8002040:	42b3      	cmp	r3, r6
 8002042:	4690      	mov	r8, r2
 8002044:	d807      	bhi.n	8002056 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002046:	4a25      	ldr	r2, [pc, #148]	; (80020dc <pvPortMalloc+0x110>)
 8002048:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800204a:	6868      	ldr	r0, [r5, #4]
 800204c:	4283      	cmp	r3, r0
 800204e:	d804      	bhi.n	800205a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002050:	6809      	ldr	r1, [r1, #0]
 8002052:	428d      	cmp	r5, r1
 8002054:	d107      	bne.n	8002066 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002056:	2400      	movs	r4, #0
 8002058:	e02a      	b.n	80020b0 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800205a:	682c      	ldr	r4, [r5, #0]
 800205c:	2c00      	cmp	r4, #0
 800205e:	d0f7      	beq.n	8002050 <pvPortMalloc+0x84>
 8002060:	462a      	mov	r2, r5
 8002062:	4625      	mov	r5, r4
 8002064:	e7f1      	b.n	800204a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002066:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002068:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800206a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800206c:	1ac2      	subs	r2, r0, r3
 800206e:	2a10      	cmp	r2, #16
 8002070:	d90f      	bls.n	8002092 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002072:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002074:	0741      	lsls	r1, r0, #29
 8002076:	d008      	beq.n	800208a <pvPortMalloc+0xbe>
 8002078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	e7fe      	b.n	8002088 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800208a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800208c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800208e:	f7ff ff79 	bl	8001f84 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002092:	4913      	ldr	r1, [pc, #76]	; (80020e0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002094:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002096:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002098:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800209a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800209c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800209e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020a2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80020a6:	bf38      	it	cc
 80020a8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020aa:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80020ac:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80020ae:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80020b0:	f000 fa50 	bl	8002554 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80020b4:	0763      	lsls	r3, r4, #29
 80020b6:	d008      	beq.n	80020ca <pvPortMalloc+0xfe>
 80020b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	f3bf 8f6f 	isb	sy
 80020c4:	f3bf 8f4f 	dsb	sy
 80020c8:	e7fe      	b.n	80020c8 <pvPortMalloc+0xfc>
}
 80020ca:	4620      	mov	r0, r4
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d0:	20000034 	.word	0x20000034
 80020d4:	20001898 	.word	0x20001898
 80020d8:	20000038 	.word	0x20000038
 80020dc:	200018a4 	.word	0x200018a4
 80020e0:	200018a0 	.word	0x200018a0
 80020e4:	2000189c 	.word	0x2000189c

080020e8 <vPortFree>:
{
 80020e8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80020ea:	4604      	mov	r4, r0
 80020ec:	b370      	cbz	r0, 800214c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <vPortFree+0x68>)
 80020f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4213      	tst	r3, r2
 80020f8:	d108      	bne.n	800210c <vPortFree+0x24>
 80020fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	e7fe      	b.n	800210a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800210c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002110:	b141      	cbz	r1, 8002124 <vPortFree+0x3c>
 8002112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	e7fe      	b.n	8002122 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002124:	ea23 0302 	bic.w	r3, r3, r2
 8002128:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800212c:	f000 f978 	bl	8002420 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002130:	4a08      	ldr	r2, [pc, #32]	; (8002154 <vPortFree+0x6c>)
 8002132:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002136:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002138:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800213c:	440b      	add	r3, r1
 800213e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002140:	f7ff ff20 	bl	8001f84 <prvInsertBlockIntoFreeList>
}
 8002144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002148:	f000 ba04 	b.w	8002554 <xTaskResumeAll>
 800214c:	bd10      	pop	{r4, pc}
 800214e:	bf00      	nop
 8002150:	20001898 	.word	0x20001898
 8002154:	2000189c 	.word	0x2000189c

08002158 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <prvResetNextTaskUnblockTime+0x1c>)
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	6819      	ldr	r1, [r3, #0]
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <prvResetNextTaskUnblockTime+0x20>)
 8002160:	b919      	cbnz	r1, 800216a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800216e:	68d2      	ldr	r2, [r2, #12]
 8002170:	6852      	ldr	r2, [r2, #4]
 8002172:	e7f8      	b.n	8002166 <prvResetNextTaskUnblockTime+0xe>
 8002174:	200018b0 	.word	0x200018b0
 8002178:	20001988 	.word	0x20001988

0800217c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002180:	4e1b      	ldr	r6, [pc, #108]	; (80021f0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002182:	681d      	ldr	r5, [r3, #0]
{
 8002184:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002186:	6830      	ldr	r0, [r6, #0]
 8002188:	3004      	adds	r0, #4
{
 800218a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800218c:	f7ff fd81 	bl	8001c92 <uxListRemove>
 8002190:	4633      	mov	r3, r6
 8002192:	b940      	cbnz	r0, 80021a6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002194:	6831      	ldr	r1, [r6, #0]
 8002196:	4e17      	ldr	r6, [pc, #92]	; (80021f4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002198:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800219a:	6832      	ldr	r2, [r6, #0]
 800219c:	2001      	movs	r0, #1
 800219e:	4088      	lsls	r0, r1
 80021a0:	ea22 0200 	bic.w	r2, r2, r0
 80021a4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021a6:	1c62      	adds	r2, r4, #1
 80021a8:	d107      	bne.n	80021ba <prvAddCurrentTaskToDelayedList+0x3e>
 80021aa:	b137      	cbz	r7, 80021ba <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	4812      	ldr	r0, [pc, #72]	; (80021f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80021b0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b6:	f7ff bd49 	b.w	8001c4c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021ba:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021bc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80021be:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021c0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80021c2:	d907      	bls.n	80021d4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <prvAddCurrentTaskToDelayedList+0x80>)
 80021c6:	6810      	ldr	r0, [r2, #0]
 80021c8:	6819      	ldr	r1, [r3, #0]
}
 80021ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ce:	3104      	adds	r1, #4
 80021d0:	f7ff bd48 	b.w	8001c64 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <prvAddCurrentTaskToDelayedList+0x84>)
 80021d6:	6810      	ldr	r0, [r2, #0]
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	3104      	adds	r1, #4
 80021dc:	f7ff fd42 	bl	8001c64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <prvAddCurrentTaskToDelayedList+0x88>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80021e6:	bf38      	it	cc
 80021e8:	601c      	strcc	r4, [r3, #0]
 80021ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ec:	200019d0 	.word	0x200019d0
 80021f0:	200018ac 	.word	0x200018ac
 80021f4:	20001958 	.word	0x20001958
 80021f8:	200019a8 	.word	0x200019a8
 80021fc:	200018b4 	.word	0x200018b4
 8002200:	200018b0 	.word	0x200018b0
 8002204:	20001988 	.word	0x20001988

08002208 <xTaskCreate>:
	{
 8002208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800220c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002210:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002212:	4650      	mov	r0, sl
	{
 8002214:	460f      	mov	r7, r1
 8002216:	4699      	mov	r9, r3
 8002218:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800221a:	f7ff fed7 	bl	8001fcc <pvPortMalloc>
			if( pxStack != NULL )
 800221e:	4605      	mov	r5, r0
 8002220:	2800      	cmp	r0, #0
 8002222:	f000 8096 	beq.w	8002352 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002226:	2054      	movs	r0, #84	; 0x54
 8002228:	f7ff fed0 	bl	8001fcc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800222c:	4604      	mov	r4, r0
 800222e:	2800      	cmp	r0, #0
 8002230:	f000 808c 	beq.w	800234c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002234:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002238:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800223a:	4455      	add	r5, sl
 800223c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800223e:	f025 0a07 	bic.w	sl, r5, #7
 8002242:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002246:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002248:	7859      	ldrb	r1, [r3, #1]
 800224a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800224e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002252:	b109      	cbz	r1, 8002258 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002254:	42bb      	cmp	r3, r7
 8002256:	d1f7      	bne.n	8002248 <xTaskCreate+0x40>
 8002258:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800225a:	2d06      	cmp	r5, #6
 800225c:	bf28      	it	cs
 800225e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002260:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002264:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002266:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002268:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800226a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800226c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002270:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002274:	f7ff fce7 	bl	8001c46 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002278:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800227c:	f104 0018 	add.w	r0, r4, #24
 8002280:	f7ff fce1 	bl	8001c46 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002284:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002288:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800228c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800228e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002292:	464a      	mov	r2, r9
 8002294:	4641      	mov	r1, r8
 8002296:	4650      	mov	r0, sl
 8002298:	f7ff fd3e 	bl	8001d18 <pxPortInitialiseStack>
 800229c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800229e:	b106      	cbz	r6, 80022a2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022a0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80022a2:	f7ff fd67 	bl	8001d74 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80022a6:	4b32      	ldr	r3, [pc, #200]	; (8002370 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80022a8:	4e32      	ldr	r6, [pc, #200]	; (8002374 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80023a0 <xTaskCreate+0x198>
 80022b0:	3201      	adds	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80022b4:	6835      	ldr	r5, [r6, #0]
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	d14e      	bne.n	8002358 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80022ba:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d11d      	bne.n	80022fe <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80022c2:	eb08 0005 	add.w	r0, r8, r5
 80022c6:	3514      	adds	r5, #20
 80022c8:	f7ff fcb2 	bl	8001c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80022cc:	2d8c      	cmp	r5, #140	; 0x8c
 80022ce:	d1f8      	bne.n	80022c2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80022d0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80023a4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80022d4:	4d28      	ldr	r5, [pc, #160]	; (8002378 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80022d6:	4648      	mov	r0, r9
 80022d8:	f7ff fcaa 	bl	8001c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80022dc:	4628      	mov	r0, r5
 80022de:	f7ff fca7 	bl	8001c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80022e2:	4826      	ldr	r0, [pc, #152]	; (800237c <xTaskCreate+0x174>)
 80022e4:	f7ff fca4 	bl	8001c30 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80022e8:	4825      	ldr	r0, [pc, #148]	; (8002380 <xTaskCreate+0x178>)
 80022ea:	f7ff fca1 	bl	8001c30 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80022ee:	4825      	ldr	r0, [pc, #148]	; (8002384 <xTaskCreate+0x17c>)
 80022f0:	f7ff fc9e 	bl	8001c30 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <xTaskCreate+0x180>)
 80022f6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <xTaskCreate+0x184>)
 80022fc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80022fe:	4a24      	ldr	r2, [pc, #144]	; (8002390 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002300:	4924      	ldr	r1, [pc, #144]	; (8002394 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002302:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002304:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002306:	3301      	adds	r3, #1
 8002308:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800230a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800230c:	2501      	movs	r5, #1
 800230e:	fa05 f302 	lsl.w	r3, r5, r2
 8002312:	4303      	orrs	r3, r0
 8002314:	2014      	movs	r0, #20
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	fb00 8002 	mla	r0, r0, r2, r8
 800231c:	4639      	mov	r1, r7
 800231e:	f7ff fc95 	bl	8001c4c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002322:	f7ff fd49 	bl	8001db8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <xTaskCreate+0x190>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b163      	cbz	r3, 8002346 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800232c:	6833      	ldr	r3, [r6, #0]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002332:	429a      	cmp	r2, r3
 8002334:	d207      	bcs.n	8002346 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <xTaskCreate+0x194>)
 8002338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	f3bf 8f4f 	dsb	sy
 8002342:	f3bf 8f6f 	isb	sy
	}
 8002346:	4628      	mov	r0, r5
 8002348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800234c:	4628      	mov	r0, r5
 800234e:	f7ff fecb 	bl	80020e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002352:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002356:	e7f6      	b.n	8002346 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <xTaskCreate+0x190>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ce      	bne.n	80022fe <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002360:	6833      	ldr	r3, [r6, #0]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002366:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002368:	bf98      	it	ls
 800236a:	6034      	strls	r4, [r6, #0]
 800236c:	e7c7      	b.n	80022fe <xTaskCreate+0xf6>
 800236e:	bf00      	nop
 8002370:	20001944 	.word	0x20001944
 8002374:	200018ac 	.word	0x200018ac
 8002378:	20001970 	.word	0x20001970
 800237c:	20001990 	.word	0x20001990
 8002380:	200019bc 	.word	0x200019bc
 8002384:	200019a8 	.word	0x200019a8
 8002388:	200018b0 	.word	0x200018b0
 800238c:	200018b4 	.word	0x200018b4
 8002390:	20001954 	.word	0x20001954
 8002394:	20001958 	.word	0x20001958
 8002398:	200019a4 	.word	0x200019a4
 800239c:	e000ed04 	.word	0xe000ed04
 80023a0:	200018b8 	.word	0x200018b8
 80023a4:	2000195c 	.word	0x2000195c

080023a8 <vTaskStartScheduler>:
{
 80023a8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <vTaskStartScheduler+0x60>)
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	2400      	movs	r4, #0
 80023b0:	9400      	str	r4, [sp, #0]
 80023b2:	4623      	mov	r3, r4
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	4915      	ldr	r1, [pc, #84]	; (800240c <vTaskStartScheduler+0x64>)
 80023b8:	4815      	ldr	r0, [pc, #84]	; (8002410 <vTaskStartScheduler+0x68>)
 80023ba:	f7ff ff25 	bl	8002208 <xTaskCreate>
	if( xReturn == pdPASS )
 80023be:	2801      	cmp	r0, #1
 80023c0:	d114      	bne.n	80023ec <vTaskStartScheduler+0x44>
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <vTaskStartScheduler+0x6c>)
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <vTaskStartScheduler+0x70>)
 80023dc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <vTaskStartScheduler+0x74>)
 80023e0:	601c      	str	r4, [r3, #0]
}
 80023e2:	b002      	add	sp, #8
 80023e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80023e8:	f7ff bd56 	b.w	8001e98 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023ec:	3001      	adds	r0, #1
 80023ee:	d108      	bne.n	8002402 <vTaskStartScheduler+0x5a>
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	e7fe      	b.n	8002400 <vTaskStartScheduler+0x58>
}
 8002402:	b002      	add	sp, #8
 8002404:	bd10      	pop	{r4, pc}
 8002406:	bf00      	nop
 8002408:	20001984 	.word	0x20001984
 800240c:	08002f2c 	.word	0x08002f2c
 8002410:	0800268d 	.word	0x0800268d
 8002414:	20001988 	.word	0x20001988
 8002418:	200019a4 	.word	0x200019a4
 800241c:	200019d0 	.word	0x200019d0

08002420 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002420:	4a02      	ldr	r2, [pc, #8]	; (800242c <vTaskSuspendAll+0xc>)
 8002422:	6813      	ldr	r3, [r2, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20001950 	.word	0x20001950

08002430 <xTaskIncrementTick>:
{
 8002430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002434:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <xTaskIncrementTick+0xf8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d153      	bne.n	80024e4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <xTaskIncrementTick+0xfc>)
 800243e:	681c      	ldr	r4, [r3, #0]
 8002440:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002442:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002444:	b9bc      	cbnz	r4, 8002476 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <xTaskIncrementTick+0x100>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	b142      	cbz	r2, 8002460 <xTaskIncrementTick+0x30>
 800244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002452:	f383 8811 	msr	BASEPRI, r3
 8002456:	f3bf 8f6f 	isb	sy
 800245a:	f3bf 8f4f 	dsb	sy
 800245e:	e7fe      	b.n	800245e <xTaskIncrementTick+0x2e>
 8002460:	4a34      	ldr	r2, [pc, #208]	; (8002534 <xTaskIncrementTick+0x104>)
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	6810      	ldr	r0, [r2, #0]
 8002466:	6018      	str	r0, [r3, #0]
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <xTaskIncrementTick+0x108>)
 800246c:	6813      	ldr	r3, [r2, #0]
 800246e:	3301      	adds	r3, #1
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	f7ff fe71 	bl	8002158 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002476:	4d31      	ldr	r5, [pc, #196]	; (800253c <xTaskIncrementTick+0x10c>)
 8002478:	4f31      	ldr	r7, [pc, #196]	; (8002540 <xTaskIncrementTick+0x110>)
 800247a:	682b      	ldr	r3, [r5, #0]
 800247c:	429c      	cmp	r4, r3
 800247e:	f04f 0b00 	mov.w	fp, #0
 8002482:	d33e      	bcc.n	8002502 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002484:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002530 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002488:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002550 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800248c:	f8d8 2000 	ldr.w	r2, [r8]
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	bb72      	cbnz	r2, 80024f2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002498:	602a      	str	r2, [r5, #0]
					break;
 800249a:	e032      	b.n	8002502 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800249c:	f106 0a04 	add.w	sl, r6, #4
 80024a0:	4650      	mov	r0, sl
 80024a2:	f7ff fbf6 	bl	8001c92 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80024a8:	b119      	cbz	r1, 80024b2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024aa:	f106 0018 	add.w	r0, r6, #24
 80024ae:	f7ff fbf0 	bl	8001c92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024b2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80024b4:	f8d9 3000 	ldr.w	r3, [r9]
 80024b8:	2201      	movs	r2, #1
 80024ba:	fa02 f100 	lsl.w	r1, r2, r0
 80024be:	4319      	orrs	r1, r3
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <xTaskIncrementTick+0x114>)
 80024c2:	f8c9 1000 	str.w	r1, [r9]
 80024c6:	f04f 0e14 	mov.w	lr, #20
 80024ca:	4651      	mov	r1, sl
 80024cc:	fb0e 3000 	mla	r0, lr, r0, r3
 80024d0:	f7ff fbbc 	bl	8001c4c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024d4:	6838      	ldr	r0, [r7, #0]
 80024d6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80024d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80024da:	4291      	cmp	r1, r2
 80024dc:	bf28      	it	cs
 80024de:	f04f 0b01 	movcs.w	fp, #1
 80024e2:	e7d3      	b.n	800248c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80024e4:	4a18      	ldr	r2, [pc, #96]	; (8002548 <xTaskIncrementTick+0x118>)
 80024e6:	6813      	ldr	r3, [r2, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80024ec:	f04f 0b00 	mov.w	fp, #0
 80024f0:	e011      	b.n	8002516 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024f2:	f8d8 2000 	ldr.w	r2, [r8]
 80024f6:	68d2      	ldr	r2, [r2, #12]
 80024f8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024fa:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80024fc:	428c      	cmp	r4, r1
 80024fe:	d2cd      	bcs.n	800249c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002500:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <xTaskIncrementTick+0x114>)
 8002506:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002508:	2214      	movs	r2, #20
 800250a:	434a      	muls	r2, r1
 800250c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800250e:	2a02      	cmp	r2, #2
 8002510:	bf28      	it	cs
 8002512:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002516:	4a0d      	ldr	r2, [pc, #52]	; (800254c <xTaskIncrementTick+0x11c>)
 8002518:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800251a:	2a00      	cmp	r2, #0
 800251c:	bf18      	it	ne
 800251e:	f04f 0b01 	movne.w	fp, #1
}
 8002522:	4658      	mov	r0, fp
 8002524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002528:	20001950 	.word	0x20001950
 800252c:	200019d0 	.word	0x200019d0
 8002530:	200018b0 	.word	0x200018b0
 8002534:	200018b4 	.word	0x200018b4
 8002538:	2000198c 	.word	0x2000198c
 800253c:	20001988 	.word	0x20001988
 8002540:	200018ac 	.word	0x200018ac
 8002544:	200018b8 	.word	0x200018b8
 8002548:	2000194c 	.word	0x2000194c
 800254c:	200019d4 	.word	0x200019d4
 8002550:	20001958 	.word	0x20001958

08002554 <xTaskResumeAll>:
{
 8002554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002558:	4c31      	ldr	r4, [pc, #196]	; (8002620 <xTaskResumeAll+0xcc>)
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	b943      	cbnz	r3, 8002570 <xTaskResumeAll+0x1c>
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	e7fe      	b.n	800256e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002570:	f7ff fc00 	bl	8001d74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	3b01      	subs	r3, #1
 8002578:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800257a:	6824      	ldr	r4, [r4, #0]
 800257c:	b12c      	cbz	r4, 800258a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800257e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002580:	f7ff fc1a 	bl	8001db8 <vPortExitCritical>
}
 8002584:	4620      	mov	r0, r4
 8002586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <xTaskResumeAll+0xd0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f5      	beq.n	800257e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002592:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800263c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002596:	4f24      	ldr	r7, [pc, #144]	; (8002628 <xTaskResumeAll+0xd4>)
 8002598:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002640 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800259c:	f8d9 3000 	ldr.w	r3, [r9]
 80025a0:	b9e3      	cbnz	r3, 80025dc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80025a2:	b10c      	cbz	r4, 80025a8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80025a4:	f7ff fdd8 	bl	8002158 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80025a8:	4d20      	ldr	r5, [pc, #128]	; (800262c <xTaskResumeAll+0xd8>)
 80025aa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80025ac:	b144      	cbz	r4, 80025c0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80025ae:	4e20      	ldr	r6, [pc, #128]	; (8002630 <xTaskResumeAll+0xdc>)
 80025b0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80025b2:	f7ff ff3d 	bl	8002430 <xTaskIncrementTick>
 80025b6:	b100      	cbz	r0, 80025ba <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80025b8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80025ba:	3c01      	subs	r4, #1
 80025bc:	d1f9      	bne.n	80025b2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80025be:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <xTaskResumeAll+0xdc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0da      	beq.n	800257e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80025c8:	4b1a      	ldr	r3, [pc, #104]	; (8002634 <xTaskResumeAll+0xe0>)
 80025ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f3bf 8f4f 	dsb	sy
 80025d4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80025d8:	2401      	movs	r4, #1
 80025da:	e7d1      	b.n	8002580 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80025dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80025e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025e2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025e4:	f104 0018 	add.w	r0, r4, #24
 80025e8:	f7ff fb53 	bl	8001c92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025ec:	4630      	mov	r0, r6
 80025ee:	f7ff fb50 	bl	8001c92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	2501      	movs	r5, #1
 80025f8:	fa05 f302 	lsl.w	r3, r5, r2
 80025fc:	2014      	movs	r0, #20
 80025fe:	430b      	orrs	r3, r1
 8002600:	fb00 8002 	mla	r0, r0, r2, r8
 8002604:	4631      	mov	r1, r6
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	f7ff fb20 	bl	8001c4c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <xTaskResumeAll+0xe4>)
 800260e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002616:	bf24      	itt	cs
 8002618:	4b05      	ldrcs	r3, [pc, #20]	; (8002630 <xTaskResumeAll+0xdc>)
 800261a:	601d      	strcs	r5, [r3, #0]
 800261c:	e7be      	b.n	800259c <xTaskResumeAll+0x48>
 800261e:	bf00      	nop
 8002620:	20001950 	.word	0x20001950
 8002624:	20001944 	.word	0x20001944
 8002628:	20001958 	.word	0x20001958
 800262c:	2000194c 	.word	0x2000194c
 8002630:	200019d4 	.word	0x200019d4
 8002634:	e000ed04 	.word	0xe000ed04
 8002638:	200018ac 	.word	0x200018ac
 800263c:	20001990 	.word	0x20001990
 8002640:	200018b8 	.word	0x200018b8

08002644 <vTaskDelay>:
	{
 8002644:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002646:	b940      	cbnz	r0, 800265a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002648:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <vTaskDelay+0x40>)
 800264a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800265a:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <vTaskDelay+0x44>)
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	b141      	cbz	r1, 8002672 <vTaskDelay+0x2e>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	e7fe      	b.n	8002670 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002672:	f7ff fed5 	bl	8002420 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002676:	f7ff fd81 	bl	800217c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800267a:	f7ff ff6b 	bl	8002554 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800267e:	2800      	cmp	r0, #0
 8002680:	d0e2      	beq.n	8002648 <vTaskDelay+0x4>
 8002682:	bd08      	pop	{r3, pc}
 8002684:	e000ed04 	.word	0xe000ed04
 8002688:	20001950 	.word	0x20001950

0800268c <prvIdleTask>:
{
 800268c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800268e:	4e17      	ldr	r6, [pc, #92]	; (80026ec <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002690:	4c17      	ldr	r4, [pc, #92]	; (80026f0 <prvIdleTask+0x64>)
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	b963      	cbnz	r3, 80026b0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <prvIdleTask+0x68>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d9f8      	bls.n	8002690 <prvIdleTask+0x4>
				taskYIELD();
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <prvIdleTask+0x6c>)
 80026a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	e7ef      	b.n	8002690 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80026b0:	f7ff feb6 	bl	8002420 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80026b4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80026b6:	f7ff ff4d 	bl	8002554 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	d0e9      	beq.n	8002692 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80026be:	f7ff fb59 	bl	8001d74 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80026c2:	68f3      	ldr	r3, [r6, #12]
 80026c4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026c6:	1d28      	adds	r0, r5, #4
 80026c8:	f7ff fae3 	bl	8001c92 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80026cc:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <prvIdleTask+0x70>)
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80026da:	f7ff fb6d 	bl	8001db8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80026de:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80026e0:	f7ff fd02 	bl	80020e8 <vPortFree>
			vPortFree( pxTCB );
 80026e4:	4628      	mov	r0, r5
 80026e6:	f7ff fcff 	bl	80020e8 <vPortFree>
 80026ea:	e7d2      	b.n	8002692 <prvIdleTask+0x6>
 80026ec:	200019bc 	.word	0x200019bc
 80026f0:	20001948 	.word	0x20001948
 80026f4:	200018b8 	.word	0x200018b8
 80026f8:	e000ed04 	.word	0xe000ed04
 80026fc:	20001944 	.word	0x20001944

08002700 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <vTaskSwitchContext+0x60>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <vTaskSwitchContext+0x64>)
{
 8002706:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002708:	b112      	cbz	r2, 8002710 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800270a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002710:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <vTaskSwitchContext+0x68>)
 8002714:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f1c3 031f 	rsb	r3, r3, #31
 8002720:	2214      	movs	r2, #20
 8002722:	4912      	ldr	r1, [pc, #72]	; (800276c <vTaskSwitchContext+0x6c>)
 8002724:	435a      	muls	r2, r3
 8002726:	1888      	adds	r0, r1, r2
 8002728:	588c      	ldr	r4, [r1, r2]
 800272a:	b944      	cbnz	r4, 800273e <vTaskSwitchContext+0x3e>
	__asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	e7fe      	b.n	800273c <vTaskSwitchContext+0x3c>
 800273e:	6844      	ldr	r4, [r0, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	6864      	ldr	r4, [r4, #4]
 8002744:	6044      	str	r4, [r0, #4]
 8002746:	440a      	add	r2, r1
 8002748:	4294      	cmp	r4, r2
 800274a:	bf04      	itt	eq
 800274c:	6862      	ldreq	r2, [r4, #4]
 800274e:	6042      	streq	r2, [r0, #4]
 8002750:	2214      	movs	r2, #20
 8002752:	fb02 1303 	mla	r3, r2, r3, r1
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <vTaskSwitchContext+0x70>)
 800275c:	e7d6      	b.n	800270c <vTaskSwitchContext+0xc>
 800275e:	bf00      	nop
 8002760:	20001950 	.word	0x20001950
 8002764:	200019d4 	.word	0x200019d4
 8002768:	20001958 	.word	0x20001958
 800276c:	200018b8 	.word	0x200018b8
 8002770:	200018ac 	.word	0x200018ac

08002774 <backupLoop1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_backupLoop1 */
void backupLoop1(void const * argument)
{
 8002774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN backupLoop1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f7ff fa52 	bl	8001c20 <osDelay>
 800277c:	e7fb      	b.n	8002776 <backupLoop1+0x2>
	...

08002780 <motor0Loop>:
{
 8002780:	b580      	push	{r7, lr}
			if(m1Speed>MAX_SPEED || m1Speed<0){
 8002782:	4c17      	ldr	r4, [pc, #92]	; (80027e0 <motor0Loop+0x60>)
	  if(m1State == On){
 8002784:	4f17      	ldr	r7, [pc, #92]	; (80027e4 <motor0Loop+0x64>)
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_SET);
 8002786:	4d18      	ldr	r5, [pc, #96]	; (80027e8 <motor0Loop+0x68>)
	  if(m1State == On){
 8002788:	783e      	ldrb	r6, [r7, #0]
 800278a:	2e00      	cmp	r6, #0
 800278c:	d1fd      	bne.n	800278a <motor0Loop+0xa>
			if(m1Speed>MAX_SPEED || m1Speed<0){
 800278e:	8823      	ldrh	r3, [r4, #0]
 8002790:	2b0a      	cmp	r3, #10
				HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 8002792:	f04f 0201 	mov.w	r2, #1
			if(m1Speed>MAX_SPEED || m1Speed<0){
 8002796:	d908      	bls.n	80027aa <motor0Loop+0x2a>
				HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 8002798:	2120      	movs	r1, #32
 800279a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279e:	f7fe f9f9 	bl	8000b94 <HAL_GPIO_WritePin>
				errorMot = true;
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <motor0Loop+0x6c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e7ee      	b.n	8002788 <motor0Loop+0x8>
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_SET);
 80027aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7fe f9f0 	bl	8000b94 <HAL_GPIO_WritePin>
				setCorrectDirM1();
 80027b4:	f000 f9ac 	bl	8002b10 <setCorrectDirM1>
				osDelay(m1Speed);
 80027b8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80027bc:	f7ff fa30 	bl	8001c20 <osDelay>
				resetDirM1();
 80027c0:	f000 f9c6 	bl	8002b50 <resetDirM1>
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_RESET);
 80027c4:	4628      	mov	r0, r5
 80027c6:	4632      	mov	r2, r6
 80027c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027cc:	f7fe f9e2 	bl	8000b94 <HAL_GPIO_WritePin>
				osDelay(MAX_SPEED-m1Speed);
 80027d0:	f9b4 0000 	ldrsh.w	r0, [r4]
 80027d4:	f1c0 000a 	rsb	r0, r0, #10
 80027d8:	f7ff fa22 	bl	8001c20 <osDelay>
 80027dc:	e7d4      	b.n	8002788 <motor0Loop+0x8>
 80027de:	bf00      	nop
 80027e0:	2000000a 	.word	0x2000000a
 80027e4:	200019d8 	.word	0x200019d8
 80027e8:	48000800 	.word	0x48000800
 80027ec:	200019d9 	.word	0x200019d9

080027f0 <controlLoop>:
 80027f0:	b508      	push	{r3, lr}
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7ff fa14 	bl	8001c20 <osDelay>
 80027f8:	e7fb      	b.n	80027f2 <controlLoop+0x2>

080027fa <backupLoop0>:
 80027fa:	b508      	push	{r3, lr}
 80027fc:	2001      	movs	r0, #1
 80027fe:	f7ff fa0f 	bl	8001c20 <osDelay>
 8002802:	e7fb      	b.n	80027fc <backupLoop0+0x2>

08002804 <StartDefaultTask>:
 8002804:	b508      	push	{r3, lr}
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff fa0a 	bl	8001c20 <osDelay>
 800280c:	e7fb      	b.n	8002806 <StartDefaultTask+0x2>

0800280e <motor1Loop>:
 800280e:	b508      	push	{r3, lr}
 8002810:	2001      	movs	r0, #1
 8002812:	f7ff fa05 	bl	8001c20 <osDelay>
 8002816:	e7fb      	b.n	8002810 <motor1Loop+0x2>

08002818 <ADCLoop>:
 8002818:	b508      	push	{r3, lr}
 800281a:	2001      	movs	r0, #1
 800281c:	f7ff fa00 	bl	8001c20 <osDelay>
 8002820:	e7fb      	b.n	800281a <ADCLoop+0x2>

08002822 <SystemClock_Config>:
{
 8002822:	b530      	push	{r4, r5, lr}
 8002824:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002826:	2228      	movs	r2, #40	; 0x28
 8002828:	2100      	movs	r1, #0
 800282a:	a806      	add	r0, sp, #24
 800282c:	f000 fb12 	bl	8002e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002830:	2214      	movs	r2, #20
 8002832:	2100      	movs	r1, #0
 8002834:	a801      	add	r0, sp, #4
 8002836:	f000 fb0d 	bl	8002e54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800283a:	2258      	movs	r2, #88	; 0x58
 800283c:	2100      	movs	r1, #0
 800283e:	a810      	add	r0, sp, #64	; 0x40
 8002840:	f000 fb08 	bl	8002e54 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002844:	2301      	movs	r3, #1
 8002846:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002848:	2310      	movs	r3, #16
 800284a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800284c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002850:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002852:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002854:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002856:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800285a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800285c:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800285e:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002860:	f7fe f99e 	bl	8000ba0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002864:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002866:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002868:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800286a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800286c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002870:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002872:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002874:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002876:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002878:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800287a:	f7fe fc3f 	bl	80010fc <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800287e:	2382      	movs	r3, #130	; 0x82
 8002880:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002882:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8002884:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002888:	9513      	str	r5, [sp, #76]	; 0x4c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800288a:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f7fe fd2e 	bl	80012ec <HAL_RCCEx_PeriphCLKConfig>
}
 8002890:	b027      	add	sp, #156	; 0x9c
 8002892:	bd30      	pop	{r4, r5, pc}

08002894 <main>:
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 8002898:	f7fd fca2 	bl	80001e0 <HAL_Init>
  SystemClock_Config();
 800289c:	f7ff ffc1 	bl	8002822 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	2214      	movs	r2, #20
 80028a2:	2100      	movs	r1, #0
 80028a4:	a822      	add	r0, sp, #136	; 0x88
 80028a6:	f000 fad5 	bl	8002e54 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <main+0x22c>)
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80028b2:	615a      	str	r2, [r3, #20]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80028ba:	9200      	str	r2, [sp, #0]
 80028bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80028cc:	9201      	str	r2, [sp, #4]
 80028ce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028d6:	615a      	str	r2, [r3, #20]
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80028de:	9202      	str	r2, [sp, #8]
 80028e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f0:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|AIN1_Pin|AIN2_Pin|PWMB_Pin 
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 80028f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|AIN1_Pin|AIN2_Pin|PWMB_Pin 
 80028fe:	f7fe f949 	bl	8000b94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, backupOut1_Pin|backupOut0_Pin|PWMA_Pin, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002908:	486e      	ldr	r0, [pc, #440]	; (8002ac4 <main+0x230>)
 800290a:	f7fe f943 	bl	8000b94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800290e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002914:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002916:	a922      	add	r1, sp, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002918:	4b6b      	ldr	r3, [pc, #428]	; (8002ac8 <main+0x234>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800291a:	486a      	ldr	r0, [pc, #424]	; (8002ac4 <main+0x230>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800291c:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	9424      	str	r4, [sp, #144]	; 0x90
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002922:	f7fe f867 	bl	80009f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002926:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002928:	a922      	add	r1, sp, #136	; 0x88
 800292a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800292e:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = LD2_Pin;
 8002930:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002932:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002938:	f7fe f85c 	bl	80009f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = backupIn1_Pin;
 800293c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 8002940:	a922      	add	r1, sp, #136	; 0x88
 8002942:	4862      	ldr	r0, [pc, #392]	; (8002acc <main+0x238>)
  GPIO_InitStruct.Pin = backupIn1_Pin;
 8002944:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002946:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 800294a:	f7fe f853 	bl	80009f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = backupIn0_Pin;
 800294e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(backupIn0_GPIO_Port, &GPIO_InitStruct);
 8002950:	a922      	add	r1, sp, #136	; 0x88
 8002952:	485c      	ldr	r0, [pc, #368]	; (8002ac4 <main+0x230>)
  GPIO_InitStruct.Pin = backupIn0_Pin;
 8002954:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002956:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002958:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800295a:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_Init(backupIn0_GPIO_Port, &GPIO_InitStruct);
 800295c:	f7fe f84a 	bl	80009f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = backupOut1_Pin|backupOut0_Pin|PWMA_Pin;
 8002960:	f44f 7360 	mov.w	r3, #896	; 0x380
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002964:	a922      	add	r1, sp, #136	; 0x88
 8002966:	4857      	ldr	r0, [pc, #348]	; (8002ac4 <main+0x230>)
  GPIO_InitStruct.Pin = backupOut1_Pin|backupOut0_Pin|PWMA_Pin;
 8002968:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296a:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800296c:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800296e:	9725      	str	r7, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002970:	f7fe f840 	bl	80009f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|PWMB_Pin|BN1_Pin 
 8002974:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	a922      	add	r1, sp, #136	; 0x88
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|PWMB_Pin|BN1_Pin 
 800297e:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002982:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002984:	9725      	str	r7, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002986:	f7fe f835 	bl	80009f4 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800298a:	4851      	ldr	r0, [pc, #324]	; (8002ad0 <main+0x23c>)
  huart2.Init.BaudRate = 38400;
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <main+0x240>)
  hadc1.Instance = ADC1;
 800298e:	4d52      	ldr	r5, [pc, #328]	; (8002ad8 <main+0x244>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002990:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8002992:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002996:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800299a:	230c      	movs	r3, #12
 800299c:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800299e:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029a0:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029a8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029aa:	f7ff f8ea 	bl	8001b82 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80029ae:	2218      	movs	r2, #24
 80029b0:	4621      	mov	r1, r4
 80029b2:	a822      	add	r0, sp, #136	; 0x88
  ADC_MultiModeTypeDef multimode = {0};
 80029b4:	941d      	str	r4, [sp, #116]	; 0x74
 80029b6:	941e      	str	r4, [sp, #120]	; 0x78
 80029b8:	941f      	str	r4, [sp, #124]	; 0x7c
  ADC_ChannelConfTypeDef sConfig = {0};
 80029ba:	f000 fa4b 	bl	8002e54 <memset>
  hadc1.Instance = ADC1;
 80029be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029c2:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029c6:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029c8:	2304      	movs	r3, #4
 80029ca:	616b      	str	r3, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029cc:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 80029ce:	622e      	str	r6, [r5, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029d0:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029d2:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029d4:	61ec      	str	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029d6:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d8:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029da:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029dc:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80029de:	61ac      	str	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80029e0:	63ac      	str	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029e2:	f7fd fc59 	bl	8000298 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029e6:	a91d      	add	r1, sp, #116	; 0x74
 80029e8:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80029ea:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80029ec:	f7fd ff20 	bl	8000830 <HAL_ADCEx_MultiModeConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f0:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80029f2:	4d3a      	ldr	r5, [pc, #232]	; (8002adc <main+0x248>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029f4:	9623      	str	r6, [sp, #140]	; 0x8c
  sConfig.Channel = ADC_CHANNEL_6;
 80029f6:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029f8:	a922      	add	r1, sp, #136	; 0x88
  sConfig.Channel = ADC_CHANNEL_6;
 80029fa:	9322      	str	r3, [sp, #136]	; 0x88
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029fc:	9425      	str	r4, [sp, #148]	; 0x94
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80029fe:	9424      	str	r4, [sp, #144]	; 0x90
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a00:	9426      	str	r4, [sp, #152]	; 0x98
  sConfig.Offset = 0;
 8002a02:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a04:	f7fd fd7c 	bl	8000500 <HAL_ADC_ConfigChannel>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a0a:	af04      	add	r7, sp, #16
 8002a0c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a0e:	462e      	mov	r6, r5
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a10:	4621      	mov	r1, r4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002a12:	f856 3b04 	ldr.w	r3, [r6], #4
 8002a16:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002a18:	a804      	add	r0, sp, #16
 8002a1a:	f7ff f8e9 	bl	8001bf0 <osThreadCreate>
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <main+0x24c>)
 8002a20:	6018      	str	r0, [r3, #0]
  osThreadDef(motor0Task, motor0Loop, osPriorityIdle, 0, 128);
 8002a22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a24:	af09      	add	r7, sp, #36	; 0x24
 8002a26:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002a28:	6833      	ldr	r3, [r6, #0]
 8002a2a:	603b      	str	r3, [r7, #0]
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	a809      	add	r0, sp, #36	; 0x24
 8002a30:	f7ff f8de 	bl	8001bf0 <osThreadCreate>
 8002a34:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <main+0x250>)
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8002a36:	f105 0718 	add.w	r7, r5, #24
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8002a3a:	6018      	str	r0, [r3, #0]
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8002a3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a3e:	ae0e      	add	r6, sp, #56	; 0x38
 8002a40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6033      	str	r3, [r6, #0]
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8002a46:	4621      	mov	r1, r4
 8002a48:	a80e      	add	r0, sp, #56	; 0x38
 8002a4a:	f7ff f8d1 	bl	8001bf0 <osThreadCreate>
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <main+0x254>)
  osThreadDef(ADCTask, ADCLoop, osPriorityIdle, 0, 128);
 8002a50:	f105 072c 	add.w	r7, r5, #44	; 0x2c
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8002a54:	6018      	str	r0, [r3, #0]
  osThreadDef(ADCTask, ADCLoop, osPriorityIdle, 0, 128);
 8002a56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a58:	ae13      	add	r6, sp, #76	; 0x4c
 8002a5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6033      	str	r3, [r6, #0]
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 8002a60:	4621      	mov	r1, r4
 8002a62:	a813      	add	r0, sp, #76	; 0x4c
 8002a64:	f7ff f8c4 	bl	8001bf0 <osThreadCreate>
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <main+0x258>)
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8002a6a:	f105 0740 	add.w	r7, r5, #64	; 0x40
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 8002a6e:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8002a70:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a72:	ae18      	add	r6, sp, #96	; 0x60
 8002a74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6033      	str	r3, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	a818      	add	r0, sp, #96	; 0x60
 8002a7e:	f7ff f8b7 	bl	8001bf0 <osThreadCreate>
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <main+0x25c>)
  osThreadDef(backupTask0, backupLoop0, osPriorityIdle, 0, 128);
 8002a84:	f105 0754 	add.w	r7, r5, #84	; 0x54
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8002a88:	6018      	str	r0, [r3, #0]
  osThreadDef(backupTask0, backupLoop0, osPriorityIdle, 0, 128);
 8002a8a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a8c:	ae1d      	add	r6, sp, #116	; 0x74
 8002a8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6033      	str	r3, [r6, #0]
  backupTask0Handle = osThreadCreate(osThread(backupTask0), NULL);
 8002a94:	4621      	mov	r1, r4
 8002a96:	a81d      	add	r0, sp, #116	; 0x74
 8002a98:	f7ff f8aa 	bl	8001bf0 <osThreadCreate>
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <main+0x260>)
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 8002a9e:	3568      	adds	r5, #104	; 0x68
  backupTask0Handle = osThreadCreate(osThread(backupTask0), NULL);
 8002aa0:	6018      	str	r0, [r3, #0]
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 8002aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa4:	ae22      	add	r6, sp, #136	; 0x88
 8002aa6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	6033      	str	r3, [r6, #0]
  backupTask1Handle = osThreadCreate(osThread(backupTask1), NULL);
 8002aac:	4621      	mov	r1, r4
 8002aae:	a822      	add	r0, sp, #136	; 0x88
 8002ab0:	f7ff f89e 	bl	8001bf0 <osThreadCreate>
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <main+0x264>)
 8002ab6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002ab8:	f7ff f895 	bl	8001be6 <osKernelStart>
 8002abc:	e7fe      	b.n	8002abc <main+0x228>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	48000800 	.word	0x48000800
 8002ac8:	10210000 	.word	0x10210000
 8002acc:	48000400 	.word	0x48000400
 8002ad0:	20001a48 	.word	0x20001a48
 8002ad4:	40004400 	.word	0x40004400
 8002ad8:	200019e8 	.word	0x200019e8
 8002adc:	08002e7c 	.word	0x08002e7c
 8002ae0:	200019e0 	.word	0x200019e0
 8002ae4:	20001ab8 	.word	0x20001ab8
 8002ae8:	200019e4 	.word	0x200019e4
 8002aec:	20001a3c 	.word	0x20001a3c
 8002af0:	20001a44 	.word	0x20001a44
 8002af4:	20001abc 	.word	0x20001abc
 8002af8:	20001a40 	.word	0x20001a40

08002afc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002afc:	6802      	ldr	r2, [r0, #0]
 8002afe:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002b04:	f7fd bb7e 	b.w	8000204 <HAL_IncTick>
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <setCorrectDirM1>:
#include "stdbool.h"
#include "main.h"
#include "motors.h"

void setCorrectDirM1(void){
	if(m1Dir == Forw){
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <setCorrectDirM1+0x3c>)
void setCorrectDirM1(void){
 8002b12:	b510      	push	{r4, lr}
	if(m1Dir == Forw){
 8002b14:	781c      	ldrb	r4, [r3, #0]
 8002b16:	b97c      	cbnz	r4, 8002b38 <setCorrectDirM1+0x28>
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_SET);
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f7fe f837 	bl	8000b94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8002b26:	4622      	mov	r2, r4
	}
	else{
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(AIN2_PORT,AIN1_PIN,GPIO_PIN_SET);
 8002b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	}
}
 8002b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(AIN2_PORT,AIN1_PIN,GPIO_PIN_SET);
 8002b34:	f7fe b82e 	b.w	8000b94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b42:	f7fe f827 	bl	8000b94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_PORT,AIN1_PIN,GPIO_PIN_SET);
 8002b46:	2201      	movs	r2, #1
 8002b48:	e7ee      	b.n	8002b28 <setCorrectDirM1+0x18>
 8002b4a:	bf00      	nop
 8002b4c:	20000008 	.word	0x20000008

08002b50 <resetDirM1>:

void resetDirM1(void){
 8002b50:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b5c:	f7fe f81a 	bl	8000b94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8002b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(AIN2_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8002b6e:	f7fe b811 	b.w	8000b94 <HAL_GPIO_WritePin>
	...

08002b74 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_MspInit+0x3c>)
{
 8002b76:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	619a      	str	r2, [r3, #24]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	f002 0201 	and.w	r2, r2, #1
 8002b86:	9200      	str	r2, [sp, #0]
 8002b88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b90:	61da      	str	r2, [r3, #28]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	210f      	movs	r1, #15
 8002b9e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ba4:	f7fd fee6 	bl	8000974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba8:	b003      	add	sp, #12
 8002baa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	2214      	movs	r2, #20
{
 8002bb8:	b08b      	sub	sp, #44	; 0x2c
 8002bba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	eb0d 0002 	add.w	r0, sp, r2
 8002bc2:	f000 f947 	bl	8002e54 <memset>
  if(hadc->Instance==ADC1)
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bcc:	d142      	bne.n	8002c54 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bce:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002bd2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PB11     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bd6:	2403      	movs	r4, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bd8:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bda:	481f      	ldr	r0, [pc, #124]	; (8002c58 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002be0:	615a      	str	r2, [r3, #20]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002be8:	9201      	str	r2, [sp, #4]
 8002bea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002bf2:	615a      	str	r2, [r3, #20]
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002bfa:	9202      	str	r2, [sp, #8]
 8002bfc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c04:	615a      	str	r2, [r3, #20]
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c0c:	9203      	str	r2, [sp, #12]
 8002c0e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c16:	615a      	str	r2, [r3, #20]
 8002c18:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c1a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c20:	9304      	str	r3, [sp, #16]
 8002c22:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c24:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c26:	230f      	movs	r3, #15
 8002c28:	9305      	str	r3, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2c:	f7fd fee2 	bl	80009f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c30:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c32:	a905      	add	r1, sp, #20
 8002c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f7fd fed9 	bl	80009f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c46:	a905      	add	r1, sp, #20
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <HAL_ADC_MspInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f7fd fed0 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c54:	b00b      	add	sp, #44	; 0x2c
 8002c56:	bd30      	pop	{r4, r5, pc}
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000400 	.word	0x48000400

08002c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c60:	b510      	push	{r4, lr}
 8002c62:	4604      	mov	r4, r0
 8002c64:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c66:	2214      	movs	r2, #20
 8002c68:	2100      	movs	r1, #0
 8002c6a:	a803      	add	r0, sp, #12
 8002c6c:	f000 f8f2 	bl	8002e54 <memset>
  if(huart->Instance==USART2)
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_UART_MspInit+0x5c>)
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d11e      	bne.n	8002cb6 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c78:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c84:	61da      	str	r2, [r3, #28]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c8c:	9201      	str	r2, [sp, #4]
 8002c8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c96:	615a      	str	r2, [r3, #20]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	9302      	str	r3, [sp, #8]
 8002ca0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cae:	2307      	movs	r3, #7
 8002cb0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f7fd fe9f 	bl	80009f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cb6:	b008      	add	sp, #32
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	bf00      	nop
 8002cbc:	40004400 	.word	0x40004400

08002cc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002cc2:	4601      	mov	r1, r0
{
 8002cc4:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2019      	movs	r0, #25
 8002cca:	f7fd fe53 	bl	8000974 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8002cce:	2019      	movs	r0, #25
 8002cd0:	f7fd fe84 	bl	80009dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd4:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002cd6:	4c15      	ldr	r4, [pc, #84]	; (8002d2c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce6:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ce8:	a901      	add	r1, sp, #4
 8002cea:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002cec:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cee:	f7fe fadf 	bl	80012b0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002cf2:	f7fe fac5 	bl	8001280 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_InitTick+0x70>)
 8002cf8:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002cfa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002cfe:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <HAL_InitTick+0x74>)
 8002d02:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d06:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002d08:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8002d0a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d0c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002d0e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d10:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002d12:	f7fe fd59 	bl	80017c8 <HAL_TIM_Base_Init>
 8002d16:	b920      	cbnz	r0, 8002d22 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7fe fc2c 	bl	8001576 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002d1e:	b008      	add	sp, #32
 8002d20:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002d22:	2001      	movs	r0, #1
 8002d24:	e7fb      	b.n	8002d1e <HAL_InitTick+0x5e>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	20001ac0 	.word	0x20001ac0
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	000f4240 	.word	0x000f4240

08002d38 <NMI_Handler>:
 8002d38:	4770      	bx	lr

08002d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3a:	e7fe      	b.n	8002d3a <HardFault_Handler>

08002d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d3c:	e7fe      	b.n	8002d3c <MemManage_Handler>

08002d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3e:	e7fe      	b.n	8002d3e <BusFault_Handler>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler>

08002d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d42:	4770      	bx	lr

08002d44 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d44:	4801      	ldr	r0, [pc, #4]	; (8002d4c <TIM1_UP_TIM16_IRQHandler+0x8>)
 8002d46:	f7fe bc25 	b.w	8001594 <HAL_TIM_IRQHandler>
 8002d4a:	bf00      	nop
 8002d4c:	20001ac0 	.word	0x20001ac0

08002d50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d50:	4915      	ldr	r1, [pc, #84]	; (8002da8 <SystemInit+0x58>)
 8002d52:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <SystemInit+0x5c>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002d68:	6858      	ldr	r0, [r3, #4]
 8002d6a:	4a11      	ldr	r2, [pc, #68]	; (8002db0 <SystemInit+0x60>)
 8002d6c:	4002      	ands	r2, r0
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d82:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	f022 020f 	bic.w	r2, r2, #15
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002d94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d96:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <SystemInit+0x64>)
 8002d98:	4002      	ands	r2, r0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002da0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002da4:	608b      	str	r3, [r1, #8]
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	f87fc00c 	.word	0xf87fc00c
 8002db4:	ff00fccc 	.word	0xff00fccc

08002db8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002dbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002dbe:	e003      	b.n	8002dc8 <LoopCopyDataInit>

08002dc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dc6:	3104      	adds	r1, #4

08002dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002dc8:	480b      	ldr	r0, [pc, #44]	; (8002df8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002dcc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002dce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002dd0:	d3f6      	bcc.n	8002dc0 <CopyDataInit>
	ldr	r2, =_sbss
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002dd4:	e002      	b.n	8002ddc <LoopFillZerobss>

08002dd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002dd8:	f842 3b04 	str.w	r3, [r2], #4

08002ddc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <LoopForever+0x16>)
	cmp	r2, r3
 8002dde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002de0:	d3f9      	bcc.n	8002dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002de2:	f7ff ffb5 	bl	8002d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002de6:	f000 f811 	bl	8002e0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dea:	f7ff fd53 	bl	8002894 <main>

08002dee <LoopForever>:

LoopForever:
    b LoopForever
 8002dee:	e7fe      	b.n	8002dee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002df0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002df4:	08002fa0 	.word	0x08002fa0
	ldr	r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002dfc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002e00:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002e04:	20001b00 	.word	0x20001b00

08002e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e08:	e7fe      	b.n	8002e08 <ADC1_2_IRQHandler>
	...

08002e0c <__libc_init_array>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	4e0d      	ldr	r6, [pc, #52]	; (8002e44 <__libc_init_array+0x38>)
 8002e10:	4c0d      	ldr	r4, [pc, #52]	; (8002e48 <__libc_init_array+0x3c>)
 8002e12:	1ba4      	subs	r4, r4, r6
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	2500      	movs	r5, #0
 8002e18:	42a5      	cmp	r5, r4
 8002e1a:	d109      	bne.n	8002e30 <__libc_init_array+0x24>
 8002e1c:	4e0b      	ldr	r6, [pc, #44]	; (8002e4c <__libc_init_array+0x40>)
 8002e1e:	4c0c      	ldr	r4, [pc, #48]	; (8002e50 <__libc_init_array+0x44>)
 8002e20:	f000 f820 	bl	8002e64 <_init>
 8002e24:	1ba4      	subs	r4, r4, r6
 8002e26:	10a4      	asrs	r4, r4, #2
 8002e28:	2500      	movs	r5, #0
 8002e2a:	42a5      	cmp	r5, r4
 8002e2c:	d105      	bne.n	8002e3a <__libc_init_array+0x2e>
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}
 8002e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e34:	4798      	blx	r3
 8002e36:	3501      	adds	r5, #1
 8002e38:	e7ee      	b.n	8002e18 <__libc_init_array+0xc>
 8002e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e3e:	4798      	blx	r3
 8002e40:	3501      	adds	r5, #1
 8002e42:	e7f2      	b.n	8002e2a <__libc_init_array+0x1e>
 8002e44:	08002f98 	.word	0x08002f98
 8002e48:	08002f98 	.word	0x08002f98
 8002e4c:	08002f98 	.word	0x08002f98
 8002e50:	08002f9c 	.word	0x08002f9c

08002e54 <memset>:
 8002e54:	4402      	add	r2, r0
 8002e56:	4603      	mov	r3, r0
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <memset+0xa>
 8002e5c:	4770      	bx	lr
 8002e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e62:	e7f9      	b.n	8002e58 <memset+0x4>

08002e64 <_init>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr

08002e70 <_fini>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr
