
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005afc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005c9c  08005c9c  00015c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08005dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00001afc  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001b10  20001b10  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b836  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000033ba  00000000  00000000  0003b87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000011f0  00000000  00000000  0003ec38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001090  00000000  00000000  0003fe28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009ad5  00000000  00000000  00040eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005f5e  00000000  00000000  0004a98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000508eb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000049a8  00000000  00000000  00050968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c84 	.word	0x08005c84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005c84 	.word	0x08005c84

080001e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	4a08      	ldr	r2, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0310 	orr.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	2003      	movs	r0, #3
 80001f2:	f001 f984 	bl	80014fe <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f005 fc2a 	bl	8005a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001fc:	f005 fb4c 	bl	8005898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40022000 	.word	0x40022000

0800020c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <HAL_IncTick+0x20>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	461a      	mov	r2, r3
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <HAL_IncTick+0x24>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4413      	add	r3, r2
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <HAL_IncTick+0x24>)
 800021e:	6013      	str	r3, [r2, #0]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	200019e0 	.word	0x200019e0

08000234 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return uwTick;  
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_GetTick+0x14>)
 800023a:	681b      	ldr	r3, [r3, #0]
}
 800023c:	4618      	mov	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	200019e0 	.word	0x200019e0

0800024c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b09c      	sub	sp, #112	; 0x70
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000254:	2300      	movs	r3, #0
 8000256:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800025a:	2300      	movs	r3, #0
 800025c:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d101      	bne.n	800026c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000268:	2301      	movs	r3, #1
 800026a:	e1e2      	b.n	8000632 <HAL_ADC_Init+0x3e6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000276:	f003 0310 	and.w	r3, r3, #16
 800027a:	2b00      	cmp	r3, #0
 800027c:	d176      	bne.n	800036c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000282:	2b00      	cmp	r3, #0
 8000284:	d152      	bne.n	800032c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2200      	movs	r2, #0
 8000290:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f005 fb21 	bl	80058e8 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d13b      	bne.n	800032c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f001 f81b 	bl	80012f0 <ADC_Disable>
 80002ba:	4603      	mov	r3, r0
 80002bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d12f      	bne.n	800032c <HAL_ADC_Init+0xe0>
 80002cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d12b      	bne.n	800032c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002dc:	f023 0302 	bic.w	r3, r3, #2
 80002e0:	f043 0202 	orr.w	r2, r3, #2
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	6812      	ldr	r2, [r2, #0]
 80002f0:	6892      	ldr	r2, [r2, #8]
 80002f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80002f6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	6812      	ldr	r2, [r2, #0]
 8000300:	6892      	ldr	r2, [r2, #8]
 8000302:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000306:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000308:	4b92      	ldr	r3, [pc, #584]	; (8000554 <HAL_ADC_Init+0x308>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a92      	ldr	r2, [pc, #584]	; (8000558 <HAL_ADC_Init+0x30c>)
 800030e:	fba2 2303 	umull	r2, r3, r2, r3
 8000312:	0c9a      	lsrs	r2, r3, #18
 8000314:	4613      	mov	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	4413      	add	r3, r2
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800031e:	e002      	b.n	8000326 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	3b01      	subs	r3, #1
 8000324:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f9      	bne.n	8000320 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	2b00      	cmp	r3, #0
 8000338:	d007      	beq.n	800034a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000348:	d110      	bne.n	800036c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800034e:	f023 0312 	bic.w	r3, r3, #18
 8000352:	f043 0210 	orr.w	r2, r3, #16
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800035e:	f043 0201 	orr.w	r2, r3, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000366:	2301      	movs	r3, #1
 8000368:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	2b00      	cmp	r3, #0
 8000376:	f040 814f 	bne.w	8000618 <HAL_ADC_Init+0x3cc>
 800037a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 814a 	bne.w	8000618 <HAL_ADC_Init+0x3cc>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8142 	bne.w	8000618 <HAL_ADC_Init+0x3cc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000398:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800039c:	f043 0202 	orr.w	r2, r3, #2
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003ac:	d004      	beq.n	80003b8 <HAL_ADC_Init+0x16c>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a6a      	ldr	r2, [pc, #424]	; (800055c <HAL_ADC_Init+0x310>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d101      	bne.n	80003bc <HAL_ADC_Init+0x170>
 80003b8:	4b69      	ldr	r3, [pc, #420]	; (8000560 <HAL_ADC_Init+0x314>)
 80003ba:	e000      	b.n	80003be <HAL_ADC_Init+0x172>
 80003bc:	4b69      	ldr	r3, [pc, #420]	; (8000564 <HAL_ADC_Init+0x318>)
 80003be:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003c8:	d102      	bne.n	80003d0 <HAL_ADC_Init+0x184>
 80003ca:	4b64      	ldr	r3, [pc, #400]	; (800055c <HAL_ADC_Init+0x310>)
 80003cc:	613b      	str	r3, [r7, #16]
 80003ce:	e01a      	b.n	8000406 <HAL_ADC_Init+0x1ba>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a61      	ldr	r2, [pc, #388]	; (800055c <HAL_ADC_Init+0x310>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d103      	bne.n	80003e2 <HAL_ADC_Init+0x196>
 80003da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003de:	613b      	str	r3, [r7, #16]
 80003e0:	e011      	b.n	8000406 <HAL_ADC_Init+0x1ba>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a60      	ldr	r2, [pc, #384]	; (8000568 <HAL_ADC_Init+0x31c>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d102      	bne.n	80003f2 <HAL_ADC_Init+0x1a6>
 80003ec:	4b5f      	ldr	r3, [pc, #380]	; (800056c <HAL_ADC_Init+0x320>)
 80003ee:	613b      	str	r3, [r7, #16]
 80003f0:	e009      	b.n	8000406 <HAL_ADC_Init+0x1ba>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a5d      	ldr	r2, [pc, #372]	; (800056c <HAL_ADC_Init+0x320>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d102      	bne.n	8000402 <HAL_ADC_Init+0x1b6>
 80003fc:	4b5a      	ldr	r3, [pc, #360]	; (8000568 <HAL_ADC_Init+0x31c>)
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	e001      	b.n	8000406 <HAL_ADC_Init+0x1ba>
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f003 0303 	and.w	r3, r3, #3
 8000410:	2b01      	cmp	r3, #1
 8000412:	d108      	bne.n	8000426 <HAL_ADC_Init+0x1da>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	2b01      	cmp	r3, #1
 8000420:	d101      	bne.n	8000426 <HAL_ADC_Init+0x1da>
 8000422:	2301      	movs	r3, #1
 8000424:	e000      	b.n	8000428 <HAL_ADC_Init+0x1dc>
 8000426:	2300      	movs	r3, #0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d11c      	bne.n	8000466 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800042c:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800042e:	2b00      	cmp	r3, #0
 8000430:	d010      	beq.n	8000454 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	f003 0303 	and.w	r3, r3, #3
 800043a:	2b01      	cmp	r3, #1
 800043c:	d107      	bne.n	800044e <HAL_ADC_Init+0x202>
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	2b01      	cmp	r3, #1
 8000448:	d101      	bne.n	800044e <HAL_ADC_Init+0x202>
 800044a:	2301      	movs	r3, #1
 800044c:	e000      	b.n	8000450 <HAL_ADC_Init+0x204>
 800044e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000450:	2b00      	cmp	r3, #0
 8000452:	d108      	bne.n	8000466 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	431a      	orrs	r2, r3
 8000462:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000464:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	035a      	lsls	r2, r3, #13
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000470:	2b01      	cmp	r3, #1
 8000472:	d002      	beq.n	800047a <HAL_ADC_Init+0x22e>
 8000474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000478:	e000      	b.n	800047c <HAL_ADC_Init+0x230>
 800047a:	2300      	movs	r3, #0
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	431a      	orrs	r2, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800048c:	4313      	orrs	r3, r2
 800048e:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000494:	2b01      	cmp	r3, #1
 8000496:	d11b      	bne.n	80004d0 <HAL_ADC_Init+0x284>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	69db      	ldr	r3, [r3, #28]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d109      	bne.n	80004b4 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a4:	3b01      	subs	r3, #1
 80004a6:	045a      	lsls	r2, r3, #17
 80004a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80004aa:	4313      	orrs	r3, r2
 80004ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80004b2:	e00d      	b.n	80004d0 <HAL_ADC_Init+0x284>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80004bc:	f043 0220 	orr.w	r2, r3, #32
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004c8:	f043 0201 	orr.w	r2, r3, #1
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d055      	beq.n	8000584 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a22      	ldr	r2, [pc, #136]	; (8000568 <HAL_ADC_Init+0x31c>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d004      	beq.n	80004ec <HAL_ADC_Init+0x2a0>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a21      	ldr	r2, [pc, #132]	; (800056c <HAL_ADC_Init+0x320>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d141      	bne.n	8000570 <HAL_ADC_Init+0x324>
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f0:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80004f4:	d02a      	beq.n	800054c <HAL_ADC_Init+0x300>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004fe:	d022      	beq.n	8000546 <HAL_ADC_Init+0x2fa>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000504:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000508:	d01a      	beq.n	8000540 <HAL_ADC_Init+0x2f4>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000512:	d012      	beq.n	800053a <HAL_ADC_Init+0x2ee>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000518:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800051c:	d00a      	beq.n	8000534 <HAL_ADC_Init+0x2e8>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000526:	d002      	beq.n	800052e <HAL_ADC_Init+0x2e2>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052c:	e024      	b.n	8000578 <HAL_ADC_Init+0x32c>
 800052e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000532:	e021      	b.n	8000578 <HAL_ADC_Init+0x32c>
 8000534:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000538:	e01e      	b.n	8000578 <HAL_ADC_Init+0x32c>
 800053a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800053e:	e01b      	b.n	8000578 <HAL_ADC_Init+0x32c>
 8000540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000544:	e018      	b.n	8000578 <HAL_ADC_Init+0x32c>
 8000546:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800054a:	e015      	b.n	8000578 <HAL_ADC_Init+0x32c>
 800054c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000550:	e012      	b.n	8000578 <HAL_ADC_Init+0x32c>
 8000552:	bf00      	nop
 8000554:	20000010 	.word	0x20000010
 8000558:	431bde83 	.word	0x431bde83
 800055c:	50000100 	.word	0x50000100
 8000560:	50000300 	.word	0x50000300
 8000564:	50000700 	.word	0x50000700
 8000568:	50000400 	.word	0x50000400
 800056c:	50000500 	.word	0x50000500
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800057c:	4313      	orrs	r3, r2
 800057e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000580:	4313      	orrs	r3, r2
 8000582:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	f003 030c 	and.w	r3, r3, #12
 800058e:	2b00      	cmp	r3, #0
 8000590:	d113      	bne.n	80005ba <HAL_ADC_Init+0x36e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005a0:	f023 0302 	bic.w	r3, r3, #2
 80005a4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	039a      	lsls	r2, r3, #14
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4313      	orrs	r3, r2
 80005b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80005b6:	4313      	orrs	r3, r2
 80005b8:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68d9      	ldr	r1, [r3, #12]
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <HAL_ADC_Init+0x3f0>)
 80005c6:	400b      	ands	r3, r1
 80005c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80005ca:	430b      	orrs	r3, r1
 80005cc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	691b      	ldr	r3, [r3, #16]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d10c      	bne.n	80005f0 <HAL_ADC_Init+0x3a4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80005e0:	f022 010f 	bic.w	r1, r2, #15
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	6a12      	ldr	r2, [r2, #32]
 80005e8:	3a01      	subs	r2, #1
 80005ea:	430a      	orrs	r2, r1
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	e007      	b.n	8000600 <HAL_ADC_Init+0x3b4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	6812      	ldr	r2, [r2, #0]
 80005f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80005fa:	f022 020f 	bic.w	r2, r2, #15
 80005fe:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	f023 0303 	bic.w	r3, r3, #3
 800060e:	f043 0201 	orr.w	r2, r3, #1
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	645a      	str	r2, [r3, #68]	; 0x44
 8000616:	e00a      	b.n	800062e <HAL_ADC_Init+0x3e2>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061c:	f023 0312 	bic.w	r3, r3, #18
 8000620:	f043 0210 	orr.w	r2, r3, #16
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000628:	2301      	movs	r3, #1
 800062a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800062e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000632:	4618      	mov	r0, r3
 8000634:	3770      	adds	r7, #112	; 0x70
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	fff0c007 	.word	0xfff0c007

08000640 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	2b00      	cmp	r3, #0
 8000658:	f040 80f9 	bne.w	800084e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000662:	2b01      	cmp	r3, #1
 8000664:	d101      	bne.n	800066a <HAL_ADC_Start+0x2a>
 8000666:	2302      	movs	r3, #2
 8000668:	e0f4      	b.n	8000854 <HAL_ADC_Start+0x214>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 fdde 	bl	8001234 <ADC_Enable>
 8000678:	4603      	mov	r3, r0
 800067a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b00      	cmp	r3, #0
 8000680:	f040 80e0 	bne.w	8000844 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000688:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800068c:	f023 0301 	bic.w	r3, r3, #1
 8000690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006a0:	d004      	beq.n	80006ac <HAL_ADC_Start+0x6c>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a6d      	ldr	r2, [pc, #436]	; (800085c <HAL_ADC_Start+0x21c>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d106      	bne.n	80006ba <HAL_ADC_Start+0x7a>
 80006ac:	4b6c      	ldr	r3, [pc, #432]	; (8000860 <HAL_ADC_Start+0x220>)
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 031f 	and.w	r3, r3, #31
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d010      	beq.n	80006da <HAL_ADC_Start+0x9a>
 80006b8:	e005      	b.n	80006c6 <HAL_ADC_Start+0x86>
 80006ba:	4b6a      	ldr	r3, [pc, #424]	; (8000864 <HAL_ADC_Start+0x224>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d009      	beq.n	80006da <HAL_ADC_Start+0x9a>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006ce:	d004      	beq.n	80006da <HAL_ADC_Start+0x9a>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a64      	ldr	r2, [pc, #400]	; (8000868 <HAL_ADC_Start+0x228>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d115      	bne.n	8000706 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d036      	beq.n	8000762 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000704:	e02d      	b.n	8000762 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800071a:	d004      	beq.n	8000726 <HAL_ADC_Start+0xe6>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a4e      	ldr	r2, [pc, #312]	; (800085c <HAL_ADC_Start+0x21c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d10a      	bne.n	800073c <HAL_ADC_Start+0xfc>
 8000726:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000730:	2b00      	cmp	r3, #0
 8000732:	bf14      	ite	ne
 8000734:	2301      	movne	r3, #1
 8000736:	2300      	moveq	r3, #0
 8000738:	b2db      	uxtb	r3, r3
 800073a:	e008      	b.n	800074e <HAL_ADC_Start+0x10e>
 800073c:	4b4a      	ldr	r3, [pc, #296]	; (8000868 <HAL_ADC_Start+0x228>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000744:	2b00      	cmp	r3, #0
 8000746:	bf14      	ite	ne
 8000748:	2301      	movne	r3, #1
 800074a:	2300      	moveq	r3, #0
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d007      	beq.n	8000762 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800075a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800076e:	d106      	bne.n	800077e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000774:	f023 0206 	bic.w	r2, r3, #6
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	649a      	str	r2, [r3, #72]	; 0x48
 800077c:	e002      	b.n	8000784 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	221c      	movs	r2, #28
 8000792:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800079c:	d004      	beq.n	80007a8 <HAL_ADC_Start+0x168>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a2e      	ldr	r2, [pc, #184]	; (800085c <HAL_ADC_Start+0x21c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d106      	bne.n	80007b6 <HAL_ADC_Start+0x176>
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <HAL_ADC_Start+0x220>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d03e      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 80007b4:	e005      	b.n	80007c2 <HAL_ADC_Start+0x182>
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <HAL_ADC_Start+0x224>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	f003 031f 	and.w	r3, r3, #31
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d037      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007ca:	d004      	beq.n	80007d6 <HAL_ADC_Start+0x196>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a22      	ldr	r2, [pc, #136]	; (800085c <HAL_ADC_Start+0x21c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <HAL_ADC_Start+0x1a4>
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <HAL_ADC_Start+0x220>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	f003 031f 	and.w	r3, r3, #31
 80007de:	2b05      	cmp	r3, #5
 80007e0:	d027      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 80007e2:	e005      	b.n	80007f0 <HAL_ADC_Start+0x1b0>
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_ADC_Start+0x224>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	2b05      	cmp	r3, #5
 80007ee:	d020      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007f8:	d004      	beq.n	8000804 <HAL_ADC_Start+0x1c4>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_ADC_Start+0x21c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <HAL_ADC_Start+0x1d2>
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_ADC_Start+0x220>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	2b09      	cmp	r3, #9
 800080e:	d010      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 8000810:	e005      	b.n	800081e <HAL_ADC_Start+0x1de>
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <HAL_ADC_Start+0x224>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f003 031f 	and.w	r3, r3, #31
 800081a:	2b09      	cmp	r3, #9
 800081c:	d009      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000826:	d004      	beq.n	8000832 <HAL_ADC_Start+0x1f2>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_ADC_Start+0x228>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10f      	bne.n	8000852 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	6812      	ldr	r2, [r2, #0]
 800083a:	6892      	ldr	r2, [r2, #8]
 800083c:	f042 0204 	orr.w	r2, r2, #4
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	e006      	b.n	8000852 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800084c:	e001      	b.n	8000852 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800084e:	2302      	movs	r3, #2
 8000850:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	50000100 	.word	0x50000100
 8000860:	50000300 	.word	0x50000300
 8000864:	50000700 	.word	0x50000700
 8000868:	50000400 	.word	0x50000400

0800086c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	2b08      	cmp	r3, #8
 8000880:	d102      	bne.n	8000888 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000882:	2308      	movs	r3, #8
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	e03a      	b.n	80008fe <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000890:	d004      	beq.n	800089c <HAL_ADC_PollForConversion+0x30>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a6e      	ldr	r2, [pc, #440]	; (8000a50 <HAL_ADC_PollForConversion+0x1e4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d101      	bne.n	80008a0 <HAL_ADC_PollForConversion+0x34>
 800089c:	4b6d      	ldr	r3, [pc, #436]	; (8000a54 <HAL_ADC_PollForConversion+0x1e8>)
 800089e:	e000      	b.n	80008a2 <HAL_ADC_PollForConversion+0x36>
 80008a0:	4b6d      	ldr	r3, [pc, #436]	; (8000a58 <HAL_ADC_PollForConversion+0x1ec>)
 80008a2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f003 031f 	and.w	r3, r3, #31
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d112      	bne.n	80008d6 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d11d      	bne.n	80008fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f043 0220 	orr.w	r2, r3, #32
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e0b8      	b.n	8000a48 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00b      	beq.n	80008fa <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f043 0220 	orr.w	r2, r3, #32
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e0a6      	b.n	8000a48 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80008fa:	230c      	movs	r3, #12
 80008fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000906:	d004      	beq.n	8000912 <HAL_ADC_PollForConversion+0xa6>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <HAL_ADC_PollForConversion+0x1e4>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <HAL_ADC_PollForConversion+0xb4>
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <HAL_ADC_PollForConversion+0x1e8>)
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f003 031f 	and.w	r3, r3, #31
 800091a:	2b00      	cmp	r3, #0
 800091c:	d010      	beq.n	8000940 <HAL_ADC_PollForConversion+0xd4>
 800091e:	e005      	b.n	800092c <HAL_ADC_PollForConversion+0xc0>
 8000920:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <HAL_ADC_PollForConversion+0x1ec>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	f003 031f 	and.w	r3, r3, #31
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <HAL_ADC_PollForConversion+0xd4>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000934:	d004      	beq.n	8000940 <HAL_ADC_PollForConversion+0xd4>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <HAL_ADC_PollForConversion+0x1f0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d104      	bne.n	800094a <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	e00f      	b.n	800096a <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000952:	d004      	beq.n	800095e <HAL_ADC_PollForConversion+0xf2>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <HAL_ADC_PollForConversion+0x1e4>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d102      	bne.n	8000964 <HAL_ADC_PollForConversion+0xf8>
 800095e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000962:	e000      	b.n	8000966 <HAL_ADC_PollForConversion+0xfa>
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <HAL_ADC_PollForConversion+0x1f0>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800096a:	f7ff fc63 	bl	8000234 <HAL_GetTick>
 800096e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000970:	e01a      	b.n	80009a8 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000978:	d016      	beq.n	80009a8 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d007      	beq.n	8000990 <HAL_ADC_PollForConversion+0x124>
 8000980:	f7ff fc58 	bl	8000234 <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	1ad2      	subs	r2, r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d90b      	bls.n	80009a8 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000994:	f043 0204 	orr.w	r2, r3, #4
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 80009a4:	2303      	movs	r3, #3
 80009a6:	e04f      	b.n	8000a48 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0dd      	beq.n	8000972 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d131      	bne.n	8000a34 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d12c      	bne.n	8000a34 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f003 0308 	and.w	r3, r3, #8
 80009e4:	2b08      	cmp	r3, #8
 80009e6:	d125      	bne.n	8000a34 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d112      	bne.n	8000a1c <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d112      	bne.n	8000a34 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f043 0201 	orr.w	r2, r3, #1
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	645a      	str	r2, [r3, #68]	; 0x44
 8000a1a:	e00b      	b.n	8000a34 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a20:	f043 0220 	orr.w	r2, r3, #32
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2c:	f043 0201 	orr.w	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	50000100 	.word	0x50000100
 8000a54:	50000300 	.word	0x50000300
 8000a58:	50000700 	.word	0x50000700
 8000a5c:	50000400 	.word	0x50000400

08000a60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
	...

08000a7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000a7c:	b490      	push	{r4, r7}
 8000a7e:	b09c      	sub	sp, #112	; 0x70
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d101      	bne.n	8000a9e <HAL_ADC_ConfigChannel+0x22>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e2cd      	b.n	800103a <HAL_ADC_ConfigChannel+0x5be>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f040 82b1 	bne.w	8001018 <HAL_ADC_ConfigChannel+0x59c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d81c      	bhi.n	8000af8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6819      	ldr	r1, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	231f      	movs	r3, #31
 8000ad8:	4093      	lsls	r3, r2
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4018      	ands	r0, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681c      	ldr	r4, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	4413      	add	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa04 f303 	lsl.w	r3, r4, r3
 8000af2:	4303      	orrs	r3, r0
 8000af4:	630b      	str	r3, [r1, #48]	; 0x30
 8000af6:	e063      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b09      	cmp	r3, #9
 8000afe:	d81e      	bhi.n	8000b3e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	3b1e      	subs	r3, #30
 8000b18:	221f      	movs	r2, #31
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	4018      	ands	r0, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681c      	ldr	r4, [r3, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	3b1e      	subs	r3, #30
 8000b34:	fa04 f303 	lsl.w	r3, r4, r3
 8000b38:	4303      	orrs	r3, r0
 8000b3a:	634b      	str	r3, [r1, #52]	; 0x34
 8000b3c:	e040      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b0e      	cmp	r3, #14
 8000b44:	d81e      	bhi.n	8000b84 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6819      	ldr	r1, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	3b3c      	subs	r3, #60	; 0x3c
 8000b5e:	221f      	movs	r2, #31
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4018      	ands	r0, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681c      	ldr	r4, [r3, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	3b3c      	subs	r3, #60	; 0x3c
 8000b7a:	fa04 f303 	lsl.w	r3, r4, r3
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	638b      	str	r3, [r1, #56]	; 0x38
 8000b82:	e01d      	b.n	8000bc0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	3b5a      	subs	r3, #90	; 0x5a
 8000b9c:	221f      	movs	r2, #31
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	4018      	ands	r0, r3
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681c      	ldr	r4, [r3, #0]
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	3b5a      	subs	r3, #90	; 0x5a
 8000bb8:	fa04 f303 	lsl.w	r3, r4, r3
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	f003 030c 	and.w	r3, r3, #12
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 80e5 	bne.w	8000d9a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	d91c      	bls.n	8000c12 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6819      	ldr	r1, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6998      	ldr	r0, [r3, #24]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	3b1e      	subs	r3, #30
 8000bee:	2207      	movs	r2, #7
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4018      	ands	r0, r3
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	689c      	ldr	r4, [r3, #8]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	3b1e      	subs	r3, #30
 8000c08:	fa04 f303 	lsl.w	r3, r4, r3
 8000c0c:	4303      	orrs	r3, r0
 8000c0e:	618b      	str	r3, [r1, #24]
 8000c10:	e019      	b.n	8000c46 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6958      	ldr	r0, [r3, #20]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	2207      	movs	r2, #7
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	4018      	ands	r0, r3
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	689c      	ldr	r4, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	fa04 f303 	lsl.w	r3, r4, r3
 8000c42:	4303      	orrs	r3, r0
 8000c44:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	695a      	ldr	r2, [r3, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d84f      	bhi.n	8000d08 <HAL_ADC_ConfigChannel+0x28c>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <HAL_ADC_ConfigChannel+0x1f4>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000ca3 	.word	0x08000ca3
 8000c78:	08000cc5 	.word	0x08000cc5
 8000c7c:	08000ce7 	.word	0x08000ce7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8000c8a:	4ba1      	ldr	r3, [pc, #644]	; (8000f10 <HAL_ADC_ConfigChannel+0x494>)
 8000c8c:	400b      	ands	r3, r1
 8000c8e:	6839      	ldr	r1, [r7, #0]
 8000c90:	6809      	ldr	r1, [r1, #0]
 8000c92:	0688      	lsls	r0, r1, #26
 8000c94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000c96:	4301      	orrs	r1, r0
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c9e:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ca0:	e07b      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8000cac:	4b98      	ldr	r3, [pc, #608]	; (8000f10 <HAL_ADC_ConfigChannel+0x494>)
 8000cae:	400b      	ands	r3, r1
 8000cb0:	6839      	ldr	r1, [r7, #0]
 8000cb2:	6809      	ldr	r1, [r1, #0]
 8000cb4:	0688      	lsls	r0, r1, #26
 8000cb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000cb8:	4301      	orrs	r1, r0
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc0:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000cc2:	e06a      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8000cce:	4b90      	ldr	r3, [pc, #576]	; (8000f10 <HAL_ADC_ConfigChannel+0x494>)
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	6839      	ldr	r1, [r7, #0]
 8000cd4:	6809      	ldr	r1, [r1, #0]
 8000cd6:	0688      	lsls	r0, r1, #26
 8000cd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000cda:	4301      	orrs	r1, r0
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ce2:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ce4:	e059      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8000cf0:	4b87      	ldr	r3, [pc, #540]	; (8000f10 <HAL_ADC_ConfigChannel+0x494>)
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	6839      	ldr	r1, [r7, #0]
 8000cf6:	6809      	ldr	r1, [r1, #0]
 8000cf8:	0688      	lsls	r0, r1, #26
 8000cfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000cfc:	4301      	orrs	r1, r0
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d04:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d06:	e048      	b.n	8000d9a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	069b      	lsls	r3, r3, #26
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d107      	bne.n	8000d2c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000d26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d2a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	069b      	lsls	r3, r3, #26
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d107      	bne.n	8000d50 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8000d4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d4e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	069b      	lsls	r3, r3, #26
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d107      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	6812      	ldr	r2, [r2, #0]
 8000d6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000d6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d72:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	069b      	lsls	r3, r3, #26
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d107      	bne.n	8000d98 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000d92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d96:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000d98:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d108      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x33e>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x33e>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x340>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 8136 	bne.w	800102e <HAL_ADC_ConfigChannel+0x5b2>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d00f      	beq.n	8000dea <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	6812      	ldr	r2, [r2, #0]
 8000dd2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	2001      	movs	r0, #1
 8000ddc:	fa00 f202 	lsl.w	r2, r0, r2
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	400a      	ands	r2, r1
 8000de4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000de8:	e04a      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8000df6:	683a      	ldr	r2, [r7, #0]
 8000df8:	6812      	ldr	r2, [r2, #0]
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	fa00 f202 	lsl.w	r2, r0, r2
 8000e00:	430a      	orrs	r2, r1
 8000e02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b09      	cmp	r3, #9
 8000e0c:	d91c      	bls.n	8000e48 <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6998      	ldr	r0, [r3, #24]
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	3b1b      	subs	r3, #27
 8000e24:	2207      	movs	r2, #7
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4018      	ands	r0, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689c      	ldr	r4, [r3, #8]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b1b      	subs	r3, #27
 8000e3e:	fa04 f303 	lsl.w	r3, r4, r3
 8000e42:	4303      	orrs	r3, r0
 8000e44:	618b      	str	r3, [r1, #24]
 8000e46:	e01b      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6958      	ldr	r0, [r3, #20]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	2207      	movs	r2, #7
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4018      	ands	r0, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	689c      	ldr	r4, [r3, #8]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	fa04 f303 	lsl.w	r3, r4, r3
 8000e7c:	4303      	orrs	r3, r0
 8000e7e:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e88:	d004      	beq.n	8000e94 <HAL_ADC_ConfigChannel+0x418>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <HAL_ADC_ConfigChannel+0x498>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x41c>
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <HAL_ADC_ConfigChannel+0x49c>)
 8000e96:	e000      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x41e>
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_ADC_ConfigChannel+0x4a0>)
 8000e9a:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b10      	cmp	r3, #16
 8000ea2:	d105      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d015      	beq.n	8000edc <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000eb4:	2b11      	cmp	r3, #17
 8000eb6:	d105      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x448>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00b      	beq.n	8000edc <HAL_ADC_ConfigChannel+0x460>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000ec8:	2b12      	cmp	r3, #18
 8000eca:	f040 80b0 	bne.w	800102e <HAL_ADC_ConfigChannel+0x5b2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 80a9 	bne.w	800102e <HAL_ADC_ConfigChannel+0x5b2>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ee4:	d102      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x470>
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_ADC_ConfigChannel+0x498>)
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e027      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x4c0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_ADC_ConfigChannel+0x498>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d103      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x482>
 8000ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	e01e      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x4c0>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_ADC_ConfigChannel+0x4a4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d10f      	bne.n	8000f28 <HAL_ADC_ConfigChannel+0x4ac>
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_ADC_ConfigChannel+0x4a8>)
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	e016      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x4c0>
 8000f0e:	bf00      	nop
 8000f10:	83fff000 	.word	0x83fff000
 8000f14:	50000100 	.word	0x50000100
 8000f18:	50000300 	.word	0x50000300
 8000f1c:	50000700 	.word	0x50000700
 8000f20:	50000400 	.word	0x50000400
 8000f24:	50000500 	.word	0x50000500
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a45      	ldr	r2, [pc, #276]	; (8001044 <HAL_ADC_ConfigChannel+0x5c8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d102      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x4bc>
 8000f32:	4b45      	ldr	r3, [pc, #276]	; (8001048 <HAL_ADC_ConfigChannel+0x5cc>)
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	e001      	b.n	8000f3c <HAL_ADC_ConfigChannel+0x4c0>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d108      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x4e0>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_ConfigChannel+0x4e0>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_ADC_ConfigChannel+0x4e2>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d150      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x588>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f62:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d010      	beq.n	8000f8a <HAL_ADC_ConfigChannel+0x50e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d107      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x508>
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x508>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x50a>
 8000f84:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d13c      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x588>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d11d      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x552>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9a:	d118      	bne.n	8000fce <HAL_ADC_ConfigChannel+0x552>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fa6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa8:	4b28      	ldr	r3, [pc, #160]	; (800104c <HAL_ADC_ConfigChannel+0x5d0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <HAL_ADC_ConfigChannel+0x5d4>)
 8000fae:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb2:	0c9a      	lsrs	r2, r3, #18
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000fbe:	e002      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x54a>
          {
            wait_loop_index--;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f9      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x544>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000fcc:	e02e      	b.n	800102c <HAL_ADC_ConfigChannel+0x5b0>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b11      	cmp	r3, #17
 8000fd4:	d10b      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x572>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fde:	d106      	bne.n	8000fee <HAL_ADC_ConfigChannel+0x572>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000fec:	e01e      	b.n	800102c <HAL_ADC_ConfigChannel+0x5b0>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d11a      	bne.n	800102c <HAL_ADC_ConfigChannel+0x5b0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001000:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001002:	e013      	b.n	800102c <HAL_ADC_ConfigChannel+0x5b0>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001008:	f043 0220 	orr.w	r2, r3, #32
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001016:	e00a      	b.n	800102e <HAL_ADC_ConfigChannel+0x5b2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	f043 0220 	orr.w	r2, r3, #32
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800102a:	e000      	b.n	800102e <HAL_ADC_ConfigChannel+0x5b2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800102c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800103a:	4618      	mov	r0, r3
 800103c:	3770      	adds	r7, #112	; 0x70
 800103e:	46bd      	mov	sp, r7
 8001040:	bc90      	pop	{r4, r7}
 8001042:	4770      	bx	lr
 8001044:	50000500 	.word	0x50000500
 8001048:	50000400 	.word	0x50000400
 800104c:	20000010 	.word	0x20000010
 8001050:	431bde83 	.word	0x431bde83

08001054 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001054:	b480      	push	{r7}
 8001056:	b09b      	sub	sp, #108	; 0x6c
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800106c:	d102      	bne.n	8001074 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800106e:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e01a      	b.n	80010aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a69      	ldr	r2, [pc, #420]	; (8001220 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d103      	bne.n	8001086 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800107e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e011      	b.n	80010aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a66      	ldr	r2, [pc, #408]	; (8001224 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d102      	bne.n	8001096 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001090:	4b65      	ldr	r3, [pc, #404]	; (8001228 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e009      	b.n	80010aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a63      	ldr	r2, [pc, #396]	; (8001228 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d102      	bne.n	80010a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e001      	b.n	80010aa <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0af      	b.n	8001214 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80010be:	2302      	movs	r3, #2
 80010c0:	e0a8      	b.n	8001214 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f040 808c 	bne.w	80011f2 <HAL_ADCEx_MultiModeConfigChannel+0x19e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 8085 	bne.w	80011f2 <HAL_ADCEx_MultiModeConfigChannel+0x19e>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f0:	d004      	beq.n	80010fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d101      	bne.n	8001100 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80010fe:	e000      	b.n	8001102 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001100:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001102:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d03f      	beq.n	800118c <HAL_ADCEx_MultiModeConfigChannel+0x138>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800110c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	035b      	lsls	r3, r3, #13
 800111e:	430b      	orrs	r3, r1
 8001120:	431a      	orrs	r2, r3
 8001122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001124:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001146:	2300      	movs	r3, #0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d15c      	bne.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d107      	bne.n	8001168 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ADCEx_MultiModeConfigChannel+0x114>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001168:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d14b      	bne.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800116e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001176:	f023 030f 	bic.w	r3, r3, #15
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	6811      	ldr	r1, [r2, #0]
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	6892      	ldr	r2, [r2, #8]
 8001182:	430a      	orrs	r2, r1
 8001184:	431a      	orrs	r2, r3
 8001186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001188:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800118a:	e03c      	b.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800118c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001196:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 80011b4:	2301      	movs	r3, #1
 80011b6:	e000      	b.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80011b8:	2300      	movs	r3, #0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d123      	bne.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d107      	bne.n	80011da <HAL_ADCEx_MultiModeConfigChannel+0x186>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADCEx_MultiModeConfigChannel+0x186>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80011da:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d112      	bne.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80011e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011e8:	f023 030f 	bic.w	r3, r3, #15
 80011ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80011ee:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80011f0:	e009      	b.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x1b2>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f043 0220 	orr.w	r2, r3, #32
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001204:	e000      	b.n	8001208 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001206:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001210:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001214:	4618      	mov	r0, r3
 8001216:	376c      	adds	r7, #108	; 0x6c
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	50000100 	.word	0x50000100
 8001224:	50000400 	.word	0x50000400
 8001228:	50000500 	.word	0x50000500
 800122c:	50000300 	.word	0x50000300
 8001230:	50000700 	.word	0x50000700

08001234 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <ADC_Enable+0x2c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <ADC_Enable+0x2c>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <ADC_Enable+0x2e>
 8001260:	2300      	movs	r3, #0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d13c      	bne.n	80012e0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <ADC_Enable+0xb8>)
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00d      	beq.n	8001290 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	f043 0210 	orr.w	r2, r3, #16
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e028      	b.n	80012e2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	6892      	ldr	r2, [r2, #8]
 800129a:	f042 0201 	orr.w	r2, r2, #1
 800129e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80012a0:	f7fe ffc8 	bl	8000234 <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012a6:	e014      	b.n	80012d2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012a8:	f7fe ffc4 	bl	8000234 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d90d      	bls.n	80012d2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e007      	b.n	80012e2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1e3      	bne.n	80012a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	8000003f 	.word	0x8000003f

080012f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <ADC_Disable+0x2c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <ADC_Disable+0x2c>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <ADC_Disable+0x2e>
 800131c:	2300      	movs	r3, #0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d040      	beq.n	80013a4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 030d 	and.w	r3, r3, #13
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10f      	bne.n	8001350 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	6892      	ldr	r2, [r2, #8]
 800133a:	f042 0202 	orr.w	r2, r2, #2
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2203      	movs	r2, #3
 8001346:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001348:	f7fe ff74 	bl	8000234 <HAL_GetTick>
 800134c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800134e:	e022      	b.n	8001396 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	f043 0210 	orr.w	r2, r3, #16
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001360:	f043 0201 	orr.w	r2, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e01c      	b.n	80013a6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800136c:	f7fe ff62 	bl	8000234 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d90d      	bls.n	8001396 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f043 0210 	orr.w	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e007      	b.n	80013a6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d0e3      	beq.n	800136c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800141e:	4909      	ldr	r1, [pc, #36]	; (8001444 <NVIC_EnableIRQ+0x30>)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	095b      	lsrs	r3, r3, #5
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	f002 021f 	and.w	r2, r2, #31
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	da0b      	bge.n	8001474 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	490d      	ldr	r1, [pc, #52]	; (8001494 <NVIC_SetPriority+0x4c>)
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	3b04      	subs	r3, #4
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001472:	e009      	b.n	8001488 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001474:	4908      	ldr	r1, [pc, #32]	; (8001498 <NVIC_SetPriority+0x50>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	0112      	lsls	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	440b      	add	r3, r1
 8001484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00
 8001498:	e000e100 	.word	0xe000e100

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	2201      	movs	r2, #1
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	401a      	ands	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e2:	2101      	movs	r1, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	1e59      	subs	r1, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ff52 	bl	80013b0 <NVIC_SetPriorityGrouping>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001526:	f7ff ff67 	bl	80013f8 <NVIC_GetPriorityGrouping>
 800152a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff ffb3 	bl	800149c <NVIC_EncodePriority>
 8001536:	4602      	mov	r2, r0
 8001538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153c:	4611      	mov	r1, r2
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff82 	bl	8001448 <NVIC_SetPriority>
}
 8001544:	bf00      	nop
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff5a 	bl	8001414 <NVIC_EnableIRQ>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b087      	sub	sp, #28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800157e:	e160      	b.n	8001842 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2101      	movs	r1, #1
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8152 	beq.w	800183c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x40>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d123      	bne.n	80015f0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	08da      	lsrs	r2, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3208      	adds	r2, #8
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	08da      	lsrs	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3208      	adds	r2, #8
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	2203      	movs	r2, #3
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0203 	and.w	r2, r3, #3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d00b      	beq.n	8001644 <HAL_GPIO_Init+0xdc>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001638:	2b11      	cmp	r3, #17
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b12      	cmp	r3, #18
 8001642:	d130      	bne.n	80016a6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2203      	movs	r2, #3
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167a:	2201      	movs	r2, #1
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	f003 0201 	and.w	r2, r3, #1
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80ac 	beq.w	800183c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e4:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_GPIO_Init+0x2f8>)
 80016e6:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_GPIO_Init+0x2f8>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <HAL_GPIO_Init+0x2f8>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80016fc:	4a59      	ldr	r2, [pc, #356]	; (8001864 <HAL_GPIO_Init+0x2fc>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001726:	d025      	beq.n	8001774 <HAL_GPIO_Init+0x20c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_GPIO_Init+0x300>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d01f      	beq.n	8001770 <HAL_GPIO_Init+0x208>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a4e      	ldr	r2, [pc, #312]	; (800186c <HAL_GPIO_Init+0x304>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d019      	beq.n	800176c <HAL_GPIO_Init+0x204>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a4d      	ldr	r2, [pc, #308]	; (8001870 <HAL_GPIO_Init+0x308>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d013      	beq.n	8001768 <HAL_GPIO_Init+0x200>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <HAL_GPIO_Init+0x30c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00d      	beq.n	8001764 <HAL_GPIO_Init+0x1fc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_GPIO_Init+0x310>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d007      	beq.n	8001760 <HAL_GPIO_Init+0x1f8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_GPIO_Init+0x314>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d101      	bne.n	800175c <HAL_GPIO_Init+0x1f4>
 8001758:	2306      	movs	r3, #6
 800175a:	e00c      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 800175c:	2307      	movs	r3, #7
 800175e:	e00a      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 8001760:	2305      	movs	r3, #5
 8001762:	e008      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 8001764:	2304      	movs	r3, #4
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 8001768:	2303      	movs	r3, #3
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x20e>
 8001774:	2300      	movs	r3, #0
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001786:	4937      	ldr	r1, [pc, #220]	; (8001864 <HAL_GPIO_Init+0x2fc>)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001794:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <HAL_GPIO_Init+0x318>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017b8:	4a31      	ldr	r2, [pc, #196]	; (8001880 <HAL_GPIO_Init+0x318>)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017be:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_GPIO_Init+0x318>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017e2:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x318>)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_GPIO_Init+0x318>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800180c:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <HAL_GPIO_Init+0x318>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001812:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x318>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_GPIO_Init+0x318>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	f47f ae97 	bne.w	8001580 <HAL_GPIO_Init+0x18>
  }
}
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	48000c00 	.word	0x48000c00
 8001874:	48001000 	.word	0x48001000
 8001878:	48001400 	.word	0x48001400
 800187c:	48001800 	.word	0x48001800
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f000 beda 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8164 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018de:	4bb0      	ldr	r3, [pc, #704]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	d00c      	beq.n	8001904 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ea:	4bad      	ldr	r3, [pc, #692]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d15a      	bne.n	80019ac <HAL_RCC_OscConfig+0xf8>
 80018f6:	4baa      	ldr	r3, [pc, #680]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d153      	bne.n	80019ac <HAL_RCC_OscConfig+0xf8>
 8001904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001908:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001918:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0x82>
 8001930:	4b9b      	ldr	r3, [pc, #620]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0xae>
 8001936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800194a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001952:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800195e:	4b90      	ldr	r3, [pc, #576]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001966:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800196a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800196e:	fa92 f2a2 	rbit	r2, r2
 8001972:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001976:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800197a:	fab2 f282 	clz	r2, r2
 800197e:	b252      	sxtb	r2, r2
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	b252      	sxtb	r2, r2
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	f002 021f 	and.w	r2, r2, #31
 800198c:	2101      	movs	r1, #1
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8105 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x2f0>
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 80ff 	bne.w	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f000 be6b 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x112>
 80019b8:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019ba:	4b79      	ldr	r3, [pc, #484]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e030      	b.n	8001a28 <HAL_RCC_OscConfig+0x174>
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10c      	bne.n	80019ea <HAL_RCC_OscConfig+0x136>
 80019d0:	4a73      	ldr	r2, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019d2:	4b73      	ldr	r3, [pc, #460]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4a70      	ldr	r2, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e01e      	b.n	8001a28 <HAL_RCC_OscConfig+0x174>
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x15c>
 80019f6:	4a6a      	ldr	r2, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e00b      	b.n	8001a28 <HAL_RCC_OscConfig+0x174>
 8001a10:	4a63      	ldr	r2, [pc, #396]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a1e:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a26:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05a      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe fbff 	bl	8000234 <HAL_GetTick>
 8001a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7fe fbfa 	bl	8000234 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d902      	bls.n	8001a52 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f000 be18 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>
 8001a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a56:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001a66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	fab3 f383 	clz	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	095b      	lsrs	r3, r3, #5
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1d0>
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e015      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aa0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aac:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ab4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ab8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001abc:	fa92 f2a2 	rbit	r2, r2
 8001ac0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001ac4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ac8:	fab2 f282 	clz	r2, r2
 8001acc:	b252      	sxtb	r2, r2
 8001ace:	f042 0220 	orr.w	r2, r2, #32
 8001ad2:	b252      	sxtb	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f002 021f 	and.w	r2, r2, #31
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0aa      	beq.n	8001a3c <HAL_RCC_OscConfig+0x188>
 8001ae6:	e05e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fba4 	bl	8000234 <HAL_GetTick>
 8001aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af2:	f7fe fb9f 	bl	8000234 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d902      	bls.n	8001b08 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	f000 bdbd 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>
 8001b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001b1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0x286>
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x2b2>
 8001b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_RCC_OscConfig+0x2ec>)
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001b6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001b72:	fa92 f2a2 	rbit	r2, r2
 8001b76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001b7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b7e:	fab2 f282 	clz	r2, r2
 8001b82:	b252      	sxtb	r2, r2
 8001b84:	f042 0220 	orr.w	r2, r2, #32
 8001b88:	b252      	sxtb	r2, r2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f002 021f 	and.w	r2, r2, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f202 	lsl.w	r2, r1, r2
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1aa      	bne.n	8001af2 <HAL_RCC_OscConfig+0x23e>
 8001b9c:	e003      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8171 	beq.w	8001e98 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bb6:	4bd0      	ldr	r3, [pc, #832]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bc2:	4bcd      	ldr	r3, [pc, #820]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d16e      	bne.n	8001cac <HAL_RCC_OscConfig+0x3f8>
 8001bce:	4bca      	ldr	r3, [pc, #808]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bda:	d167      	bne.n	8001cac <HAL_RCC_OscConfig+0x3f8>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001bee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_OscConfig+0x358>
 8001c06:	4bbc      	ldr	r3, [pc, #752]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e013      	b.n	8001c34 <HAL_RCC_OscConfig+0x380>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c24:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c30:	4bb1      	ldr	r3, [pc, #708]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2202      	movs	r2, #2
 8001c36:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001c3a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001c3e:	fa92 f2a2 	rbit	r2, r2
 8001c42:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001c46:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c4a:	fab2 f282 	clz	r2, r2
 8001c4e:	b252      	sxtb	r2, r2
 8001c50:	f042 0220 	orr.w	r2, r2, #32
 8001c54:	b252      	sxtb	r2, r2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f002 021f 	and.w	r2, r2, #31
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3c4>
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f000 bd05 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	489f      	ldr	r0, [pc, #636]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001c7a:	4b9f      	ldr	r3, [pc, #636]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6919      	ldr	r1, [r3, #16]
 8001c88:	23f8      	movs	r3, #248	; 0xf8
 8001c8a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001c9a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e0f5      	b.n	8001e98 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8085 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x50e>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001cca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7fe faa7 	bl	8000234 <HAL_GetTick>
 8001ce6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cec:	f7fe faa2 	bl	8000234 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d902      	bls.n	8001d02 <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f000 bcc0 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001d14:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	fab3 f383 	clz	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d102      	bne.n	8001d32 <HAL_RCC_OscConfig+0x47e>
 8001d2c:	4b72      	ldr	r3, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	e013      	b.n	8001d5a <HAL_RCC_OscConfig+0x4a6>
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001d3c:	fa93 f3a3 	rbit	r3, r3
 8001d40:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d56:	4b68      	ldr	r3, [pc, #416]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001d60:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001d64:	fa92 f2a2 	rbit	r2, r2
 8001d68:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001d6c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b252      	sxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b252      	sxtb	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ae      	beq.n	8001cec <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	485a      	ldr	r0, [pc, #360]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	23f8      	movs	r3, #248	; 0xf8
 8001da0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001db0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	6003      	str	r3, [r0, #0]
 8001dc0:	e06a      	b.n	8001e98 <HAL_RCC_OscConfig+0x5e4>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001dcc:	fa93 f3a3 	rbit	r3, r3
 8001dd0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001dd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	461a      	mov	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fa22 	bl	8000234 <HAL_GetTick>
 8001df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df6:	f7fe fa1d 	bl	8000234 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d902      	bls.n	8001e0c <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f000 bc3b 	b.w	8002682 <HAL_RCC_OscConfig+0xdce>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001e1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_OscConfig+0x588>
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x5b0>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <HAL_RCC_OscConfig+0x644>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	2202      	movs	r2, #2
 8001e66:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001e6a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001e6e:	fa92 f2a2 	rbit	r2, r2
 8001e72:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001e76:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b252      	sxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b252      	sxtb	r2, r2
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	f002 021f 	and.w	r2, r2, #31
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ae      	bne.n	8001df6 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80d7 	beq.w	8002056 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d066      	beq.n	8001f80 <HAL_RCC_OscConfig+0x6cc>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001ec4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_OscConfig+0x648>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe f9ab 	bl	8000234 <HAL_GetTick>
 8001ede:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e00d      	b.n	8001f00 <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7fe f9a6 	bl	8000234 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d905      	bls.n	8001f00 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e3c4      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	10908120 	.word	0x10908120
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	fa93 f2a3 	rbit	r2, r3
 8001f38:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001f3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3e:	4ba5      	ldr	r3, [pc, #660]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8001f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f46:	2102      	movs	r1, #2
 8001f48:	6019      	str	r1, [r3, #0]
 8001f4a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fa93 f1a3 	rbit	r1, r3
 8001f54:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f58:	6019      	str	r1, [r3, #0]
  return(result);
 8001f5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0b2      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x630>
 8001f7e:	e06a      	b.n	8002056 <HAL_RCC_OscConfig+0x7a2>
 8001f80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	fa93 f2a3 	rbit	r2, r3
 8001f92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f96:	601a      	str	r2, [r3, #0]
  return(result);
 8001f98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001f9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x924>)
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	461a      	mov	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb0:	f7fe f940 	bl	8000234 <HAL_GetTick>
 8001fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fba:	f7fe f93b 	bl	8000234 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e359      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 8001fce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fea:	2202      	movs	r2, #2
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002002:	2202      	movs	r2, #2
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	fa93 f2a3 	rbit	r2, r3
 8002010:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002014:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002016:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002018:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800201a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800201e:	2102      	movs	r1, #2
 8002020:	6019      	str	r1, [r3, #0]
 8002022:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f1a3 	rbit	r1, r3
 800202c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002030:	6019      	str	r1, [r3, #0]
  return(result);
 8002032:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b25b      	sxtb	r3, r3
 800203e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002042:	b25b      	sxtb	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	2101      	movs	r1, #1
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1b1      	bne.n	8001fba <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 8159 	beq.w	8002318 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002078:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 800207a:	4b56      	ldr	r3, [pc, #344]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002082:	61d3      	str	r3, [r2, #28]
 8002084:	4b53      	ldr	r3, [pc, #332]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002098:	2301      	movs	r3, #1
 800209a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209e:	4b4f      	ldr	r3, [pc, #316]	; (80021dc <HAL_RCC_OscConfig+0x928>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020aa:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_RCC_OscConfig+0x928>)
 80020ac:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x928>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7fe f8bd 	bl	8000234 <HAL_GetTick>
 80020ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	e009      	b.n	80020d4 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7fe f8b8 	bl	8000234 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e2d6      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b41      	ldr	r3, [pc, #260]	; (80021dc <HAL_RCC_OscConfig+0x928>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d106      	bne.n	80020f8 <HAL_RCC_OscConfig+0x844>
 80020ea:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	e02f      	b.n	8002158 <HAL_RCC_OscConfig+0x8a4>
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0x868>
 8002102:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4a31      	ldr	r2, [pc, #196]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6213      	str	r3, [r2, #32]
 800211a:	e01d      	b.n	8002158 <HAL_RCC_OscConfig+0x8a4>
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x88c>
 8002126:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0x8a4>
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	4a21      	ldr	r2, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 800214e:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06b      	beq.n	800223a <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe f867 	bl	8000234 <HAL_GetTick>
 8002166:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe f862 	bl	8000234 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e27e      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 8002184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002188:	2202      	movs	r2, #2
 800218a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a0:	2202      	movs	r2, #2
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	fa93 f2a3 	rbit	r2, r3
 80021ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021b2:	601a      	str	r2, [r3, #0]
  return(result);
 80021b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80021b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x92c>
 80021ce:	4b01      	ldr	r3, [pc, #4]	; (80021d4 <HAL_RCC_OscConfig+0x920>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	e013      	b.n	80021fc <HAL_RCC_OscConfig+0x948>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10908120 	.word	0x10908120
 80021dc:	40007000 	.word	0x40007000
 80021e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	4bc0      	ldr	r3, [pc, #768]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002200:	2102      	movs	r1, #2
 8002202:	6011      	str	r1, [r2, #0]
 8002204:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	fa92 f1a2 	rbit	r1, r2
 800220e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002212:	6011      	str	r1, [r2, #0]
  return(result);
 8002214:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b252      	sxtb	r2, r2
 8002220:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002224:	b252      	sxtb	r2, r2
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	f002 021f 	and.w	r2, r2, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d099      	beq.n	800216c <HAL_RCC_OscConfig+0x8b8>
 8002238:	e064      	b.n	8002304 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fd fffb 	bl	8000234 <HAL_GetTick>
 800223e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fd fff6 	bl	8000234 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	f241 3288 	movw	r2, #5000	; 0x1388
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e212      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 800225c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002260:	2202      	movs	r2, #2
 8002262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002278:	2202      	movs	r2, #2
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800228a:	601a      	str	r2, [r3, #0]
  return(result);
 800228c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002290:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0x9f8>
 80022a6:	4b95      	ldr	r3, [pc, #596]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	e00d      	b.n	80022c8 <HAL_RCC_OscConfig+0xa14>
 80022ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022b0:	2202      	movs	r2, #2
 80022b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022cc:	2102      	movs	r1, #2
 80022ce:	6011      	str	r1, [r2, #0]
 80022d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	fa92 f1a2 	rbit	r1, r2
 80022da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022de:	6011      	str	r1, [r2, #0]
  return(result);
 80022e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	fab2 f282 	clz	r2, r2
 80022ea:	b252      	sxtb	r2, r2
 80022ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f0:	b252      	sxtb	r2, r2
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f002 021f 	and.w	r2, r2, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d19f      	bne.n	8002244 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002304:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002308:	2b01      	cmp	r3, #1
 800230a:	d105      	bne.n	8002318 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230c:	4a7b      	ldr	r2, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 800230e:	4b7b      	ldr	r3, [pc, #492]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002316:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 81ae 	beq.w	8002680 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b08      	cmp	r3, #8
 800232e:	f000 81a5 	beq.w	800267c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b02      	cmp	r3, #2
 800233a:	f040 811d 	bne.w	8002578 <HAL_RCC_OscConfig+0xcc4>
 800233e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002342:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002356:	601a      	str	r2, [r3, #0]
  return(result);
 8002358:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800235c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	2300      	movs	r3, #0
 8002370:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fd ff5f 	bl	8000234 <HAL_GetTick>
 8002376:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	e009      	b.n	8002390 <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7fd ff5a 	bl	8000234 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e178      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 8002390:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023a8:	601a      	str	r2, [r3, #0]
  return(result);
 80023aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80023ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	fab3 f383 	clz	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_OscConfig+0xb16>
 80023c4:	4b4d      	ldr	r3, [pc, #308]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	e01b      	b.n	8002402 <HAL_RCC_OscConfig+0xb4e>
 80023ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002406:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800240a:	6011      	str	r1, [r2, #0]
 800240c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	fa92 f1a2 	rbit	r1, r2
 8002416:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800241a:	6011      	str	r1, [r2, #0]
  return(result);
 800241c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b252      	sxtb	r2, r2
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	b252      	sxtb	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f002 021f 	and.w	r2, r2, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d19d      	bne.n	800237c <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002440:	492e      	ldr	r1, [pc, #184]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	f023 020f 	bic.w	r2, r3, #15
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	4313      	orrs	r3, r2
 8002452:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002454:	4829      	ldr	r0, [pc, #164]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6a19      	ldr	r1, [r3, #32]
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	430b      	orrs	r3, r1
 800246c:	4313      	orrs	r3, r2
 800246e:	6043      	str	r3, [r0, #4]
 8002470:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002474:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002488:	601a      	str	r2, [r3, #0]
  return(result);
 800248a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800248e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	2301      	movs	r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fd fec6 	bl	8000234 <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	e009      	b.n	80024c2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fd fec1 	bl	8000234 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0df      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 80024c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024da:	601a      	str	r2, [r3, #0]
  return(result);
 80024dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d104      	bne.n	8002500 <HAL_RCC_OscConfig+0xc4c>
 80024f6:	4b01      	ldr	r3, [pc, #4]	; (80024fc <HAL_RCC_OscConfig+0xc48>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0xc84>
 80024fc:	40021000 	.word	0x40021000
 8002500:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002504:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800251e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	4b55      	ldr	r3, [pc, #340]	; (800268c <HAL_RCC_OscConfig+0xdd8>)
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800253c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002540:	6011      	str	r1, [r2, #0]
 8002542:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	fa92 f1a2 	rbit	r1, r2
 800254c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002550:	6011      	str	r1, [r2, #0]
  return(result);
 8002552:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b252      	sxtb	r2, r2
 800255e:	f042 0220 	orr.w	r2, r2, #32
 8002562:	b252      	sxtb	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f002 021f 	and.w	r2, r2, #31
 800256a:	2101      	movs	r1, #1
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	4013      	ands	r3, r2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d09b      	beq.n	80024ae <HAL_RCC_OscConfig+0xbfa>
 8002576:	e083      	b.n	8002680 <HAL_RCC_OscConfig+0xdcc>
 8002578:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800257c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002590:	601a      	str	r2, [r3, #0]
  return(result);
 8002592:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002596:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fd fe42 	bl	8000234 <HAL_GetTick>
 80025b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e009      	b.n	80025ca <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fd fe3d 	bl	8000234 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e05b      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
 80025ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e2:	601a      	str	r2, [r3, #0]
  return(result);
 80025e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d102      	bne.n	8002604 <HAL_RCC_OscConfig+0xd50>
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_RCC_OscConfig+0xdd8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0xd88>
 8002604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002608:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	fa93 f2a3 	rbit	r2, r3
 8002618:	f107 0320 	add.w	r3, r7, #32
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	fa93 f2a3 	rbit	r2, r3
 8002632:	f107 0318 	add.w	r3, r7, #24
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <HAL_RCC_OscConfig+0xdd8>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f107 0214 	add.w	r2, r7, #20
 8002640:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002644:	6011      	str	r1, [r2, #0]
 8002646:	f107 0214 	add.w	r2, r7, #20
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	fa92 f1a2 	rbit	r1, r2
 8002650:	f107 0210 	add.w	r2, r7, #16
 8002654:	6011      	str	r1, [r2, #0]
  return(result);
 8002656:	f107 0210 	add.w	r2, r7, #16
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	fab2 f282 	clz	r2, r2
 8002660:	b252      	sxtb	r2, r2
 8002662:	f042 0220 	orr.w	r2, r2, #32
 8002666:	b252      	sxtb	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f002 021f 	and.w	r2, r2, #31
 800266e:	2101      	movs	r1, #1
 8002670:	fa01 f202 	lsl.w	r2, r1, r2
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d19d      	bne.n	80025b6 <HAL_RCC_OscConfig+0xd02>
 800267a:	e001      	b.n	8002680 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b09e      	sub	sp, #120	; 0x78
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800269a:	2300      	movs	r3, #0
 800269c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e164      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a8:	4b92      	ldr	r3, [pc, #584]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0207 	and.w	r2, r3, #7
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d210      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b6:	498f      	ldr	r1, [pc, #572]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 0207 	bic.w	r2, r3, #7
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c6:	4b8b      	ldr	r3, [pc, #556]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0207 	and.w	r2, r3, #7
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d001      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e14c      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4984      	ldr	r1, [pc, #528]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 80026e6:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80df 	beq.w	80028c2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d13d      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
 800270c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002710:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d102      	bne.n	8002736 <HAL_RCC_ClockConfig+0xa6>
 8002730:	4b71      	ldr	r3, [pc, #452]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	e00f      	b.n	8002756 <HAL_RCC_ClockConfig+0xc6>
 8002736:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800273a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	667b      	str	r3, [r7, #100]	; 0x64
 8002744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002748:	663b      	str	r3, [r7, #96]	; 0x60
 800274a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002752:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800275a:	65ba      	str	r2, [r7, #88]	; 0x58
 800275c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800275e:	fa92 f2a2 	rbit	r2, r2
 8002762:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b252      	sxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b252      	sxtb	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d17d      	bne.n	8002880 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0f4      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d13d      	bne.n	800280c <HAL_RCC_ClockConfig+0x17c>
 8002790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002794:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800279e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d102      	bne.n	80027ba <HAL_RCC_ClockConfig+0x12a>
 80027b4:	4b50      	ldr	r3, [pc, #320]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e00f      	b.n	80027da <HAL_RCC_ClockConfig+0x14a>
 80027ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	647b      	str	r3, [r7, #68]	; 0x44
 80027c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027cc:	643b      	str	r3, [r7, #64]	; 0x40
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027de:	63ba      	str	r2, [r7, #56]	; 0x38
 80027e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80027e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b252      	sxtb	r2, r2
 80027f0:	f042 0220 	orr.w	r2, r2, #32
 80027f4:	b252      	sxtb	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	f002 021f 	and.w	r2, r2, #31
 80027fc:	2101      	movs	r1, #1
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d13b      	bne.n	8002880 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b2      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
 800280c:	2302      	movs	r3, #2
 800280e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	fa93 f3a3 	rbit	r3, r3
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_RCC_ClockConfig+0x1a4>
 800282e:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e00d      	b.n	8002850 <HAL_RCC_ClockConfig+0x1c0>
 8002834:	2302      	movs	r3, #2
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
 8002840:	2302      	movs	r3, #2
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2202      	movs	r2, #2
 8002852:	61ba      	str	r2, [r7, #24]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	fa92 f2a2 	rbit	r2, r2
 800285a:	617a      	str	r2, [r7, #20]
  return(result);
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b252      	sxtb	r2, r2
 8002864:	f042 0220 	orr.w	r2, r2, #32
 8002868:	b252      	sxtb	r2, r2
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	f002 021f 	and.w	r2, r2, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f202 	lsl.w	r2, r1, r2
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e078      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002880:	491d      	ldr	r1, [pc, #116]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f023 0203 	bic.w	r2, r3, #3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002892:	f7fd fccf 	bl	8000234 <HAL_GetTick>
 8002896:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289a:	f7fd fccb 	bl	8000234 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e060      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_RCC_ClockConfig+0x268>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 020c 	and.w	r2, r3, #12
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	429a      	cmp	r2, r3
 80028c0:	d1eb      	bne.n	800289a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0207 	and.w	r2, r3, #7
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d915      	bls.n	80028fc <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d0:	4908      	ldr	r1, [pc, #32]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 0207 	bic.w	r2, r3, #7
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0207 	and.w	r2, r3, #7
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d006      	beq.n	80028fc <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e03f      	b.n	8002972 <HAL_RCC_ClockConfig+0x2e2>
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	491c      	ldr	r1, [pc, #112]	; (800297c <HAL_RCC_ClockConfig+0x2ec>)
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_RCC_ClockConfig+0x2ec>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002926:	4915      	ldr	r1, [pc, #84]	; (800297c <HAL_RCC_ClockConfig+0x2ec>)
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCC_ClockConfig+0x2ec>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800293a:	f000 f825 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 800293e:	4601      	mov	r1, r0
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x2ec>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002948:	23f0      	movs	r3, #240	; 0xf0
 800294a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	60fb      	str	r3, [r7, #12]
  return(result);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	fa22 f303 	lsr.w	r3, r2, r3
 800295e:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_RCC_ClockConfig+0x2f0>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	fa21 f303 	lsr.w	r3, r1, r3
 8002966:	4a07      	ldr	r2, [pc, #28]	; (8002984 <HAL_RCC_ClockConfig+0x2f4>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800296a:	2000      	movs	r0, #0
 800296c:	f003 f870 	bl	8005a50 <HAL_InitTick>
  
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3778      	adds	r7, #120	; 0x78
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
 8002980:	08005da0 	.word	0x08005da0
 8002984:	20000010 	.word	0x20000010

08002988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d002      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x30>
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d003      	beq.n	80029be <HAL_RCC_GetSysClockFreq+0x36>
 80029b6:	e03f      	b.n	8002a38 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xc8>)
 80029ba:	623b      	str	r3, [r7, #32]
      break;
 80029bc:	e03f      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80029c8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	607b      	str	r3, [r7, #4]
  return(result);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
 80029dc:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	230f      	movs	r3, #15
 80029ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a02:	5cd3      	ldrb	r3, [r2, r3]
 8002a04:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	e007      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	623b      	str	r3, [r7, #32]
      break;
 8002a36:	e002      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a3a:	623b      	str	r3, [r7, #32]
      break;
 8002a3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	372c      	adds	r7, #44	; 0x2c
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	007a1200 	.word	0x007a1200
 8002a54:	08005d80 	.word	0x08005d80
 8002a58:	08005d90 	.word	0x08005d90

08002a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000010 	.word	0x20000010

08002a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a7a:	f7ff ffef 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002a7e:	4601      	mov	r1, r0
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a88:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002a8c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	603b      	str	r3, [r7, #0]
  return(result);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08005db0 	.word	0x08005db0

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002abe:	f7ff ffcd 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002ac2:	4601      	mov	r1, r0
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002acc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002ad0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	603b      	str	r3, [r7, #0]
  return(result);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08005db0 	.word	0x08005db0

08002afc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	220f      	movs	r2, #15
 8002b0a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b0c:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b30:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_RCC_GetClockConfig+0x5c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_RCC_GetClockConfig+0x60>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0207 	and.w	r2, r3, #7
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	601a      	str	r2, [r3, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b092      	sub	sp, #72	; 0x48
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80d6 	beq.w	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b84:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10e      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4a4a      	ldr	r2, [pc, #296]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	61d3      	str	r3, [r2, #28]
 8002b9c:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4a41      	ldr	r2, [pc, #260]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fd fb35 	bl	8000234 <HAL_GetTick>
 8002bca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fd fb31 	bl	8000234 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b64      	cmp	r3, #100	; 0x64
 8002bda:	d901      	bls.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1d4      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bec:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8083 	beq.w	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d07b      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	461a      	mov	r2, r3
 8002c34:	2301      	movs	r3, #1
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	461a      	mov	r2, r3
 8002c56:	2300      	movs	r3, #0
 8002c58:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c5e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04c      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fd fae3 	bl	8000234 <HAL_GetTick>
 8002c6e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7fd fadf 	bl	8000234 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e180      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
 8002c94:	2302      	movs	r3, #2
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002cb6:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	e00d      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	10908100 	.word	0x10908100
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	4b9c      	ldr	r3, [pc, #624]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2202      	movs	r2, #2
 8002cda:	613a      	str	r2, [r7, #16]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	fa92 f2a2 	rbit	r2, r2
 8002ce2:	60fa      	str	r2, [r7, #12]
  return(result);
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	fab2 f282 	clz	r2, r2
 8002cea:	b252      	sxtb	r2, r2
 8002cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf0:	b252      	sxtb	r2, r2
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f002 021f 	and.w	r2, r2, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0b6      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d04:	4990      	ldr	r1, [pc, #576]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d06:	4b90      	ldr	r3, [pc, #576]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1e:	4a8a      	ldr	r2, [pc, #552]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d20:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d28:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d36:	4984      	ldr	r1, [pc, #528]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	f023 0203 	bic.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d54:	497c      	ldr	r1, [pc, #496]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d56:	4b7c      	ldr	r3, [pc, #496]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d72:	4975      	ldr	r1, [pc, #468]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d74:	4b74      	ldr	r3, [pc, #464]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0320 	and.w	r3, r3, #32
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d90:	496d      	ldr	r1, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f023 0210 	bic.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002dae:	4966      	ldr	r1, [pc, #408]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dcc:	495e      	ldr	r1, [pc, #376]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dce:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f023 0220 	bic.w	r2, r3, #32
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dea:	4957      	ldr	r1, [pc, #348]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e08:	494f      	ldr	r1, [pc, #316]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0a:	4b4f      	ldr	r3, [pc, #316]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e26:	4948      	ldr	r1, [pc, #288]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e28:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e44:	4940      	ldr	r1, [pc, #256]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e46:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e62:	4939      	ldr	r1, [pc, #228]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e64:	4b38      	ldr	r3, [pc, #224]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	4313      	orrs	r3, r2
 8002e72:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e80:	4931      	ldr	r1, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e9e:	492a      	ldr	r1, [pc, #168]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	4313      	orrs	r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ebc:	4922      	ldr	r1, [pc, #136]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ef8:	4913      	ldr	r1, [pc, #76]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	4313      	orrs	r3, r2
 8002f08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f16:	490c      	ldr	r1, [pc, #48]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	4313      	orrs	r3, r2
 8002f26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f34:	4904      	ldr	r1, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f42:	4313      	orrs	r3, r2
 8002f44:	630b      	str	r3, [r1, #48]	; 0x30
 8002f46:	e001      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002f48:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f58:	490e      	ldr	r1, [pc, #56]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	4313      	orrs	r3, r2
 8002f68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f76:	4907      	ldr	r1, [pc, #28]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3748      	adds	r7, #72	; 0x48
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e01d      	b.n	8002fe6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f815 	bl	8002fee <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f000 f976 	bl	80032c8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0202 	mvn.w	r2, #2
 8003064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f905 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8f7 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f908 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b04      	cmp	r3, #4
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0204 	mvn.w	r2, #4
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8db 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8cd 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f8de 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d122      	bne.n	800313c <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0308 	and.w	r3, r3, #8
 8003100:	2b08      	cmp	r3, #8
 8003102:	d11b      	bne.n	800313c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0208 	mvn.w	r2, #8
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2204      	movs	r2, #4
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8b1 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8a3 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8b4 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d122      	bne.n	8003190 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b10      	cmp	r3, #16
 8003156:	d11b      	bne.n	8003190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0210 	mvn.w	r2, #16
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2208      	movs	r2, #8
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f887 	bl	800328a <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f879 	bl	8003276 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f88a 	bl	800329e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0201 	mvn.w	r2, #1
 80031b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f002 fae0 	bl	800577c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f91a 	bl	800341c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f6:	d10e      	bne.n	8003216 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003202:	2b80      	cmp	r3, #128	; 0x80
 8003204:	d107      	bne.n	8003216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800320e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f90d 	bl	8003430 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d10e      	bne.n	8003242 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d107      	bne.n	8003242 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800323a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f838 	bl	80032b2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b20      	cmp	r3, #32
 800324e:	d10e      	bne.n	800326e <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d107      	bne.n	800326e <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f06f 0220 	mvn.w	r2, #32
 8003266:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8cd 	bl	8003408 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <TIM_Base_SetConfig+0x120>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <TIM_Base_SetConfig+0x44>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d00f      	beq.n	800330c <TIM_Base_SetConfig+0x44>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <TIM_Base_SetConfig+0x124>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_Base_SetConfig+0x44>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <TIM_Base_SetConfig+0x128>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_Base_SetConfig+0x44>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3d      	ldr	r2, [pc, #244]	; (80033f4 <TIM_Base_SetConfig+0x12c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x44>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3c      	ldr	r2, [pc, #240]	; (80033f8 <TIM_Base_SetConfig+0x130>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a31      	ldr	r2, [pc, #196]	; (80033e8 <TIM_Base_SetConfig+0x120>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d01b      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2e      	ldr	r2, [pc, #184]	; (80033ec <TIM_Base_SetConfig+0x124>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <TIM_Base_SetConfig+0x128>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <TIM_Base_SetConfig+0x12c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00f      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <TIM_Base_SetConfig+0x134>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00b      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2b      	ldr	r2, [pc, #172]	; (8003400 <TIM_Base_SetConfig+0x138>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <TIM_Base_SetConfig+0x13c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0x9e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <TIM_Base_SetConfig+0x130>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d108      	bne.n	8003378 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <TIM_Base_SetConfig+0x120>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <TIM_Base_SetConfig+0x104>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <TIM_Base_SetConfig+0x12c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x104>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a13      	ldr	r2, [pc, #76]	; (80033fc <TIM_Base_SetConfig+0x134>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x104>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <TIM_Base_SetConfig+0x138>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x104>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a11      	ldr	r2, [pc, #68]	; (8003404 <TIM_Base_SetConfig+0x13c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x104>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <TIM_Base_SetConfig+0x130>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	615a      	str	r2, [r3, #20]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40013400 	.word	0x40013400
 80033f8:	40015000 	.word	0x40015000
 80033fc:	40014000 	.word	0x40014000
 8003400:	40014400 	.word	0x40014400
 8003404:	40014800 	.word	0x40014800

08003408 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e043      	b.n	80034de <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f002 faae 	bl	80059cc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f82d 	bl	80034e8 <UART_SetConfig>
 800348e:	4603      	mov	r3, r0
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e022      	b.n	80034de <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa1f 	bl	80038e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	6892      	ldr	r2, [r2, #8]
 80034c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 faa6 	bl	8003a28 <UART_CheckIdleState>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80034f4:	2310      	movs	r3, #16
 80034f6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	4ba6      	ldr	r3, [pc, #664]	; (80037c0 <UART_SetConfig+0x2d8>)
 8003528:	400b      	ands	r3, r1
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	430b      	orrs	r3, r1
 800352e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	6852      	ldr	r2, [r2, #4]
 800353a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	68d2      	ldr	r2, [r2, #12]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	6892      	ldr	r2, [r2, #8]
 800355c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a96      	ldr	r2, [pc, #600]	; (80037c4 <UART_SetConfig+0x2dc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d121      	bne.n	80035b4 <UART_SetConfig+0xcc>
 8003570:	4b95      	ldr	r3, [pc, #596]	; (80037c8 <UART_SetConfig+0x2e0>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b03      	cmp	r3, #3
 800357a:	d817      	bhi.n	80035ac <UART_SetConfig+0xc4>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0x9c>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	08003595 	.word	0x08003595
 8003588:	080035a1 	.word	0x080035a1
 800358c:	080035a7 	.word	0x080035a7
 8003590:	0800359b 	.word	0x0800359b
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
 8003598:	e0b2      	b.n	8003700 <UART_SetConfig+0x218>
 800359a:	2302      	movs	r3, #2
 800359c:	75fb      	strb	r3, [r7, #23]
 800359e:	e0af      	b.n	8003700 <UART_SetConfig+0x218>
 80035a0:	2304      	movs	r3, #4
 80035a2:	75fb      	strb	r3, [r7, #23]
 80035a4:	e0ac      	b.n	8003700 <UART_SetConfig+0x218>
 80035a6:	2308      	movs	r3, #8
 80035a8:	75fb      	strb	r3, [r7, #23]
 80035aa:	e0a9      	b.n	8003700 <UART_SetConfig+0x218>
 80035ac:	2310      	movs	r3, #16
 80035ae:	75fb      	strb	r3, [r7, #23]
 80035b0:	bf00      	nop
 80035b2:	e0a5      	b.n	8003700 <UART_SetConfig+0x218>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a84      	ldr	r2, [pc, #528]	; (80037cc <UART_SetConfig+0x2e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d123      	bne.n	8003606 <UART_SetConfig+0x11e>
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <UART_SetConfig+0x2e0>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ca:	d012      	beq.n	80035f2 <UART_SetConfig+0x10a>
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d802      	bhi.n	80035d8 <UART_SetConfig+0xf0>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <UART_SetConfig+0xfe>
 80035d6:	e012      	b.n	80035fe <UART_SetConfig+0x116>
 80035d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035dc:	d00c      	beq.n	80035f8 <UART_SetConfig+0x110>
 80035de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035e2:	d003      	beq.n	80035ec <UART_SetConfig+0x104>
 80035e4:	e00b      	b.n	80035fe <UART_SetConfig+0x116>
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
 80035ea:	e089      	b.n	8003700 <UART_SetConfig+0x218>
 80035ec:	2302      	movs	r3, #2
 80035ee:	75fb      	strb	r3, [r7, #23]
 80035f0:	e086      	b.n	8003700 <UART_SetConfig+0x218>
 80035f2:	2304      	movs	r3, #4
 80035f4:	75fb      	strb	r3, [r7, #23]
 80035f6:	e083      	b.n	8003700 <UART_SetConfig+0x218>
 80035f8:	2308      	movs	r3, #8
 80035fa:	75fb      	strb	r3, [r7, #23]
 80035fc:	e080      	b.n	8003700 <UART_SetConfig+0x218>
 80035fe:	2310      	movs	r3, #16
 8003600:	75fb      	strb	r3, [r7, #23]
 8003602:	bf00      	nop
 8003604:	e07c      	b.n	8003700 <UART_SetConfig+0x218>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a71      	ldr	r2, [pc, #452]	; (80037d0 <UART_SetConfig+0x2e8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d123      	bne.n	8003658 <UART_SetConfig+0x170>
 8003610:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <UART_SetConfig+0x2e0>)
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800361c:	d012      	beq.n	8003644 <UART_SetConfig+0x15c>
 800361e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003622:	d802      	bhi.n	800362a <UART_SetConfig+0x142>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <UART_SetConfig+0x150>
 8003628:	e012      	b.n	8003650 <UART_SetConfig+0x168>
 800362a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800362e:	d00c      	beq.n	800364a <UART_SetConfig+0x162>
 8003630:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003634:	d003      	beq.n	800363e <UART_SetConfig+0x156>
 8003636:	e00b      	b.n	8003650 <UART_SetConfig+0x168>
 8003638:	2300      	movs	r3, #0
 800363a:	75fb      	strb	r3, [r7, #23]
 800363c:	e060      	b.n	8003700 <UART_SetConfig+0x218>
 800363e:	2302      	movs	r3, #2
 8003640:	75fb      	strb	r3, [r7, #23]
 8003642:	e05d      	b.n	8003700 <UART_SetConfig+0x218>
 8003644:	2304      	movs	r3, #4
 8003646:	75fb      	strb	r3, [r7, #23]
 8003648:	e05a      	b.n	8003700 <UART_SetConfig+0x218>
 800364a:	2308      	movs	r3, #8
 800364c:	75fb      	strb	r3, [r7, #23]
 800364e:	e057      	b.n	8003700 <UART_SetConfig+0x218>
 8003650:	2310      	movs	r3, #16
 8003652:	75fb      	strb	r3, [r7, #23]
 8003654:	bf00      	nop
 8003656:	e053      	b.n	8003700 <UART_SetConfig+0x218>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5d      	ldr	r2, [pc, #372]	; (80037d4 <UART_SetConfig+0x2ec>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d123      	bne.n	80036aa <UART_SetConfig+0x1c2>
 8003662:	4b59      	ldr	r3, [pc, #356]	; (80037c8 <UART_SetConfig+0x2e0>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800366a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366e:	d012      	beq.n	8003696 <UART_SetConfig+0x1ae>
 8003670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003674:	d802      	bhi.n	800367c <UART_SetConfig+0x194>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d007      	beq.n	800368a <UART_SetConfig+0x1a2>
 800367a:	e012      	b.n	80036a2 <UART_SetConfig+0x1ba>
 800367c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003680:	d00c      	beq.n	800369c <UART_SetConfig+0x1b4>
 8003682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003686:	d003      	beq.n	8003690 <UART_SetConfig+0x1a8>
 8003688:	e00b      	b.n	80036a2 <UART_SetConfig+0x1ba>
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
 800368e:	e037      	b.n	8003700 <UART_SetConfig+0x218>
 8003690:	2302      	movs	r3, #2
 8003692:	75fb      	strb	r3, [r7, #23]
 8003694:	e034      	b.n	8003700 <UART_SetConfig+0x218>
 8003696:	2304      	movs	r3, #4
 8003698:	75fb      	strb	r3, [r7, #23]
 800369a:	e031      	b.n	8003700 <UART_SetConfig+0x218>
 800369c:	2308      	movs	r3, #8
 800369e:	75fb      	strb	r3, [r7, #23]
 80036a0:	e02e      	b.n	8003700 <UART_SetConfig+0x218>
 80036a2:	2310      	movs	r3, #16
 80036a4:	75fb      	strb	r3, [r7, #23]
 80036a6:	bf00      	nop
 80036a8:	e02a      	b.n	8003700 <UART_SetConfig+0x218>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a4a      	ldr	r2, [pc, #296]	; (80037d8 <UART_SetConfig+0x2f0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d123      	bne.n	80036fc <UART_SetConfig+0x214>
 80036b4:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <UART_SetConfig+0x2e0>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80036bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c0:	d012      	beq.n	80036e8 <UART_SetConfig+0x200>
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d802      	bhi.n	80036ce <UART_SetConfig+0x1e6>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <UART_SetConfig+0x1f4>
 80036cc:	e012      	b.n	80036f4 <UART_SetConfig+0x20c>
 80036ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d2:	d00c      	beq.n	80036ee <UART_SetConfig+0x206>
 80036d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80036d8:	d003      	beq.n	80036e2 <UART_SetConfig+0x1fa>
 80036da:	e00b      	b.n	80036f4 <UART_SetConfig+0x20c>
 80036dc:	2300      	movs	r3, #0
 80036de:	75fb      	strb	r3, [r7, #23]
 80036e0:	e00e      	b.n	8003700 <UART_SetConfig+0x218>
 80036e2:	2302      	movs	r3, #2
 80036e4:	75fb      	strb	r3, [r7, #23]
 80036e6:	e00b      	b.n	8003700 <UART_SetConfig+0x218>
 80036e8:	2304      	movs	r3, #4
 80036ea:	75fb      	strb	r3, [r7, #23]
 80036ec:	e008      	b.n	8003700 <UART_SetConfig+0x218>
 80036ee:	2308      	movs	r3, #8
 80036f0:	75fb      	strb	r3, [r7, #23]
 80036f2:	e005      	b.n	8003700 <UART_SetConfig+0x218>
 80036f4:	2310      	movs	r3, #16
 80036f6:	75fb      	strb	r3, [r7, #23]
 80036f8:	bf00      	nop
 80036fa:	e001      	b.n	8003700 <UART_SetConfig+0x218>
 80036fc:	2310      	movs	r3, #16
 80036fe:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003708:	d17d      	bne.n	8003806 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d865      	bhi.n	80037dc <UART_SetConfig+0x2f4>
 8003710:	a201      	add	r2, pc, #4	; (adr r2, 8003718 <UART_SetConfig+0x230>)
 8003712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003716:	bf00      	nop
 8003718:	0800373d 	.word	0x0800373d
 800371c:	08003759 	.word	0x08003759
 8003720:	08003775 	.word	0x08003775
 8003724:	080037dd 	.word	0x080037dd
 8003728:	0800378f 	.word	0x0800378f
 800372c:	080037dd 	.word	0x080037dd
 8003730:	080037dd 	.word	0x080037dd
 8003734:	080037dd 	.word	0x080037dd
 8003738:	080037ab 	.word	0x080037ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800373c:	f7ff f99a 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003740:	4603      	mov	r3, r0
 8003742:	005a      	lsls	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	441a      	add	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	82bb      	strh	r3, [r7, #20]
        break;
 8003756:	e044      	b.n	80037e2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003758:	f7ff f9ae 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 800375c:	4603      	mov	r3, r0
 800375e:	005a      	lsls	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	441a      	add	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	82bb      	strh	r3, [r7, #20]
        break;
 8003772:	e036      	b.n	80037e2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800377e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6852      	ldr	r2, [r2, #4]
 8003786:	fbb3 f3f2 	udiv	r3, r3, r2
 800378a:	82bb      	strh	r3, [r7, #20]
        break;
 800378c:	e029      	b.n	80037e2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800378e:	f7ff f8fb 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 8003792:	4603      	mov	r3, r0
 8003794:	005a      	lsls	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	82bb      	strh	r3, [r7, #20]
        break;
 80037a8:	e01b      	b.n	80037e2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	82bb      	strh	r3, [r7, #20]
        break;
 80037be:	e010      	b.n	80037e2 <UART_SetConfig+0x2fa>
 80037c0:	efff69f3 	.word	0xefff69f3
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40004400 	.word	0x40004400
 80037d0:	40004800 	.word	0x40004800
 80037d4:	40004c00 	.word	0x40004c00
 80037d8:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	74fb      	strb	r3, [r7, #19]
        break;
 80037e0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80037e2:	8abb      	ldrh	r3, [r7, #20]
 80037e4:	f023 030f 	bic.w	r3, r3, #15
 80037e8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ea:	8abb      	ldrh	r3, [r7, #20]
 80037ec:	105b      	asrs	r3, r3, #1
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	897a      	ldrh	r2, [r7, #10]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	e069      	b.n	80038da <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d863      	bhi.n	80038d4 <UART_SetConfig+0x3ec>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x32c>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003839 	.word	0x08003839
 8003818:	08003859 	.word	0x08003859
 800381c:	08003879 	.word	0x08003879
 8003820:	080038d5 	.word	0x080038d5
 8003824:	08003899 	.word	0x08003899
 8003828:	080038d5 	.word	0x080038d5
 800382c:	080038d5 	.word	0x080038d5
 8003830:	080038d5 	.word	0x080038d5
 8003834:	080038b9 	.word	0x080038b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681c      	ldr	r4, [r3, #0]
 800383c:	f7ff f91a 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003840:	4602      	mov	r2, r0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	441a      	add	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	60e3      	str	r3, [r4, #12]
        break;
 8003856:	e040      	b.n	80038da <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681c      	ldr	r4, [r3, #0]
 800385c:	f7ff f92c 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003860:	4602      	mov	r2, r0
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	b29b      	uxth	r3, r3
 8003874:	60e3      	str	r3, [r4, #12]
        break;
 8003876:	e030      	b.n	80038da <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003886:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	6849      	ldr	r1, [r1, #4]
 800388e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003892:	b29b      	uxth	r3, r3
 8003894:	60d3      	str	r3, [r2, #12]
        break;
 8003896:	e020      	b.n	80038da <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681c      	ldr	r4, [r3, #0]
 800389c:	f7ff f874 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	60e3      	str	r3, [r4, #12]
        break;
 80038b6:	e010      	b.n	80038da <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6852      	ldr	r2, [r2, #4]
 80038c0:	0852      	lsrs	r2, r2, #1
 80038c2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6852      	ldr	r2, [r2, #4]
 80038ca:	fbb1 f2f2 	udiv	r2, r1, r2
 80038ce:	b292      	uxth	r2, r2
 80038d0:	60da      	str	r2, [r3, #12]
        break;
 80038d2:	e002      	b.n	80038da <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	74fb      	strb	r3, [r7, #19]
        break;
 80038d8:	bf00      	nop
    }
  }

  return ret;
 80038da:	7cfb      	ldrb	r3, [r7, #19]

}
 80038dc:	4618      	mov	r0, r3
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}

080038e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	6852      	ldr	r2, [r2, #4]
 8003924:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	6852      	ldr	r2, [r2, #4]
 8003946:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	6852      	ldr	r2, [r2, #4]
 8003968:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01a      	beq.n	80039fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	6852      	ldr	r2, [r2, #4]
 80039ce:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e2:	d10a      	bne.n	80039fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	6852      	ldr	r2, [r2, #4]
 80039ee:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	6852      	ldr	r2, [r2, #4]
 8003a10:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a3a:	f7fc fbfb 	bl	8000234 <HAL_GetTick>
 8003a3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d10e      	bne.n	8003a6c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f82c 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e022      	b.n	8003ab2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d10e      	bne.n	8003a98 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f816 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e00c      	b.n	8003ab2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aca:	e02c      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad2:	d028      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x30>
 8003ada:	f7fc fbab 	bl	8000234 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d91d      	bls.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	6892      	ldr	r2, [r2, #8]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e00f      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	401a      	ands	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d0c3      	beq.n	8003acc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	4603      	mov	r3, r0
 8003b56:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003b5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b60:	2b84      	cmp	r3, #132	; 0x84
 8003b62:	d005      	beq.n	8003b70 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003b64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3303      	adds	r3, #3
 8003b6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003b70:	68fb      	ldr	r3, [r7, #12]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003b82:	f000 fdfb 	bl	800477c <vTaskStartScheduler>
  
  return osOK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685c      	ldr	r4, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ba2:	b29e      	uxth	r6, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffcf 	bl	8003b4e <makeFreeRtosPriority>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	9200      	str	r2, [sp, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	4632      	mov	r2, r6
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f000 fc7d 	bl	80044c0 <xTaskCreate>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d001      	beq.n	8003bd0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <osDelay+0x16>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	e000      	b.n	8003bf2 <osDelay+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fd8e 	bl	8004714 <vTaskDelay>
  
  return osOK;
 8003bf8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f103 0208 	add.w	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 0208 	add.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f103 0208 	add.w	r2, r3, #8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	601a      	str	r2, [r3, #0]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cba:	d103      	bne.n	8003cc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e00c      	b.n	8003cde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e002      	b.n	8003cd2 <vListInsert+0x2e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d9f6      	bls.n	8003ccc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6892      	ldr	r2, [r2, #8]
 8003d2c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6852      	ldr	r2, [r2, #4]
 8003d36:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d103      	bne.n	8003d4a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3b04      	subs	r3, #4
 8003d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	; (8003dd0 <pxPortInitialiseStack+0x64>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b14      	subs	r3, #20
 8003da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3b04      	subs	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f06f 0202 	mvn.w	r2, #2
 8003dba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3b20      	subs	r3, #32
 8003dc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	08003dd5 	.word	0x08003dd5

08003dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <prvTaskExitError+0x38>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de2:	d009      	beq.n	8003df8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	e7fe      	b.n	8003df6 <prvTaskExitError+0x22>
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003e0a:	e7fe      	b.n	8003e0a <prvTaskExitError+0x36>
 8003e0c:	20000004 	.word	0x20000004

08003e10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e10:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <pxCurrentTCBConst2>)
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	6808      	ldr	r0, [r1, #0]
 8003e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1a:	f380 8809 	msr	PSP, r0
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8811 	msr	BASEPRI, r0
 8003e2a:	4770      	bx	lr
 8003e2c:	f3af 8000 	nop.w

08003e30 <pxCurrentTCBConst2>:
 8003e30:	200018b0 	.word	0x200018b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop

08003e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e38:	4806      	ldr	r0, [pc, #24]	; (8003e54 <prvPortStartFirstTask+0x1c>)
 8003e3a:	6800      	ldr	r0, [r0, #0]
 8003e3c:	6800      	ldr	r0, [r0, #0]
 8003e3e:	f380 8808 	msr	MSP, r0
 8003e42:	b662      	cpsie	i
 8003e44:	b661      	cpsie	f
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	df00      	svc	0
 8003e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e52:	bf00      	nop
 8003e54:	e000ed08 	.word	0xe000ed08

08003e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	; (8003f4c <xPortStartScheduler+0xf4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a3b      	ldr	r2, [pc, #236]	; (8003f50 <xPortStartScheduler+0xf8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <xPortStartScheduler+0x24>
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	e7fe      	b.n	8003e7a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e7c:	4b33      	ldr	r3, [pc, #204]	; (8003f4c <xPortStartScheduler+0xf4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <xPortStartScheduler+0xfc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d109      	bne.n	8003e9a <xPortStartScheduler+0x42>
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e7fe      	b.n	8003e98 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e9a:	4b2f      	ldr	r3, [pc, #188]	; (8003f58 <xPortStartScheduler+0x100>)
 8003e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	22ff      	movs	r2, #255	; 0xff
 8003eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <xPortStartScheduler+0x104>)
 8003ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ec2:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <xPortStartScheduler+0x108>)
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec8:	e009      	b.n	8003ede <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003eca:	4b25      	ldr	r3, [pc, #148]	; (8003f60 <xPortStartScheduler+0x108>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4a23      	ldr	r2, [pc, #140]	; (8003f60 <xPortStartScheduler+0x108>)
 8003ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d0ef      	beq.n	8003eca <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <xPortStartScheduler+0x108>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <xPortStartScheduler+0x108>)
 8003ef2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <xPortStartScheduler+0x108>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <xPortStartScheduler+0x108>)
 8003efe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f08:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <xPortStartScheduler+0x10c>)
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <xPortStartScheduler+0x10c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <xPortStartScheduler+0x10c>)
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <xPortStartScheduler+0x10c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f20:	f000 f8d2 	bl	80040c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <xPortStartScheduler+0x110>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f2a:	f000 f8e9 	bl	8004100 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f2e:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <xPortStartScheduler+0x114>)
 8003f30:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <xPortStartScheduler+0x114>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f3a:	f7ff ff7d 	bl	8003e38 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003f3e:	f7ff ff49 	bl	8003dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	e000ed00 	.word	0xe000ed00
 8003f50:	410fc271 	.word	0x410fc271
 8003f54:	410fc270 	.word	0x410fc270
 8003f58:	e000e400 	.word	0xe000e400
 8003f5c:	20000030 	.word	0x20000030
 8003f60:	20000034 	.word	0x20000034
 8003f64:	e000ed20 	.word	0xe000ed20
 8003f68:	20000004 	.word	0x20000004
 8003f6c:	e000ef34 	.word	0xe000ef34

08003f70 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <vPortEnterCritical+0x54>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <vPortEnterCritical+0x54>)
 8003f90:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <vPortEnterCritical+0x54>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10e      	bne.n	8003fb8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <vPortEnterCritical+0x58>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <vPortEnterCritical+0x48>
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	e7fe      	b.n	8003fb6 <vPortEnterCritical+0x46>
	}
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000004 	.word	0x20000004
 8003fc8:	e000ed04 	.word	0xe000ed04

08003fcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <vPortExitCritical+0x4c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <vPortExitCritical+0x22>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e7fe      	b.n	8003fec <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003fee:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <vPortExitCritical+0x4c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	4a08      	ldr	r2, [pc, #32]	; (8004018 <vPortExitCritical+0x4c>)
 8003ff6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ff8:	4b07      	ldr	r3, [pc, #28]	; (8004018 <vPortExitCritical+0x4c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d104      	bne.n	800400a <vPortExitCritical+0x3e>
 8004000:	2300      	movs	r3, #0
 8004002:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000004 	.word	0x20000004
 800401c:	00000000 	.word	0x00000000

08004020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004020:	f3ef 8009 	mrs	r0, PSP
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <pxCurrentTCBConst>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	f01e 0f10 	tst.w	lr, #16
 8004030:	bf08      	it	eq
 8004032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403a:	6010      	str	r0, [r2, #0]
 800403c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004044:	f380 8811 	msr	BASEPRI, r0
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f000 fd40 	bl	8004ad4 <vTaskSwitchContext>
 8004054:	f04f 0000 	mov.w	r0, #0
 8004058:	f380 8811 	msr	BASEPRI, r0
 800405c:	bc08      	pop	{r3}
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	6808      	ldr	r0, [r1, #0]
 8004062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004066:	f01e 0f10 	tst.w	lr, #16
 800406a:	bf08      	it	eq
 800406c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004070:	f380 8809 	msr	PSP, r0
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	f3af 8000 	nop.w

08004080 <pxCurrentTCBConst>:
 8004080:	200018b0 	.word	0x200018b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop

08004088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
	__asm volatile
 800408e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040a0:	f000 fc5c 	bl	800495c <xTaskIncrementTick>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <SysTick_Handler+0x3c>)
 80040ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	e000ed04 	.word	0xe000ed04

080040c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040cc:	4a08      	ldr	r2, [pc, #32]	; (80040f0 <vPortSetupTimerInterrupt+0x28>)
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <vPortSetupTimerInterrupt+0x2c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4909      	ldr	r1, [pc, #36]	; (80040f8 <vPortSetupTimerInterrupt+0x30>)
 80040d4:	fba1 1303 	umull	r1, r3, r1, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	3b01      	subs	r3, #1
 80040dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040de:	4b07      	ldr	r3, [pc, #28]	; (80040fc <vPortSetupTimerInterrupt+0x34>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e014 	.word	0xe000e014
 80040f4:	20000010 	.word	0x20000010
 80040f8:	10624dd3 	.word	0x10624dd3
 80040fc:	e000e010 	.word	0xe000e010

08004100 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004100:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004110 <vPortEnableVFP+0x10>
 8004104:	6801      	ldr	r1, [r0, #0]
 8004106:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800410a:	6001      	str	r1, [r0, #0]
 800410c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800410e:	bf00      	nop
 8004110:	e000ed88 	.word	0xe000ed88

08004114 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004120:	f000 fb72 	bl	8004808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004124:	4b57      	ldr	r3, [pc, #348]	; (8004284 <pvPortMalloc+0x170>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800412c:	f000 f90c 	bl	8004348 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004130:	4b55      	ldr	r3, [pc, #340]	; (8004288 <pvPortMalloc+0x174>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 808c 	bne.w	8004256 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01c      	beq.n	800417e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004144:	2208      	movs	r2, #8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f023 0307 	bic.w	r3, r3, #7
 800415c:	3308      	adds	r3, #8
 800415e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <pvPortMalloc+0x6a>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e7fe      	b.n	800417c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d068      	beq.n	8004256 <pvPortMalloc+0x142>
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <pvPortMalloc+0x178>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d863      	bhi.n	8004256 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800418e:	4b40      	ldr	r3, [pc, #256]	; (8004290 <pvPortMalloc+0x17c>)
 8004190:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004192:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <pvPortMalloc+0x17c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004198:	e004      	b.n	80041a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d203      	bcs.n	80041b6 <pvPortMalloc+0xa2>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f1      	bne.n	800419a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041b6:	4b33      	ldr	r3, [pc, #204]	; (8004284 <pvPortMalloc+0x170>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	d04a      	beq.n	8004256 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2208      	movs	r2, #8
 80041c6:	4413      	add	r3, r2
 80041c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	1ad2      	subs	r2, r2, r3
 80041da:	2308      	movs	r3, #8
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	429a      	cmp	r2, r3
 80041e0:	d91e      	bls.n	8004220 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80041e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <pvPortMalloc+0xf4>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	e7fe      	b.n	8004206 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1ad2      	subs	r2, r2, r3
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800421a:	69b8      	ldr	r0, [r7, #24]
 800421c:	f000 f8f6 	bl	800440c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <pvPortMalloc+0x178>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	4a18      	ldr	r2, [pc, #96]	; (800428c <pvPortMalloc+0x178>)
 800422c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <pvPortMalloc+0x178>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b18      	ldr	r3, [pc, #96]	; (8004294 <pvPortMalloc+0x180>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d203      	bcs.n	8004242 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <pvPortMalloc+0x178>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a15      	ldr	r2, [pc, #84]	; (8004294 <pvPortMalloc+0x180>)
 8004240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <pvPortMalloc+0x174>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	431a      	orrs	r2, r3
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004256:	f000 fae5 	bl	8004824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	2b00      	cmp	r3, #0
 8004262:	d009      	beq.n	8004278 <pvPortMalloc+0x164>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e7fe      	b.n	8004276 <pvPortMalloc+0x162>
	return pvReturn;
 8004278:	69fb      	ldr	r3, [r7, #28]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3728      	adds	r7, #40	; 0x28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	200018a0 	.word	0x200018a0
 8004288:	200018ac 	.word	0x200018ac
 800428c:	200018a4 	.word	0x200018a4
 8004290:	20001898 	.word	0x20001898
 8004294:	200018a8 	.word	0x200018a8

08004298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d046      	beq.n	8004338 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042aa:	2308      	movs	r3, #8
 80042ac:	425b      	negs	r3, r3
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4413      	add	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	4b20      	ldr	r3, [pc, #128]	; (8004340 <vPortFree+0xa8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4013      	ands	r3, r2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <vPortFree+0x42>
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e7fe      	b.n	80042d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <vPortFree+0x5e>
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	e7fe      	b.n	80042f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <vPortFree+0xa8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4013      	ands	r3, r2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d019      	beq.n	8004338 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d115      	bne.n	8004338 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <vPortFree+0xa8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800431c:	f000 fa74 	bl	8004808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <vPortFree+0xac>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4413      	add	r3, r2
 800432a:	4a06      	ldr	r2, [pc, #24]	; (8004344 <vPortFree+0xac>)
 800432c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800432e:	6938      	ldr	r0, [r7, #16]
 8004330:	f000 f86c 	bl	800440c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004334:	f000 fa76 	bl	8004824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	200018ac 	.word	0x200018ac
 8004344:	200018a4 	.word	0x200018a4

08004348 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800434e:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 8004352:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <prvHeapInit+0xac>)
 8004356:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3307      	adds	r3, #7
 8004366:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <prvHeapInit+0xac>)
 8004378:	4413      	add	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004380:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <prvHeapInit+0xb0>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <prvHeapInit+0xb0>)
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4413      	add	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004394:	2208      	movs	r2, #8
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0307 	bic.w	r3, r3, #7
 80043a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a15      	ldr	r2, [pc, #84]	; (80043fc <prvHeapInit+0xb4>)
 80043a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <prvHeapInit+0xb4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <prvHeapInit+0xb4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	1ad2      	subs	r2, r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <prvHeapInit+0xb4>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <prvHeapInit+0xb8>)
 80043d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	4a09      	ldr	r2, [pc, #36]	; (8004404 <prvHeapInit+0xbc>)
 80043de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <prvHeapInit+0xc0>)
 80043e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043e6:	601a      	str	r2, [r3, #0]
}
 80043e8:	bf00      	nop
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	20000038 	.word	0x20000038
 80043f8:	20001898 	.word	0x20001898
 80043fc:	200018a0 	.word	0x200018a0
 8004400:	200018a8 	.word	0x200018a8
 8004404:	200018a4 	.word	0x200018a4
 8004408:	200018ac 	.word	0x200018ac

0800440c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004414:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <prvInsertBlockIntoFreeList+0xac>)
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	e002      	b.n	8004420 <prvInsertBlockIntoFreeList+0x14>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d3f7      	bcc.n	800441a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d108      	bne.n	800444e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	441a      	add	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	441a      	add	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d118      	bne.n	8004494 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <prvInsertBlockIntoFreeList+0xb0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d00d      	beq.n	800448a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	441a      	add	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e008      	b.n	800449c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <prvInsertBlockIntoFreeList+0xb0>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e003      	b.n	800449c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d002      	beq.n	80044aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20001898 	.word	0x20001898
 80044bc:	200018a0 	.word	0x200018a0

080044c0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af04      	add	r7, sp, #16
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	603b      	str	r3, [r7, #0]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fe1d 	bl	8004114 <pvPortMalloc>
 80044da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00e      	beq.n	8004500 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80044e2:	2054      	movs	r0, #84	; 0x54
 80044e4:	f7ff fe16 	bl	8004114 <pvPortMalloc>
 80044e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	631a      	str	r2, [r3, #48]	; 0x30
 80044f6:	e005      	b.n	8004504 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044f8:	6978      	ldr	r0, [r7, #20]
 80044fa:	f7ff fecd 	bl	8004298 <vPortFree>
 80044fe:	e001      	b.n	8004504 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d013      	beq.n	8004532 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	2300      	movs	r3, #0
 800450e:	9303      	str	r3, [sp, #12]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	9302      	str	r3, [sp, #8]
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f80e 	bl	8004542 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004526:	69f8      	ldr	r0, [r7, #28]
 8004528:	f000 f88a 	bl	8004640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800452c:	2301      	movs	r3, #1
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	e002      	b.n	8004538 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004536:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004538:	69bb      	ldr	r3, [r7, #24]
	}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b088      	sub	sp, #32
 8004546:	af00      	add	r7, sp, #0
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800455a:	3b01      	subs	r3, #1
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f023 0307 	bic.w	r3, r3, #7
 8004568:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	2b00      	cmp	r3, #0
 8004572:	d009      	beq.n	8004588 <prvInitialiseNewTask+0x46>
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e7fe      	b.n	8004586 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004588:	2300      	movs	r3, #0
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e012      	b.n	80045b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	7819      	ldrb	r1, [r3, #0]
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	3334      	adds	r3, #52	; 0x34
 800459e:	460a      	mov	r2, r1
 80045a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d006      	beq.n	80045bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3301      	adds	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d9e9      	bls.n	800458e <prvInitialiseNewTask+0x4c>
 80045ba:	e000      	b.n	80045be <prvInitialiseNewTask+0x7c>
		{
			break;
 80045bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	2b06      	cmp	r3, #6
 80045ca:	d901      	bls.n	80045d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045cc:	2306      	movs	r3, #6
 80045ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	2200      	movs	r2, #0
 80045e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fb2b 	bl	8003c42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	3318      	adds	r3, #24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fb26 	bl	8003c42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fe:	f1c3 0207 	rsb	r2, r3, #7
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	2200      	movs	r2, #0
 8004610:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	69b8      	ldr	r0, [r7, #24]
 8004620:	f7ff fba4 	bl	8003d6c <pxPortInitialiseStack>
 8004624:	4602      	mov	r2, r0
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004636:	bf00      	nop
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004648:	f7ff fc92 	bl	8003f70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800464c:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <prvAddNewTaskToReadyList+0xb8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <prvAddNewTaskToReadyList+0xb8>)
 8004654:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <prvAddNewTaskToReadyList+0xbc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800465e:	4a27      	ldr	r2, [pc, #156]	; (80046fc <prvAddNewTaskToReadyList+0xbc>)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <prvAddNewTaskToReadyList+0xb8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d110      	bne.n	800468e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800466c:	f000 faa4 	bl	8004bb8 <prvInitialiseTaskLists>
 8004670:	e00d      	b.n	800468e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004672:	4b23      	ldr	r3, [pc, #140]	; (8004700 <prvAddNewTaskToReadyList+0xc0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d109      	bne.n	800468e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <prvAddNewTaskToReadyList+0xbc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d802      	bhi.n	800468e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <prvAddNewTaskToReadyList+0xbc>)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800468e:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <prvAddNewTaskToReadyList+0xc4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <prvAddNewTaskToReadyList+0xc4>)
 8004696:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	2201      	movs	r2, #1
 800469e:	409a      	lsls	r2, r3
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	4a18      	ldr	r2, [pc, #96]	; (8004708 <prvAddNewTaskToReadyList+0xc8>)
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4a15      	ldr	r2, [pc, #84]	; (800470c <prvAddNewTaskToReadyList+0xcc>)
 80046b8:	441a      	add	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3304      	adds	r3, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f7ff facb 	bl	8003c5c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046c6:	f7ff fc81 	bl	8003fcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <prvAddNewTaskToReadyList+0xc0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046d2:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <prvAddNewTaskToReadyList+0xbc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	429a      	cmp	r2, r3
 80046de:	d207      	bcs.n	80046f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <prvAddNewTaskToReadyList+0xd0>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	200019b0 	.word	0x200019b0
 80046fc:	200018b0 	.word	0x200018b0
 8004700:	200019bc 	.word	0x200019bc
 8004704:	200019cc 	.word	0x200019cc
 8004708:	200019b8 	.word	0x200019b8
 800470c:	200018b4 	.word	0x200018b4
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004726:	4b13      	ldr	r3, [pc, #76]	; (8004774 <vTaskDelay+0x60>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <vTaskDelay+0x2e>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	e7fe      	b.n	8004740 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004742:	f000 f861 	bl	8004808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004746:	2100      	movs	r1, #0
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fae7 	bl	8004d1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800474e:	f000 f869 	bl	8004824 <xTaskResumeAll>
 8004752:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <vTaskDelay+0x64>)
 800475c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200019d8 	.word	0x200019d8
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <vTaskStartScheduler+0x74>)
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2300      	movs	r3, #0
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	4919      	ldr	r1, [pc, #100]	; (80047f4 <vTaskStartScheduler+0x78>)
 8004790:	4819      	ldr	r0, [pc, #100]	; (80047f8 <vTaskStartScheduler+0x7c>)
 8004792:	f7ff fe95 	bl	80044c0 <xTaskCreate>
 8004796:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d115      	bne.n	80047ca <vTaskStartScheduler+0x4e>
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <vTaskStartScheduler+0x80>)
 80047b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <vTaskStartScheduler+0x84>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80047be:	4b11      	ldr	r3, [pc, #68]	; (8004804 <vTaskStartScheduler+0x88>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047c4:	f7ff fb48 	bl	8003e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047c8:	e00d      	b.n	80047e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d0:	d109      	bne.n	80047e6 <vTaskStartScheduler+0x6a>
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	e7fe      	b.n	80047e4 <vTaskStartScheduler+0x68>
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200019d4 	.word	0x200019d4
 80047f4:	08005c9c 	.word	0x08005c9c
 80047f8:	08004b89 	.word	0x08004b89
 80047fc:	200019d0 	.word	0x200019d0
 8004800:	200019bc 	.word	0x200019bc
 8004804:	200019b4 	.word	0x200019b4

08004808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <vTaskSuspendAll+0x18>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a03      	ldr	r2, [pc, #12]	; (8004820 <vTaskSuspendAll+0x18>)
 8004814:	6013      	str	r3, [r2, #0]
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	200019d8 	.word	0x200019d8

08004824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <xTaskResumeAll+0x114>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <xTaskResumeAll+0x2a>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	e7fe      	b.n	800484c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800484e:	f7ff fb8f 	bl	8003f70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004852:	4b39      	ldr	r3, [pc, #228]	; (8004938 <xTaskResumeAll+0x114>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	4a37      	ldr	r2, [pc, #220]	; (8004938 <xTaskResumeAll+0x114>)
 800485a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <xTaskResumeAll+0x114>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d161      	bne.n	8004928 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <xTaskResumeAll+0x118>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05d      	beq.n	8004928 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486c:	e02e      	b.n	80048cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <xTaskResumeAll+0x11c>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3318      	adds	r3, #24
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fa4b 	bl	8003d16 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fa46 	bl	8003d16 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	2201      	movs	r2, #1
 8004890:	409a      	lsls	r2, r3
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <xTaskResumeAll+0x120>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <xTaskResumeAll+0x120>)
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <xTaskResumeAll+0x124>)
 80048aa:	441a      	add	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7ff f9d2 	bl	8003c5c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4b23      	ldr	r3, [pc, #140]	; (800494c <xTaskResumeAll+0x128>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <xTaskResumeAll+0x12c>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <xTaskResumeAll+0x11c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1cc      	bne.n	800486e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048da:	f000 f9f9 	bl	8004cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <xTaskResumeAll+0x130>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d010      	beq.n	800490c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ea:	f000 f837 	bl	800495c <xTaskIncrementTick>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80048f4:	4b16      	ldr	r3, [pc, #88]	; (8004950 <xTaskResumeAll+0x12c>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f1      	bne.n	80048ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <xTaskResumeAll+0x130>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <xTaskResumeAll+0x12c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <xTaskResumeAll+0x134>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004928:	f7ff fb50 	bl	8003fcc <vPortExitCritical>

	return xAlreadyYielded;
 800492c:	68bb      	ldr	r3, [r7, #8]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	200019d8 	.word	0x200019d8
 800493c:	200019b0 	.word	0x200019b0
 8004940:	20001970 	.word	0x20001970
 8004944:	200019b8 	.word	0x200019b8
 8004948:	200018b4 	.word	0x200018b4
 800494c:	200018b0 	.word	0x200018b0
 8004950:	200019c4 	.word	0x200019c4
 8004954:	200019c0 	.word	0x200019c0
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004966:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <xTaskIncrementTick+0x14c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 808c 	bne.w	8004a88 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004970:	4b4e      	ldr	r3, [pc, #312]	; (8004aac <xTaskIncrementTick+0x150>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004978:	4a4c      	ldr	r2, [pc, #304]	; (8004aac <xTaskIncrementTick+0x150>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11f      	bne.n	80049c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <xTaskIncrementTick+0x154>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <xTaskIncrementTick+0x46>
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	e7fe      	b.n	80049a0 <xTaskIncrementTick+0x44>
 80049a2:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <xTaskIncrementTick+0x154>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	4b42      	ldr	r3, [pc, #264]	; (8004ab4 <xTaskIncrementTick+0x158>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a40      	ldr	r2, [pc, #256]	; (8004ab0 <xTaskIncrementTick+0x154>)
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <xTaskIncrementTick+0x158>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <xTaskIncrementTick+0x15c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3301      	adds	r3, #1
 80049bc:	4a3e      	ldr	r2, [pc, #248]	; (8004ab8 <xTaskIncrementTick+0x15c>)
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	f000 f986 	bl	8004cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049c4:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <xTaskIncrementTick+0x160>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d34d      	bcc.n	8004a6a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ce:	4b38      	ldr	r3, [pc, #224]	; (8004ab0 <xTaskIncrementTick+0x154>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <xTaskIncrementTick+0x80>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <xTaskIncrementTick+0x82>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e2:	4b36      	ldr	r3, [pc, #216]	; (8004abc <xTaskIncrementTick+0x160>)
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e8:	601a      	str	r2, [r3, #0]
					break;
 80049ea:	e03e      	b.n	8004a6a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ec:	4b30      	ldr	r3, [pc, #192]	; (8004ab0 <xTaskIncrementTick+0x154>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d203      	bcs.n	8004a0c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a04:	4a2d      	ldr	r2, [pc, #180]	; (8004abc <xTaskIncrementTick+0x160>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6013      	str	r3, [r2, #0]
						break;
 8004a0a:	e02e      	b.n	8004a6a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f980 	bl	8003d16 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff f977 	bl	8003d16 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <xTaskIncrementTick+0x164>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	4a22      	ldr	r2, [pc, #136]	; (8004ac0 <xTaskIncrementTick+0x164>)
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4a1f      	ldr	r2, [pc, #124]	; (8004ac4 <xTaskIncrementTick+0x168>)
 8004a48:	441a      	add	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7ff f903 	bl	8003c5c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <xTaskIncrementTick+0x16c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3b4      	bcc.n	80049ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a68:	e7b1      	b.n	80049ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a6a:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <xTaskIncrementTick+0x16c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	4914      	ldr	r1, [pc, #80]	; (8004ac4 <xTaskIncrementTick+0x168>)
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d907      	bls.n	8004a92 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004a82:	2301      	movs	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	e004      	b.n	8004a92 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <xTaskIncrementTick+0x170>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <xTaskIncrementTick+0x170>)
 8004a90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <xTaskIncrementTick+0x174>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a9e:	697b      	ldr	r3, [r7, #20]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200019d8 	.word	0x200019d8
 8004aac:	200019b4 	.word	0x200019b4
 8004ab0:	20001968 	.word	0x20001968
 8004ab4:	2000196c 	.word	0x2000196c
 8004ab8:	200019c8 	.word	0x200019c8
 8004abc:	200019d0 	.word	0x200019d0
 8004ac0:	200019b8 	.word	0x200019b8
 8004ac4:	200018b4 	.word	0x200018b4
 8004ac8:	200018b0 	.word	0x200018b0
 8004acc:	200019c0 	.word	0x200019c0
 8004ad0:	200019c4 	.word	0x200019c4

08004ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ada:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <vTaskSwitchContext+0xa0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ae2:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <vTaskSwitchContext+0xa4>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ae8:	e03e      	b.n	8004b68 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <vTaskSwitchContext+0xa4>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <vTaskSwitchContext+0xa8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	fab3 f383 	clz	r3, r3
 8004afc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004afe:	7afb      	ldrb	r3, [r7, #11]
 8004b00:	f1c3 031f 	rsb	r3, r3, #31
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	491e      	ldr	r1, [pc, #120]	; (8004b80 <vTaskSwitchContext+0xac>)
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <vTaskSwitchContext+0x5a>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	e7fe      	b.n	8004b2c <vTaskSwitchContext+0x58>
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <vTaskSwitchContext+0xac>)
 8004b3a:	4413      	add	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d104      	bne.n	8004b5e <vTaskSwitchContext+0x8a>
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a07      	ldr	r2, [pc, #28]	; (8004b84 <vTaskSwitchContext+0xb0>)
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	200019d8 	.word	0x200019d8
 8004b78:	200019c4 	.word	0x200019c4
 8004b7c:	200019b8 	.word	0x200019b8
 8004b80:	200018b4 	.word	0x200018b4
 8004b84:	200018b0 	.word	0x200018b0

08004b88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b90:	f000 f852 	bl	8004c38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <prvIdleTask+0x28>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d9f9      	bls.n	8004b90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <prvIdleTask+0x2c>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bac:	e7f0      	b.n	8004b90 <prvIdleTask+0x8>
 8004bae:	bf00      	nop
 8004bb0:	200018b4 	.word	0x200018b4
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	e00c      	b.n	8004bde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <prvInitialiseTaskLists+0x60>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff f815 	bl	8003c02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b06      	cmp	r3, #6
 8004be2:	d9ef      	bls.n	8004bc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004be4:	480d      	ldr	r0, [pc, #52]	; (8004c1c <prvInitialiseTaskLists+0x64>)
 8004be6:	f7ff f80c 	bl	8003c02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bea:	480d      	ldr	r0, [pc, #52]	; (8004c20 <prvInitialiseTaskLists+0x68>)
 8004bec:	f7ff f809 	bl	8003c02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bf0:	480c      	ldr	r0, [pc, #48]	; (8004c24 <prvInitialiseTaskLists+0x6c>)
 8004bf2:	f7ff f806 	bl	8003c02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bf6:	480c      	ldr	r0, [pc, #48]	; (8004c28 <prvInitialiseTaskLists+0x70>)
 8004bf8:	f7ff f803 	bl	8003c02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bfc:	480b      	ldr	r0, [pc, #44]	; (8004c2c <prvInitialiseTaskLists+0x74>)
 8004bfe:	f7ff f800 	bl	8003c02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c02:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <prvInitialiseTaskLists+0x78>)
 8004c04:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <prvInitialiseTaskLists+0x64>)
 8004c06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <prvInitialiseTaskLists+0x7c>)
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <prvInitialiseTaskLists+0x68>)
 8004c0c:	601a      	str	r2, [r3, #0]
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200018b4 	.word	0x200018b4
 8004c1c:	20001940 	.word	0x20001940
 8004c20:	20001954 	.word	0x20001954
 8004c24:	20001970 	.word	0x20001970
 8004c28:	20001984 	.word	0x20001984
 8004c2c:	2000199c 	.word	0x2000199c
 8004c30:	20001968 	.word	0x20001968
 8004c34:	2000196c 	.word	0x2000196c

08004c38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c3e:	e028      	b.n	8004c92 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004c40:	f7ff fde2 	bl	8004808 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <prvCheckTasksWaitingTermination+0x6c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004c54:	f7ff fde6 	bl	8004824 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d119      	bne.n	8004c92 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8004c5e:	f7ff f987 	bl	8003f70 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <prvCheckTasksWaitingTermination+0x6c>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff f851 	bl	8003d16 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <prvCheckTasksWaitingTermination+0x70>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <prvCheckTasksWaitingTermination+0x70>)
 8004c7c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <prvCheckTasksWaitingTermination+0x74>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	4a09      	ldr	r2, [pc, #36]	; (8004cac <prvCheckTasksWaitingTermination+0x74>)
 8004c86:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004c88:	f7ff f9a0 	bl	8003fcc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f000 f80f 	bl	8004cb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <prvCheckTasksWaitingTermination+0x74>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d2      	bne.n	8004c40 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20001984 	.word	0x20001984
 8004ca8:	200019b0 	.word	0x200019b0
 8004cac:	20001998 	.word	0x20001998

08004cb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff faeb 	bl	8004298 <vPortFree>
			vPortFree( pxTCB );
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fae8 	bl	8004298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <prvResetNextTaskUnblockTime+0x44>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <prvResetNextTaskUnblockTime+0x14>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <prvResetNextTaskUnblockTime+0x16>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <prvResetNextTaskUnblockTime+0x48>)
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cf0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cf2:	e008      	b.n	8004d06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvResetNextTaskUnblockTime+0x44>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	4a05      	ldr	r2, [pc, #20]	; (8004d18 <prvResetNextTaskUnblockTime+0x48>)
 8004d04:	6013      	str	r3, [r2, #0]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20001968 	.word	0x20001968
 8004d18:	200019d0 	.word	0x200019d0

08004d1c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d26:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d2c:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe ffef 	bl	8003d16 <uxListRemove>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d44:	2201      	movs	r2, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4013      	ands	r3, r2
 8004d52:	4a20      	ldr	r2, [pc, #128]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d5c:	d10a      	bne.n	8004d74 <prvAddCurrentTaskToDelayedList+0x58>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d64:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	481a      	ldr	r0, [pc, #104]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d6e:	f7fe ff75 	bl	8003c5c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d72:	e026      	b.n	8004dc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d209      	bcs.n	8004da0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d8c:	4b13      	ldr	r3, [pc, #76]	; (8004ddc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe ff83 	bl	8003ca4 <vListInsert>
}
 8004d9e:	e010      	b.n	8004dc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4619      	mov	r1, r3
 8004dac:	4610      	mov	r0, r2
 8004dae:	f7fe ff79 	bl	8003ca4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004db2:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d202      	bcs.n	8004dc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004dbc:	4a09      	ldr	r2, [pc, #36]	; (8004de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6013      	str	r3, [r2, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	200019b4 	.word	0x200019b4
 8004dd0:	200018b0 	.word	0x200018b0
 8004dd4:	200019b8 	.word	0x200019b8
 8004dd8:	2000199c 	.word	0x2000199c
 8004ddc:	2000196c 	.word	0x2000196c
 8004de0:	20001968 	.word	0x20001968
 8004de4:	200019d0 	.word	0x200019d0

08004de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004de8:	b5b0      	push	{r4, r5, r7, lr}
 8004dea:	b0a4      	sub	sp, #144	; 0x90
 8004dec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dee:	f7fb f9f7 	bl	80001e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004df2:	f000 f89b 	bl	8004f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004df6:	f000 f995 	bl	8005124 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004dfa:	f000 f963 	bl	80050c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004dfe:	f000 f8f3 	bl	8004fe8 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004e02:	4b3c      	ldr	r3, [pc, #240]	; (8004ef4 <main+0x10c>)
 8004e04:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8004e08:	461d      	mov	r5, r3
 8004e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004e12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe feb7 	bl	8003b8c <osThreadCreate>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <main+0x110>)
 8004e22:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor0Task */
  osThreadDef(motor0Task, motor0Loop, osPriorityIdle, 0, 128);
 8004e24:	4b35      	ldr	r3, [pc, #212]	; (8004efc <main+0x114>)
 8004e26:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8004e2a:	461d      	mov	r5, r3
 8004e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	6023      	str	r3, [r4, #0]
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8004e34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fea6 	bl	8003b8c <osThreadCreate>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <main+0x118>)
 8004e44:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor1Task */
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8004e46:	4b2f      	ldr	r3, [pc, #188]	; (8004f04 <main+0x11c>)
 8004e48:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004e4c:	461d      	mov	r5, r3
 8004e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	6023      	str	r3, [r4, #0]
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8004e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe fe95 	bl	8003b8c <osThreadCreate>
 8004e62:	4602      	mov	r2, r0
 8004e64:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <main+0x120>)
 8004e66:	601a      	str	r2, [r3, #0]

  /* definition and creation of ADCTask */
  osThreadDef(ADCTask, ADCLoop, osPriorityIdle, 0, 128);
 8004e68:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <main+0x124>)
 8004e6a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004e6e:	461d      	mov	r5, r3
 8004e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	6023      	str	r3, [r4, #0]
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 8004e78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe fe84 	bl	8003b8c <osThreadCreate>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <main+0x128>)
 8004e88:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8004e8a:	4b22      	ldr	r3, [pc, #136]	; (8004f14 <main+0x12c>)
 8004e8c:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004e90:	461d      	mov	r5, r3
 8004e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	6023      	str	r3, [r4, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8004e9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe fe73 	bl	8003b8c <osThreadCreate>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <main+0x130>)
 8004eaa:	601a      	str	r2, [r3, #0]

  /* definition and creation of backupTask0 */
  osThreadDef(backupTask0, backupLoop0, osPriorityIdle, 0, 128);
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <main+0x134>)
 8004eae:	f107 0418 	add.w	r4, r7, #24
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	6023      	str	r3, [r4, #0]
  backupTask0Handle = osThreadCreate(osThread(backupTask0), NULL);
 8004ebc:	f107 0318 	add.w	r3, r7, #24
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fe62 	bl	8003b8c <osThreadCreate>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <main+0x138>)
 8004ecc:	601a      	str	r2, [r3, #0]

  /* definition and creation of backupTask1 */
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <main+0x13c>)
 8004ed0:	1d3c      	adds	r4, r7, #4
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	6023      	str	r3, [r4, #0]
  backupTask1Handle = osThreadCreate(osThread(backupTask1), NULL);
 8004edc:	1d3b      	adds	r3, r7, #4
 8004ede:	2100      	movs	r1, #0
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fe53 	bl	8003b8c <osThreadCreate>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <main+0x140>)
 8004eea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004eec:	f7fe fe47 	bl	8003b7e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004ef0:	e7fe      	b.n	8004ef0 <main+0x108>
 8004ef2:	bf00      	nop
 8004ef4:	08005cb0 	.word	0x08005cb0
 8004ef8:	200019f0 	.word	0x200019f0
 8004efc:	08005cd0 	.word	0x08005cd0
 8004f00:	20001ac8 	.word	0x20001ac8
 8004f04:	08005cf0 	.word	0x08005cf0
 8004f08:	200019f4 	.word	0x200019f4
 8004f0c:	08005d0c 	.word	0x08005d0c
 8004f10:	20001a4c 	.word	0x20001a4c
 8004f14:	08005d2c 	.word	0x08005d2c
 8004f18:	20001a54 	.word	0x20001a54
 8004f1c:	08005d4c 	.word	0x08005d4c
 8004f20:	20001acc 	.word	0x20001acc
 8004f24:	08005d6c 	.word	0x08005d6c
 8004f28:	20001a50 	.word	0x20001a50

08004f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b0a6      	sub	sp, #152	; 0x98
 8004f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004f36:	2228      	movs	r2, #40	; 0x28
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fe9a 	bl	8005c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f50:	1d3b      	adds	r3, r7, #4
 8004f52:	2258      	movs	r2, #88	; 0x58
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fe8c 	bl	8005c74 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f60:	2301      	movs	r3, #1
 8004f62:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f64:	2310      	movs	r3, #16
 8004f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fc fc92 	bl	80018b4 <HAL_RCC_OscConfig>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004f96:	f000 fc03 	bl	80057a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f9a:	230f      	movs	r3, #15
 8004f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004faa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004fac:	2300      	movs	r3, #0
 8004fae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004fb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fd fb6a 	bl	8002690 <HAL_RCC_ClockConfig>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004fc2:	f000 fbed 	bl	80057a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fd fdc5 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004fdc:	f000 fbe0 	bl	80057a0 <Error_Handler>
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3798      	adds	r7, #152	; 0x98
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004fee:	f107 031c 	add.w	r3, r7, #28
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004ffa:	1d3b      	adds	r3, r7, #4
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	611a      	str	r2, [r3, #16]
 8005008:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800500a:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800500c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005010:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005012:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005014:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800501a:	4b29      	ldr	r3, [pc, #164]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005020:	4b27      	ldr	r3, [pc, #156]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005026:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005028:	2200      	movs	r2, #0
 800502a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800502c:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800502e:	2200      	movs	r2, #0
 8005030:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005034:	2200      	movs	r2, #0
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005038:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800503a:	2201      	movs	r2, #1
 800503c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005046:	2201      	movs	r2, #1
 8005048:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800504c:	2200      	movs	r2, #0
 800504e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005052:	2204      	movs	r2, #4
 8005054:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005056:	4b1a      	ldr	r3, [pc, #104]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800505c:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800505e:	2200      	movs	r2, #0
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005062:	4817      	ldr	r0, [pc, #92]	; (80050c0 <MX_ADC1_Init+0xd8>)
 8005064:	f7fb f8f2 	bl	800024c <HAL_ADC_Init>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800506e:	f000 fb97 	bl	80057a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005076:	f107 031c 	add.w	r3, r7, #28
 800507a:	4619      	mov	r1, r3
 800507c:	4810      	ldr	r0, [pc, #64]	; (80050c0 <MX_ADC1_Init+0xd8>)
 800507e:	f7fb ffe9 	bl	8001054 <HAL_ADCEx_MultiModeConfigChannel>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 8005088:	f000 fb8a 	bl	80057a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800508c:	230e      	movs	r3, #14
 800508e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005090:	2301      	movs	r3, #1
 8005092:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4805      	ldr	r0, [pc, #20]	; (80050c0 <MX_ADC1_Init+0xd8>)
 80050aa:	f7fb fce7 	bl	8000a7c <HAL_ADC_ConfigChannel>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80050b4:	f000 fb74 	bl	80057a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80050b8:	bf00      	nop
 80050ba:	3728      	adds	r7, #40	; 0x28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200019f8 	.word	0x200019f8

080050c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <MX_USART2_UART_Init+0x5c>)
 80050cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80050ce:	4b13      	ldr	r3, [pc, #76]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80050d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050d6:	4b11      	ldr	r3, [pc, #68]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050d8:	2200      	movs	r2, #0
 80050da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050de:	2200      	movs	r2, #0
 80050e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80050e2:	4b0e      	ldr	r3, [pc, #56]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050ea:	220c      	movs	r2, #12
 80050ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <MX_USART2_UART_Init+0x58>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <MX_USART2_UART_Init+0x58>)
 8005102:	2200      	movs	r2, #0
 8005104:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005106:	4805      	ldr	r0, [pc, #20]	; (800511c <MX_USART2_UART_Init+0x58>)
 8005108:	f7fe f99c 	bl	8003444 <HAL_UART_Init>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005112:	f000 fb45 	bl	80057a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20001a58 	.word	0x20001a58
 8005120:	40004400 	.word	0x40004400

08005124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512a:	f107 0314 	add.w	r3, r7, #20
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	60da      	str	r2, [r3, #12]
 8005138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800513a:	4a4a      	ldr	r2, [pc, #296]	; (8005264 <MX_GPIO_Init+0x140>)
 800513c:	4b49      	ldr	r3, [pc, #292]	; (8005264 <MX_GPIO_Init+0x140>)
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005144:	6153      	str	r3, [r2, #20]
 8005146:	4b47      	ldr	r3, [pc, #284]	; (8005264 <MX_GPIO_Init+0x140>)
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005152:	4a44      	ldr	r2, [pc, #272]	; (8005264 <MX_GPIO_Init+0x140>)
 8005154:	4b43      	ldr	r3, [pc, #268]	; (8005264 <MX_GPIO_Init+0x140>)
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800515c:	6153      	str	r3, [r2, #20]
 800515e:	4b41      	ldr	r3, [pc, #260]	; (8005264 <MX_GPIO_Init+0x140>)
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800516a:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <MX_GPIO_Init+0x140>)
 800516c:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <MX_GPIO_Init+0x140>)
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005174:	6153      	str	r3, [r2, #20]
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <MX_GPIO_Init+0x140>)
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	4a38      	ldr	r2, [pc, #224]	; (8005264 <MX_GPIO_Init+0x140>)
 8005184:	4b37      	ldr	r3, [pc, #220]	; (8005264 <MX_GPIO_Init+0x140>)
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800518c:	6153      	str	r3, [r2, #20]
 800518e:	4b35      	ldr	r3, [pc, #212]	; (8005264 <MX_GPIO_Init+0x140>)
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|AIN1_Pin|AIN2_Pin|PWMB_Pin 
 800519a:	2200      	movs	r2, #0
 800519c:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 80051a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051a4:	f7fc fb6e 	bl	8001884 <HAL_GPIO_WritePin>
                          |BN1_Pin|BN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, backupOut1_Pin|backupOut0_Pin|PWMA_Pin, GPIO_PIN_RESET);
 80051a8:	2200      	movs	r2, #0
 80051aa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80051ae:	482e      	ldr	r0, [pc, #184]	; (8005268 <MX_GPIO_Init+0x144>)
 80051b0:	f7fc fb68 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80051b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80051ba:	4b2c      	ldr	r3, [pc, #176]	; (800526c <MX_GPIO_Init+0x148>)
 80051bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4619      	mov	r1, r3
 80051c8:	4827      	ldr	r0, [pc, #156]	; (8005268 <MX_GPIO_Init+0x144>)
 80051ca:	f7fc f9cd 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80051ce:	2320      	movs	r3, #32
 80051d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051d2:	2301      	movs	r3, #1
 80051d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051da:	2300      	movs	r3, #0
 80051dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80051de:	f107 0314 	add.w	r3, r7, #20
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051e8:	f7fc f9be 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : backupIn1_Pin */
  GPIO_InitStruct.Pin = backupIn1_Pin;
 80051ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051f2:	2300      	movs	r3, #0
 80051f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80051f6:	2302      	movs	r3, #2
 80051f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 80051fa:	f107 0314 	add.w	r3, r7, #20
 80051fe:	4619      	mov	r1, r3
 8005200:	481b      	ldr	r0, [pc, #108]	; (8005270 <MX_GPIO_Init+0x14c>)
 8005202:	f7fc f9b1 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pin : backupIn0_Pin */
  GPIO_InitStruct.Pin = backupIn0_Pin;
 8005206:	2340      	movs	r3, #64	; 0x40
 8005208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800520e:	2302      	movs	r3, #2
 8005210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(backupIn0_GPIO_Port, &GPIO_InitStruct);
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	4619      	mov	r1, r3
 8005218:	4813      	ldr	r0, [pc, #76]	; (8005268 <MX_GPIO_Init+0x144>)
 800521a:	f7fc f9a5 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pins : backupOut1_Pin backupOut0_Pin PWMA_Pin */
  GPIO_InitStruct.Pin = backupOut1_Pin|backupOut0_Pin|PWMA_Pin;
 800521e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8005222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005224:	2301      	movs	r3, #1
 8005226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005228:	2302      	movs	r3, #2
 800522a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005230:	f107 0314 	add.w	r3, r7, #20
 8005234:	4619      	mov	r1, r3
 8005236:	480c      	ldr	r0, [pc, #48]	; (8005268 <MX_GPIO_Init+0x144>)
 8005238:	f7fc f996 	bl	8001568 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN1_Pin AIN2_Pin PWMB_Pin BN1_Pin 
                           BN2_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|PWMB_Pin|BN1_Pin 
 800523c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005240:	617b      	str	r3, [r7, #20]
                          |BN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005242:	2301      	movs	r3, #1
 8005244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005246:	2302      	movs	r3, #2
 8005248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800524a:	2303      	movs	r3, #3
 800524c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800524e:	f107 0314 	add.w	r3, r7, #20
 8005252:	4619      	mov	r1, r3
 8005254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005258:	f7fc f986 	bl	8001568 <HAL_GPIO_Init>

}
 800525c:	bf00      	nop
 800525e:	3728      	adds	r7, #40	; 0x28
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	48000800 	.word	0x48000800
 800526c:	10210000 	.word	0x10210000
 8005270:	48000400 	.word	0x48000400

08005274 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800527c:	2001      	movs	r0, #1
 800527e:	f7fe fcac 	bl	8003bda <osDelay>
 8005282:	e7fb      	b.n	800527c <StartDefaultTask+0x8>

08005284 <motor0Loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor0Loop */
void motor0Loop(void const * argument)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 800528c:	2201      	movs	r2, #1
 800528e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005292:	481d      	ldr	r0, [pc, #116]	; (8005308 <motor0Loop+0x84>)
 8005294:	f7fc faf6 	bl	8001884 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN motor0Loop */
  /* Infinite loop */
  for(;;)
  {

	  if(m1State == On){
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <motor0Loop+0x88>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1fb      	bne.n	8005298 <motor0Loop+0x14>
			if(m1Speed>MAX_SPEED || m1Speed<0){
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <motor0Loop+0x8c>)
 80052a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052a6:	2b14      	cmp	r3, #20
 80052a8:	dc04      	bgt.n	80052b4 <motor0Loop+0x30>
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <motor0Loop+0x8c>)
 80052ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da09      	bge.n	80052c8 <motor0Loop+0x44>
				HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 80052b4:	2201      	movs	r2, #1
 80052b6:	2120      	movs	r1, #32
 80052b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052bc:	f7fc fae2 	bl	8001884 <HAL_GPIO_WritePin>
				errorMot = true;
 80052c0:	4b14      	ldr	r3, [pc, #80]	; (8005314 <motor0Loop+0x90>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	e01d      	b.n	8005304 <motor0Loop+0x80>
			}
			else{
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_SET);
 80052c8:	2201      	movs	r2, #1
 80052ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052ce:	480e      	ldr	r0, [pc, #56]	; (8005308 <motor0Loop+0x84>)
 80052d0:	f7fc fad8 	bl	8001884 <HAL_GPIO_WritePin>
				setCorrectDirM1();
 80052d4:	f000 fa6c 	bl	80057b0 <setCorrectDirM1>
				osDelay(m1Speed);
 80052d8:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <motor0Loop+0x8c>)
 80052da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe fc7b 	bl	8003bda <osDelay>
				resetDirM1();
 80052e4:	f000 fa8c 	bl	8005800 <resetDirM1>
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_RESET);
 80052e8:	2200      	movs	r2, #0
 80052ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052ee:	4806      	ldr	r0, [pc, #24]	; (8005308 <motor0Loop+0x84>)
 80052f0:	f7fc fac8 	bl	8001884 <HAL_GPIO_WritePin>
				osDelay(MAX_SPEED-m1Speed);
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <motor0Loop+0x8c>)
 80052f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052fa:	f1c3 0314 	rsb	r3, r3, #20
 80052fe:	4618      	mov	r0, r3
 8005300:	f7fe fc6b 	bl	8003bda <osDelay>
	  if(m1State == On){
 8005304:	e7c8      	b.n	8005298 <motor0Loop+0x14>
 8005306:	bf00      	nop
 8005308:	48000800 	.word	0x48000800
 800530c:	20000008 	.word	0x20000008
 8005310:	2000000a 	.word	0x2000000a
 8005314:	200019de 	.word	0x200019de

08005318 <motor1Loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor1Loop */
void motor1Loop(void const * argument)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor1Loop */
  /* Infinite loop */
  for(;;)
  {
	  if(m2State == On){
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <motor1Loop+0x7c>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1fb      	bne.n	8005320 <motor1Loop+0x8>
		  if(m2Speed>MAX_SPEED || m2Speed<0){
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <motor1Loop+0x80>)
 800532a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800532e:	2b14      	cmp	r3, #20
 8005330:	dc04      	bgt.n	800533c <motor1Loop+0x24>
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <motor1Loop+0x80>)
 8005334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005338:	2b00      	cmp	r3, #0
 800533a:	da09      	bge.n	8005350 <motor1Loop+0x38>
			  HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 800533c:	2201      	movs	r2, #1
 800533e:	2120      	movs	r1, #32
 8005340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005344:	f7fc fa9e 	bl	8001884 <HAL_GPIO_WritePin>
			  errorMot = true;
 8005348:	4b14      	ldr	r3, [pc, #80]	; (800539c <motor1Loop+0x84>)
 800534a:	2201      	movs	r2, #1
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e01f      	b.n	8005390 <motor1Loop+0x78>
		  }
		  else{
			  HAL_GPIO_WritePin(PWMB_PORT,PWMB_PIN,GPIO_PIN_SET);
 8005350:	2201      	movs	r2, #1
 8005352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800535a:	f7fc fa93 	bl	8001884 <HAL_GPIO_WritePin>
			  setCorrectDirM2();
 800535e:	f000 fa61 	bl	8005824 <setCorrectDirM2>
			  osDelay(m2Speed);
 8005362:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <motor1Loop+0x80>)
 8005364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fc36 	bl	8003bda <osDelay>
			  resetDirM2();
 800536e:	f000 fa81 	bl	8005874 <resetDirM2>
			  HAL_GPIO_WritePin(PWMB_PORT,PWMB_PIN,GPIO_PIN_RESET);
 8005372:	2200      	movs	r2, #0
 8005374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800537c:	f7fc fa82 	bl	8001884 <HAL_GPIO_WritePin>
			  osDelay(MAX_SPEED-m2Speed);
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <motor1Loop+0x80>)
 8005382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005386:	f1c3 0314 	rsb	r3, r3, #20
 800538a:	4618      	mov	r0, r3
 800538c:	f7fe fc25 	bl	8003bda <osDelay>
	  if(m2State == On){
 8005390:	e7c6      	b.n	8005320 <motor1Loop+0x8>
 8005392:	bf00      	nop
 8005394:	20000009 	.word	0x20000009
 8005398:	2000000c 	.word	0x2000000c
 800539c:	200019de 	.word	0x200019de

080053a0 <ADCLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADCLoop */
void ADCLoop(void const * argument)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	volatile uint16_t adcl1 = adc1, adcl2 = adc2, adcl3 = adc3, adcl4 = adc4, adcl5 = adc5;
 80053a8:	4b49      	ldr	r3, [pc, #292]	; (80054d0 <ADCLoop+0x130>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	82fb      	strh	r3, [r7, #22]
 80053ae:	4b49      	ldr	r3, [pc, #292]	; (80054d4 <ADCLoop+0x134>)
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	82bb      	strh	r3, [r7, #20]
 80053b4:	4b48      	ldr	r3, [pc, #288]	; (80054d8 <ADCLoop+0x138>)
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	827b      	strh	r3, [r7, #18]
 80053ba:	4b48      	ldr	r3, [pc, #288]	; (80054dc <ADCLoop+0x13c>)
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	823b      	strh	r3, [r7, #16]
 80053c0:	4b47      	ldr	r3, [pc, #284]	; (80054e0 <ADCLoop+0x140>)
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	81fb      	strh	r3, [r7, #14]

	while (1)
	{
	config(1);
 80053c6:	2001      	movs	r0, #1
 80053c8:	f000 f890 	bl	80054ec <config>
	HAL_ADC_Start(&hadc1);
 80053cc:	4845      	ldr	r0, [pc, #276]	; (80054e4 <ADCLoop+0x144>)
 80053ce:	f7fb f937 	bl	8000640 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 80053d2:	4945      	ldr	r1, [pc, #276]	; (80054e8 <ADCLoop+0x148>)
 80053d4:	4843      	ldr	r0, [pc, #268]	; (80054e4 <ADCLoop+0x144>)
 80053d6:	f7fb fa49 	bl	800086c <HAL_ADC_PollForConversion>
	adcl5 = HAL_ADC_GetValue(&hadc1);
 80053da:	4842      	ldr	r0, [pc, #264]	; (80054e4 <ADCLoop+0x144>)
 80053dc:	f7fb fb40 	bl	8000a60 <HAL_ADC_GetValue>
 80053e0:	4603      	mov	r3, r0
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	81fb      	strh	r3, [r7, #14]
	adcl5 = adcl5 / 4;
 80053e6:	89fb      	ldrh	r3, [r7, #14]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	81fb      	strh	r3, [r7, #14]

	config(6);
 80053f0:	2006      	movs	r0, #6
 80053f2:	f000 f87b 	bl	80054ec <config>
	HAL_ADC_Start(&hadc1);
 80053f6:	483b      	ldr	r0, [pc, #236]	; (80054e4 <ADCLoop+0x144>)
 80053f8:	f7fb f922 	bl	8000640 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 80053fc:	493a      	ldr	r1, [pc, #232]	; (80054e8 <ADCLoop+0x148>)
 80053fe:	4839      	ldr	r0, [pc, #228]	; (80054e4 <ADCLoop+0x144>)
 8005400:	f7fb fa34 	bl	800086c <HAL_ADC_PollForConversion>
	adcl2 = HAL_ADC_GetValue(&hadc1);
 8005404:	4837      	ldr	r0, [pc, #220]	; (80054e4 <ADCLoop+0x144>)
 8005406:	f7fb fb2b 	bl	8000a60 <HAL_ADC_GetValue>
 800540a:	4603      	mov	r3, r0
 800540c:	b29b      	uxth	r3, r3
 800540e:	82bb      	strh	r3, [r7, #20]
	adcl2 = adcl2 / 4;
 8005410:	8abb      	ldrh	r3, [r7, #20]
 8005412:	b29b      	uxth	r3, r3
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	b29b      	uxth	r3, r3
 8005418:	82bb      	strh	r3, [r7, #20]

	config(7);
 800541a:	2007      	movs	r0, #7
 800541c:	f000 f866 	bl	80054ec <config>
	HAL_ADC_Start(&hadc1);
 8005420:	4830      	ldr	r0, [pc, #192]	; (80054e4 <ADCLoop+0x144>)
 8005422:	f7fb f90d 	bl	8000640 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8005426:	4930      	ldr	r1, [pc, #192]	; (80054e8 <ADCLoop+0x148>)
 8005428:	482e      	ldr	r0, [pc, #184]	; (80054e4 <ADCLoop+0x144>)
 800542a:	f7fb fa1f 	bl	800086c <HAL_ADC_PollForConversion>
	adcl1 = HAL_ADC_GetValue(&hadc1);
 800542e:	482d      	ldr	r0, [pc, #180]	; (80054e4 <ADCLoop+0x144>)
 8005430:	f7fb fb16 	bl	8000a60 <HAL_ADC_GetValue>
 8005434:	4603      	mov	r3, r0
 8005436:	b29b      	uxth	r3, r3
 8005438:	82fb      	strh	r3, [r7, #22]
	adcl1 = adcl1 / 4;
 800543a:	8afb      	ldrh	r3, [r7, #22]
 800543c:	b29b      	uxth	r3, r3
 800543e:	089b      	lsrs	r3, r3, #2
 8005440:	b29b      	uxth	r3, r3
 8005442:	82fb      	strh	r3, [r7, #22]

	config(8);
 8005444:	2008      	movs	r0, #8
 8005446:	f000 f851 	bl	80054ec <config>
	HAL_ADC_Start(&hadc1);
 800544a:	4826      	ldr	r0, [pc, #152]	; (80054e4 <ADCLoop+0x144>)
 800544c:	f7fb f8f8 	bl	8000640 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8005450:	4925      	ldr	r1, [pc, #148]	; (80054e8 <ADCLoop+0x148>)
 8005452:	4824      	ldr	r0, [pc, #144]	; (80054e4 <ADCLoop+0x144>)
 8005454:	f7fb fa0a 	bl	800086c <HAL_ADC_PollForConversion>
	adcl4 = HAL_ADC_GetValue(&hadc1);
 8005458:	4822      	ldr	r0, [pc, #136]	; (80054e4 <ADCLoop+0x144>)
 800545a:	f7fb fb01 	bl	8000a60 <HAL_ADC_GetValue>
 800545e:	4603      	mov	r3, r0
 8005460:	b29b      	uxth	r3, r3
 8005462:	823b      	strh	r3, [r7, #16]
	adcl4 = adcl4 / 4;
 8005464:	8a3b      	ldrh	r3, [r7, #16]
 8005466:	b29b      	uxth	r3, r3
 8005468:	089b      	lsrs	r3, r3, #2
 800546a:	b29b      	uxth	r3, r3
 800546c:	823b      	strh	r3, [r7, #16]

	config(9);
 800546e:	2009      	movs	r0, #9
 8005470:	f000 f83c 	bl	80054ec <config>
	HAL_ADC_Start(&hadc1);
 8005474:	481b      	ldr	r0, [pc, #108]	; (80054e4 <ADCLoop+0x144>)
 8005476:	f7fb f8e3 	bl	8000640 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 800547a:	491b      	ldr	r1, [pc, #108]	; (80054e8 <ADCLoop+0x148>)
 800547c:	4819      	ldr	r0, [pc, #100]	; (80054e4 <ADCLoop+0x144>)
 800547e:	f7fb f9f5 	bl	800086c <HAL_ADC_PollForConversion>
	adcl3 = HAL_ADC_GetValue(&hadc1);
 8005482:	4818      	ldr	r0, [pc, #96]	; (80054e4 <ADCLoop+0x144>)
 8005484:	f7fb faec 	bl	8000a60 <HAL_ADC_GetValue>
 8005488:	4603      	mov	r3, r0
 800548a:	b29b      	uxth	r3, r3
 800548c:	827b      	strh	r3, [r7, #18]
	adcl3 = adcl3 / 4;
 800548e:	8a7b      	ldrh	r3, [r7, #18]
 8005490:	b29b      	uxth	r3, r3
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	b29b      	uxth	r3, r3
 8005496:	827b      	strh	r3, [r7, #18]

	osDelay(2);
 8005498:	2002      	movs	r0, #2
 800549a:	f7fe fb9e 	bl	8003bda <osDelay>

	adc1 = adcl1;
 800549e:	8afb      	ldrh	r3, [r7, #22]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <ADCLoop+0x130>)
 80054a4:	801a      	strh	r2, [r3, #0]
	adc2 = adcl2;
 80054a6:	8abb      	ldrh	r3, [r7, #20]
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <ADCLoop+0x134>)
 80054ac:	801a      	strh	r2, [r3, #0]
	adc3 = adcl3;
 80054ae:	8a7b      	ldrh	r3, [r7, #18]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <ADCLoop+0x138>)
 80054b4:	801a      	strh	r2, [r3, #0]
	adc4 = adcl4;
 80054b6:	8a3b      	ldrh	r3, [r7, #16]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <ADCLoop+0x13c>)
 80054bc:	801a      	strh	r2, [r3, #0]
	adc5 = adcl5;
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <ADCLoop+0x140>)
 80054c4:	801a      	strh	r2, [r3, #0]

	osDelay(10);
 80054c6:	200a      	movs	r0, #10
 80054c8:	f7fe fb87 	bl	8003bda <osDelay>
	{
 80054cc:	e77b      	b.n	80053c6 <ADCLoop+0x26>
 80054ce:	bf00      	nop
 80054d0:	200019e6 	.word	0x200019e6
 80054d4:	200019e8 	.word	0x200019e8
 80054d8:	200019ec 	.word	0x200019ec
 80054dc:	200019ea 	.word	0x200019ea
 80054e0:	200019e4 	.word	0x200019e4
 80054e4:	200019f8 	.word	0x200019f8
 80054e8:	000186a0 	.word	0x000186a0

080054ec <config>:
	}
}

void config(int a) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
ADC_ChannelConfTypeDef sTmp = {0};
 80054f4:	f107 0308 	add.w	r3, r7, #8
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
 8005504:	615a      	str	r2, [r3, #20]
switch(a) {
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3b01      	subs	r3, #1
 800550a:	2b08      	cmp	r3, #8
 800550c:	d823      	bhi.n	8005556 <config+0x6a>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <config+0x28>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005539 	.word	0x08005539
 8005518:	08005557 	.word	0x08005557
 800551c:	08005557 	.word	0x08005557
 8005520:	08005557 	.word	0x08005557
 8005524:	08005557 	.word	0x08005557
 8005528:	0800553f 	.word	0x0800553f
 800552c:	08005545 	.word	0x08005545
 8005530:	0800554b 	.word	0x0800554b
 8005534:	08005551 	.word	0x08005551
case 1:
sTmp.Channel = ADC_CHANNEL_1;
 8005538:	2301      	movs	r3, #1
 800553a:	60bb      	str	r3, [r7, #8]
break;
 800553c:	e00d      	b.n	800555a <config+0x6e>
case 6:
sTmp.Channel = ADC_CHANNEL_6;
 800553e:	2306      	movs	r3, #6
 8005540:	60bb      	str	r3, [r7, #8]
break;
 8005542:	e00a      	b.n	800555a <config+0x6e>
case 7:
sTmp.Channel = ADC_CHANNEL_7;
 8005544:	2307      	movs	r3, #7
 8005546:	60bb      	str	r3, [r7, #8]
break;
 8005548:	e007      	b.n	800555a <config+0x6e>
case 8:
sTmp.Channel = ADC_CHANNEL_8;
 800554a:	2308      	movs	r3, #8
 800554c:	60bb      	str	r3, [r7, #8]
break;
 800554e:	e004      	b.n	800555a <config+0x6e>
case 9:
sTmp.Channel = ADC_CHANNEL_9;
 8005550:	2309      	movs	r3, #9
 8005552:	60bb      	str	r3, [r7, #8]
break;
 8005554:	e001      	b.n	800555a <config+0x6e>
default:
sTmp.Channel = ADC_CHANNEL_1;
 8005556:	2301      	movs	r3, #1
 8005558:	60bb      	str	r3, [r7, #8]
}
sTmp.Rank = ADC_REGULAR_RANK_1;
 800555a:	2301      	movs	r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
sTmp.SingleDiff = ADC_SINGLE_ENDED;
 800555e:	2300      	movs	r3, #0
 8005560:	617b      	str	r3, [r7, #20]
sTmp.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
sTmp.OffsetNumber = ADC_OFFSET_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	61bb      	str	r3, [r7, #24]
sTmp.Offset = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
if (HAL_ADC_ConfigChannel(&hadc1, &sTmp) != HAL_OK)
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	4619      	mov	r1, r3
 8005574:	4805      	ldr	r0, [pc, #20]	; (800558c <config+0xa0>)
 8005576:	f7fb fa81 	bl	8000a7c <HAL_ADC_ConfigChannel>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <config+0x98>
{
Error_Handler();
 8005580:	f000 f90e 	bl	80057a0 <Error_Handler>
}
}
 8005584:	bf00      	nop
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200019f8 	.word	0x200019f8

08005590 <controlLoop>:
*/
/* USER CODE END Header_controlLoop */
#define CONTROL_HYST			10

void controlLoop(void const * argument)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN controlLoop */
	/* Infinite loop */

	m1State = On;
 8005598:	4b32      	ldr	r3, [pc, #200]	; (8005664 <controlLoop+0xd4>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
	m2State = On;
 800559e:	4b32      	ldr	r3, [pc, #200]	; (8005668 <controlLoop+0xd8>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	701a      	strb	r2, [r3, #0]
	m1Speed = 0;
 80055a4:	4b31      	ldr	r3, [pc, #196]	; (800566c <controlLoop+0xdc>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	801a      	strh	r2, [r3, #0]
	m2Speed = 0;
 80055aa:	4b31      	ldr	r3, [pc, #196]	; (8005670 <controlLoop+0xe0>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	801a      	strh	r2, [r3, #0]

	goAhead();
 80055b0:	f000 f8bc 	bl	800572c <goAhead>
	osDelay(5000);
 80055b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80055b8:	f7fe fb0f 	bl	8003bda <osDelay>
	turnLeft();
 80055bc:	f000 f8be 	bl	800573c <turnLeft>
	osDelay(3000);
 80055c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80055c4:	f7fe fb09 	bl	8003bda <osDelay>
	turnRight();
 80055c8:	f000 f8c0 	bl	800574c <turnRight>
	osDelay(3000);
 80055cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80055d0:	f7fe fb03 	bl	8003bda <osDelay>


	for(;;)
	{
	int middle = (0 * adc1 + 1000 * adc2 + 2000 * adc3 + 3000 * adc4 + 4000 * adc5) / (adc1 + adc2 + adc3 + adc4 + adc5);
 80055d4:	4b27      	ldr	r3, [pc, #156]	; (8005674 <controlLoop+0xe4>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055de:	fb03 f202 	mul.w	r2, r3, r2
 80055e2:	4b25      	ldr	r3, [pc, #148]	; (8005678 <controlLoop+0xe8>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	4619      	mov	r1, r3
 80055e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80055ec:	fb03 f301 	mul.w	r3, r3, r1
 80055f0:	441a      	add	r2, r3
 80055f2:	4b22      	ldr	r3, [pc, #136]	; (800567c <controlLoop+0xec>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80055fc:	fb03 f301 	mul.w	r3, r3, r1
 8005600:	441a      	add	r2, r3
 8005602:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <controlLoop+0xf0>)
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	4619      	mov	r1, r3
 8005608:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800560c:	fb03 f301 	mul.w	r3, r3, r1
 8005610:	441a      	add	r2, r3
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <controlLoop+0xf4>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	4b16      	ldr	r3, [pc, #88]	; (8005674 <controlLoop+0xe4>)
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	440b      	add	r3, r1
 800561e:	4916      	ldr	r1, [pc, #88]	; (8005678 <controlLoop+0xe8>)
 8005620:	8809      	ldrh	r1, [r1, #0]
 8005622:	440b      	add	r3, r1
 8005624:	4915      	ldr	r1, [pc, #84]	; (800567c <controlLoop+0xec>)
 8005626:	8809      	ldrh	r1, [r1, #0]
 8005628:	440b      	add	r3, r1
 800562a:	4915      	ldr	r1, [pc, #84]	; (8005680 <controlLoop+0xf0>)
 800562c:	8809      	ldrh	r1, [r1, #0]
 800562e:	440b      	add	r3, r1
 8005630:	fb92 f3f3 	sdiv	r3, r2, r3
 8005634:	60fb      	str	r3, [r7, #12]

	if (middle + CONTROL_HYST < 2000) {
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	330a      	adds	r3, #10
 800563a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800563e:	da02      	bge.n	8005646 <controlLoop+0xb6>
		turnLeft();
 8005640:	f000 f87c 	bl	800573c <turnLeft>
 8005644:	e009      	b.n	800565a <controlLoop+0xca>
		}
		else
			if (middle - CONTROL_HYST > 2000) {
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3b0a      	subs	r3, #10
 800564a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800564e:	dd02      	ble.n	8005656 <controlLoop+0xc6>
				turnRight();
 8005650:	f000 f87c 	bl	800574c <turnRight>
 8005654:	e001      	b.n	800565a <controlLoop+0xca>
				}
				else {
					goAhead();
 8005656:	f000 f869 	bl	800572c <goAhead>
					}
	osDelay(140);
 800565a:	208c      	movs	r0, #140	; 0x8c
 800565c:	f7fe fabd 	bl	8003bda <osDelay>
	{
 8005660:	e7b8      	b.n	80055d4 <controlLoop+0x44>
 8005662:	bf00      	nop
 8005664:	20000008 	.word	0x20000008
 8005668:	20000009 	.word	0x20000009
 800566c:	2000000a 	.word	0x2000000a
 8005670:	2000000c 	.word	0x2000000c
 8005674:	200019e8 	.word	0x200019e8
 8005678:	200019ec 	.word	0x200019ec
 800567c:	200019ea 	.word	0x200019ea
 8005680:	200019e4 	.word	0x200019e4
 8005684:	200019e6 	.word	0x200019e6

08005688 <changeSpeed>:
	}
	/* USER CODE END controlLoop */   /* USER CODE END controlLoop */
}

void changeSpeed(int leftSpeed, int rightSpeed) {
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
if (leftSpeed > m1Speed) m1Speed++;
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <changeSpeed+0x9c>)
 8005694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005698:	461a      	mov	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	429a      	cmp	r2, r3
 800569e:	da09      	bge.n	80056b4 <changeSpeed+0x2c>
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <changeSpeed+0x9c>)
 80056a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	b21a      	sxth	r2, r3
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <changeSpeed+0x9c>)
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	e00f      	b.n	80056d4 <changeSpeed+0x4c>
else if (leftSpeed < m1Speed) m1Speed--;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <changeSpeed+0x9c>)
 80056b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056ba:	461a      	mov	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	dd08      	ble.n	80056d4 <changeSpeed+0x4c>
 80056c2:	4b18      	ldr	r3, [pc, #96]	; (8005724 <changeSpeed+0x9c>)
 80056c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	b21a      	sxth	r2, r3
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <changeSpeed+0x9c>)
 80056d2:	801a      	strh	r2, [r3, #0]
if (rightSpeed > m2Speed) m2Speed++;
 80056d4:	4b14      	ldr	r3, [pc, #80]	; (8005728 <changeSpeed+0xa0>)
 80056d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056da:	461a      	mov	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	da09      	bge.n	80056f6 <changeSpeed+0x6e>
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <changeSpeed+0xa0>)
 80056e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3301      	adds	r3, #1
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	b21a      	sxth	r2, r3
 80056f0:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <changeSpeed+0xa0>)
 80056f2:	801a      	strh	r2, [r3, #0]
else if (rightSpeed < m2Speed) m2Speed--;
}
 80056f4:	e00f      	b.n	8005716 <changeSpeed+0x8e>
else if (rightSpeed < m2Speed) m2Speed--;
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <changeSpeed+0xa0>)
 80056f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056fc:	461a      	mov	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	dd08      	ble.n	8005716 <changeSpeed+0x8e>
 8005704:	4b08      	ldr	r3, [pc, #32]	; (8005728 <changeSpeed+0xa0>)
 8005706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29b      	uxth	r3, r3
 8005710:	b21a      	sxth	r2, r3
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <changeSpeed+0xa0>)
 8005714:	801a      	strh	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000000a 	.word	0x2000000a
 8005728:	2000000c 	.word	0x2000000c

0800572c <goAhead>:

void goAhead() {
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
changeSpeed(6,6);
 8005730:	2106      	movs	r1, #6
 8005732:	2006      	movs	r0, #6
 8005734:	f7ff ffa8 	bl	8005688 <changeSpeed>
}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}

0800573c <turnLeft>:

void turnLeft() {
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
changeSpeed(4, 6);
 8005740:	2106      	movs	r1, #6
 8005742:	2004      	movs	r0, #4
 8005744:	f7ff ffa0 	bl	8005688 <changeSpeed>
}
 8005748:	bf00      	nop
 800574a:	bd80      	pop	{r7, pc}

0800574c <turnRight>:

void turnRight() {
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
changeSpeed(6, 4);
 8005750:	2104      	movs	r1, #4
 8005752:	2006      	movs	r0, #6
 8005754:	f7ff ff98 	bl	8005688 <changeSpeed>
}
 8005758:	bf00      	nop
 800575a:	bd80      	pop	{r7, pc}

0800575c <backupLoop0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_backupLoop0 */
void backupLoop0(void const * argument)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN backupLoop0 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005764:	2001      	movs	r0, #1
 8005766:	f7fe fa38 	bl	8003bda <osDelay>
 800576a:	e7fb      	b.n	8005764 <backupLoop0+0x8>

0800576c <backupLoop1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_backupLoop1 */
void backupLoop1(void const * argument)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN backupLoop1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8005774:	2001      	movs	r0, #1
 8005776:	f7fe fa30 	bl	8003bda <osDelay>
 800577a:	e7fb      	b.n	8005774 <backupLoop1+0x8>

0800577c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a04      	ldr	r2, [pc, #16]	; (800579c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d101      	bne.n	8005792 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800578e:	f7fa fd3d 	bl	800020c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40012c00 	.word	0x40012c00

080057a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <setCorrectDirM1>:
#include "stdbool.h"
#include "main.h"
#include "motors.h"

void setCorrectDirM1(void){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
	if(m1Dir == Forw){
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <setCorrectDirM1+0x4c>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10e      	bne.n	80057da <setCorrectDirM1+0x2a>
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_SET);
 80057bc:	2201      	movs	r2, #1
 80057be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057c6:	f7fc f85d 	bl	8001884 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_RESET);
 80057ca:	2200      	movs	r2, #0
 80057cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057d4:	f7fc f856 	bl	8001884 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_SET);
	}
}
 80057d8:	e00d      	b.n	80057f6 <setCorrectDirM1+0x46>
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
 80057da:	2200      	movs	r2, #0
 80057dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057e4:	f7fc f84e 	bl	8001884 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_SET);
 80057e8:	2201      	movs	r2, #1
 80057ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057f2:	f7fc f847 	bl	8001884 <HAL_GPIO_WritePin>
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	200019dc 	.word	0x200019dc

08005800 <resetDirM1>:

void resetDirM1(void){
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8005804:	2200      	movs	r2, #0
 8005806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800580a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580e:	f7fc f839 	bl	8001884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_RESET);
 8005812:	2200      	movs	r2, #0
 8005814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800581c:	f7fc f832 	bl	8001884 <HAL_GPIO_WritePin>
}
 8005820:	bf00      	nop
 8005822:	bd80      	pop	{r7, pc}

08005824 <setCorrectDirM2>:

void setCorrectDirM2(void){
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	if(m2Dir == Forw){
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <setCorrectDirM2+0x4c>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10e      	bne.n	800584e <setCorrectDirM2+0x2a>
		HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_SET);
 8005830:	2201      	movs	r2, #1
 8005832:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800583a:	f7fc f823 	bl	8001884 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_RESET);
 800583e:	2200      	movs	r2, #0
 8005840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005848:	f7fc f81c 	bl	8001884 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_SET);
	}
}
 800584c:	e00d      	b.n	800586a <setCorrectDirM2+0x46>
		HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_RESET);
 800584e:	2200      	movs	r2, #0
 8005850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005858:	f7fc f814 	bl	8001884 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_SET);
 800585c:	2201      	movs	r2, #1
 800585e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005866:	f7fc f80d 	bl	8001884 <HAL_GPIO_WritePin>
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	200019dd 	.word	0x200019dd

08005874 <resetDirM2>:

void resetDirM2(void){
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_RESET);
 8005878:	2200      	movs	r2, #0
 800587a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800587e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005882:	f7fb ffff 	bl	8001884 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_RESET);
 8005886:	2200      	movs	r2, #0
 8005888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800588c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005890:	f7fb fff8 	bl	8001884 <HAL_GPIO_WritePin>
}
 8005894:	bf00      	nop
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800589e:	4a11      	ldr	r2, [pc, #68]	; (80058e4 <HAL_MspInit+0x4c>)
 80058a0:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <HAL_MspInit+0x4c>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	6193      	str	r3, [r2, #24]
 80058aa:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <HAL_MspInit+0x4c>)
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	4a0b      	ldr	r2, [pc, #44]	; (80058e4 <HAL_MspInit+0x4c>)
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <HAL_MspInit+0x4c>)
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c0:	61d3      	str	r3, [r2, #28]
 80058c2:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <HAL_MspInit+0x4c>)
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ca:	603b      	str	r3, [r7, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80058ce:	2200      	movs	r2, #0
 80058d0:	210f      	movs	r1, #15
 80058d2:	f06f 0001 	mvn.w	r0, #1
 80058d6:	f7fb fe1d 	bl	8001514 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000

080058e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08c      	sub	sp, #48	; 0x30
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058f0:	f107 031c 	add.w	r3, r7, #28
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	605a      	str	r2, [r3, #4]
 80058fa:	609a      	str	r2, [r3, #8]
 80058fc:	60da      	str	r2, [r3, #12]
 80058fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005908:	d155      	bne.n	80059b6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800590a:	4a2d      	ldr	r2, [pc, #180]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6153      	str	r3, [r2, #20]
 8005916:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005922:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005924:	4b26      	ldr	r3, [pc, #152]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800592c:	6153      	str	r3, [r2, #20]
 800592e:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593a:	4a21      	ldr	r2, [pc, #132]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005944:	6153      	str	r3, [r2, #20]
 8005946:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800595c:	6153      	str	r3, [r2, #20]
 800595e:	4b18      	ldr	r3, [pc, #96]	; (80059c0 <HAL_ADC_MspInit+0xd8>)
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PB11     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800596a:	230f      	movs	r3, #15
 800596c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800596e:	2303      	movs	r3, #3
 8005970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005972:	2300      	movs	r3, #0
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005976:	f107 031c 	add.w	r3, r7, #28
 800597a:	4619      	mov	r1, r3
 800597c:	4811      	ldr	r0, [pc, #68]	; (80059c4 <HAL_ADC_MspInit+0xdc>)
 800597e:	f7fb fdf3 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005982:	2301      	movs	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005986:	2303      	movs	r3, #3
 8005988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	2300      	movs	r3, #0
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800598e:	f107 031c 	add.w	r3, r7, #28
 8005992:	4619      	mov	r1, r3
 8005994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005998:	f7fb fde6 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800599c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059a2:	2303      	movs	r3, #3
 80059a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059aa:	f107 031c 	add.w	r3, r7, #28
 80059ae:	4619      	mov	r1, r3
 80059b0:	4805      	ldr	r0, [pc, #20]	; (80059c8 <HAL_ADC_MspInit+0xe0>)
 80059b2:	f7fb fdd9 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80059b6:	bf00      	nop
 80059b8:	3730      	adds	r7, #48	; 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	48000800 	.word	0x48000800
 80059c8:	48000400 	.word	0x48000400

080059cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d4:	f107 0314 	add.w	r3, r7, #20
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	605a      	str	r2, [r3, #4]
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	60da      	str	r2, [r3, #12]
 80059e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a17      	ldr	r2, [pc, #92]	; (8005a48 <HAL_UART_MspInit+0x7c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d128      	bne.n	8005a40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_UART_MspInit+0x80>)
 80059f0:	4b16      	ldr	r3, [pc, #88]	; (8005a4c <HAL_UART_MspInit+0x80>)
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f8:	61d3      	str	r3, [r2, #28]
 80059fa:	4b14      	ldr	r3, [pc, #80]	; (8005a4c <HAL_UART_MspInit+0x80>)
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a02:	613b      	str	r3, [r7, #16]
 8005a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a06:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <HAL_UART_MspInit+0x80>)
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <HAL_UART_MspInit+0x80>)
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a10:	6153      	str	r3, [r2, #20]
 8005a12:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <HAL_UART_MspInit+0x80>)
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005a1e:	230c      	movs	r3, #12
 8005a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a22:	2302      	movs	r3, #2
 8005a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005a2e:	2307      	movs	r3, #7
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a32:	f107 0314 	add.w	r3, r7, #20
 8005a36:	4619      	mov	r1, r3
 8005a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a3c:	f7fb fd94 	bl	8001568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005a40:	bf00      	nop
 8005a42:	3728      	adds	r7, #40	; 0x28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	40004400 	.word	0x40004400
 8005a4c:	40021000 	.word	0x40021000

08005a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	; 0x30
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005a60:	2200      	movs	r2, #0
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	2019      	movs	r0, #25
 8005a66:	f7fb fd55 	bl	8001514 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8005a6a:	2019      	movs	r0, #25
 8005a6c:	f7fb fd6e 	bl	800154c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005a70:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <HAL_InitTick+0x9c>)
 8005a72:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <HAL_InitTick+0x9c>)
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a7a:	6193      	str	r3, [r2, #24]
 8005a7c:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <HAL_InitTick+0x9c>)
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a88:	f107 0210 	add.w	r2, r7, #16
 8005a8c:	f107 0314 	add.w	r3, r7, #20
 8005a90:	4611      	mov	r1, r2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd f832 	bl	8002afc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005a98:	f7fd f80e 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8005a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <HAL_InitTick+0xa0>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	0c9b      	lsrs	r3, r3, #18
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005aac:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <HAL_InitTick+0xa4>)
 8005aae:	4a12      	ldr	r2, [pc, #72]	; (8005af8 <HAL_InitTick+0xa8>)
 8005ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <HAL_InitTick+0xa4>)
 8005ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005aba:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <HAL_InitTick+0xa4>)
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <HAL_InitTick+0xa4>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac6:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_InitTick+0xa4>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005acc:	4809      	ldr	r0, [pc, #36]	; (8005af4 <HAL_InitTick+0xa4>)
 8005ace:	f7fd fa63 	bl	8002f98 <HAL_TIM_Base_Init>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005ad8:	4806      	ldr	r0, [pc, #24]	; (8005af4 <HAL_InitTick+0xa4>)
 8005ada:	f7fd fa92 	bl	8003002 <HAL_TIM_Base_Start_IT>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	e000      	b.n	8005ae4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3730      	adds	r7, #48	; 0x30
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000
 8005af0:	431bde83 	.word	0x431bde83
 8005af4:	20001ad0 	.word	0x20001ad0
 8005af8:	40012c00 	.word	0x40012c00

08005afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b00:	bf00      	nop
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b0e:	e7fe      	b.n	8005b0e <HardFault_Handler+0x4>

08005b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b14:	e7fe      	b.n	8005b14 <MemManage_Handler+0x4>

08005b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b16:	b480      	push	{r7}
 8005b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b1a:	e7fe      	b.n	8005b1a <BusFault_Handler+0x4>

08005b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b20:	e7fe      	b.n	8005b20 <UsageFault_Handler+0x4>

08005b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005b36:	f7fd fa7f 	bl	8003038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20001ad0 	.word	0x20001ad0

08005b44 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b48:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <SystemInit+0x84>)
 8005b4a:	4b1f      	ldr	r3, [pc, #124]	; (8005bc8 <SystemInit+0x84>)
 8005b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <SystemInit+0x88>)
 8005b5a:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <SystemInit+0x88>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f043 0301 	orr.w	r3, r3, #1
 8005b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005b64:	4919      	ldr	r1, [pc, #100]	; (8005bcc <SystemInit+0x88>)
 8005b66:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <SystemInit+0x88>)
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <SystemInit+0x8c>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <SystemInit+0x88>)
 8005b72:	4b16      	ldr	r3, [pc, #88]	; (8005bcc <SystemInit+0x88>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b7e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005b80:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <SystemInit+0x88>)
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <SystemInit+0x88>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b8a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005b8c:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <SystemInit+0x88>)
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <SystemInit+0x88>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005b96:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005b98:	4a0c      	ldr	r2, [pc, #48]	; (8005bcc <SystemInit+0x88>)
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <SystemInit+0x88>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f023 030f 	bic.w	r3, r3, #15
 8005ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005ba4:	4909      	ldr	r1, [pc, #36]	; (8005bcc <SystemInit+0x88>)
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <SystemInit+0x88>)
 8005ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005baa:	4b0a      	ldr	r3, [pc, #40]	; (8005bd4 <SystemInit+0x90>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <SystemInit+0x88>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bb6:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <SystemInit+0x84>)
 8005bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bbc:	609a      	str	r2, [r3, #8]
#endif
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	e000ed00 	.word	0xe000ed00
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	f87fc00c 	.word	0xf87fc00c
 8005bd4:	ff00fccc 	.word	0xff00fccc

08005bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005bdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005bde:	e003      	b.n	8005be8 <LoopCopyDataInit>

08005be0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005be2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005be4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005be6:	3104      	adds	r1, #4

08005be8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005be8:	480b      	ldr	r0, [pc, #44]	; (8005c18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005bec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005bee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005bf0:	d3f6      	bcc.n	8005be0 <CopyDataInit>
	ldr	r2, =_sbss
 8005bf2:	4a0b      	ldr	r2, [pc, #44]	; (8005c20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005bf4:	e002      	b.n	8005bfc <LoopFillZerobss>

08005bf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005bf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005bf8:	f842 3b04 	str.w	r3, [r2], #4

08005bfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005bfc:	4b09      	ldr	r3, [pc, #36]	; (8005c24 <LoopForever+0x16>)
	cmp	r2, r3
 8005bfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005c00:	d3f9      	bcc.n	8005bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005c02:	f7ff ff9f 	bl	8005b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c06:	f000 f811 	bl	8005c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005c0a:	f7ff f8ed 	bl	8004de8 <main>

08005c0e <LoopForever>:

LoopForever:
    b LoopForever
 8005c0e:	e7fe      	b.n	8005c0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005c10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8005c14:	08005dc0 	.word	0x08005dc0
	ldr	r0, =_sdata
 8005c18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005c1c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8005c20:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8005c24:	20001b10 	.word	0x20001b10

08005c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005c28:	e7fe      	b.n	8005c28 <ADC1_2_IRQHandler>
	...

08005c2c <__libc_init_array>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4e0d      	ldr	r6, [pc, #52]	; (8005c64 <__libc_init_array+0x38>)
 8005c30:	4c0d      	ldr	r4, [pc, #52]	; (8005c68 <__libc_init_array+0x3c>)
 8005c32:	1ba4      	subs	r4, r4, r6
 8005c34:	10a4      	asrs	r4, r4, #2
 8005c36:	2500      	movs	r5, #0
 8005c38:	42a5      	cmp	r5, r4
 8005c3a:	d109      	bne.n	8005c50 <__libc_init_array+0x24>
 8005c3c:	4e0b      	ldr	r6, [pc, #44]	; (8005c6c <__libc_init_array+0x40>)
 8005c3e:	4c0c      	ldr	r4, [pc, #48]	; (8005c70 <__libc_init_array+0x44>)
 8005c40:	f000 f820 	bl	8005c84 <_init>
 8005c44:	1ba4      	subs	r4, r4, r6
 8005c46:	10a4      	asrs	r4, r4, #2
 8005c48:	2500      	movs	r5, #0
 8005c4a:	42a5      	cmp	r5, r4
 8005c4c:	d105      	bne.n	8005c5a <__libc_init_array+0x2e>
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
 8005c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c54:	4798      	blx	r3
 8005c56:	3501      	adds	r5, #1
 8005c58:	e7ee      	b.n	8005c38 <__libc_init_array+0xc>
 8005c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c5e:	4798      	blx	r3
 8005c60:	3501      	adds	r5, #1
 8005c62:	e7f2      	b.n	8005c4a <__libc_init_array+0x1e>
 8005c64:	08005db8 	.word	0x08005db8
 8005c68:	08005db8 	.word	0x08005db8
 8005c6c:	08005db8 	.word	0x08005db8
 8005c70:	08005dbc 	.word	0x08005dbc

08005c74 <memset>:
 8005c74:	4402      	add	r2, r0
 8005c76:	4603      	mov	r3, r0
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d100      	bne.n	8005c7e <memset+0xa>
 8005c7c:	4770      	bx	lr
 8005c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c82:	e7f9      	b.n	8005c78 <memset+0x4>

08005c84 <_init>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr

08005c90 <_fini>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr
