
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800350c  0800350c  0001350c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08003510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00001afc  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001b10  20001b10  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f5c3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003d32  00000000  00000000  0003f607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b3da  00000000  00000000  00043339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ee0  00000000  00000000  0004e718  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001378  00000000  00000000  0004f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008fa9  00000000  00000000  00050970  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000060bf  00000000  00000000  00059919  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005f9d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bb4  00000000  00000000  0005fa54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080033d4 	.word	0x080033d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080033d4 	.word	0x080033d4

080001e0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x20>)
{
 80001e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ec:	2003      	movs	r0, #3
 80001ee:	f000 fd31 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f003 f81c 	bl	8003230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f8:	f002 ff74 	bl	80030e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001fc:	2000      	movs	r0, #0
 80001fe:	bd08      	pop	{r3, pc}
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <HAL_IncTick+0x10>)
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_IncTick+0x14>)
 8000208:	6811      	ldr	r1, [r2, #0]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	440b      	add	r3, r1
 800020e:	6013      	str	r3, [r2, #0]
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	200019e0 	.word	0x200019e0
 8000218:	20000000 	.word	0x20000000

0800021c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	200019e0 	.word	0x200019e0

08000228 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000228:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800022a:	6803      	ldr	r3, [r0, #0]
{
 800022c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800022e:	6898      	ldr	r0, [r3, #8]
 8000230:	f000 0003 	and.w	r0, r0, #3
 8000234:	2801      	cmp	r0, #1
 8000236:	d001      	beq.n	800023c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000238:	2000      	movs	r0, #0
 800023a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	07d2      	lsls	r2, r2, #31
 8000240:	d5fa      	bpl.n	8000238 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	f002 020d 	and.w	r2, r2, #13
 8000248:	2a01      	cmp	r2, #1
 800024a:	d11b      	bne.n	8000284 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800024c:	689a      	ldr	r2, [r3, #8]
 800024e:	f042 0202 	orr.w	r2, r2, #2
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	2203      	movs	r2, #3
 8000256:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000258:	f7ff ffe0 	bl	800021c <HAL_GetTick>
 800025c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800025e:	6823      	ldr	r3, [r4, #0]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	07db      	lsls	r3, r3, #31
 8000264:	d5e8      	bpl.n	8000238 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000266:	f7ff ffd9 	bl	800021c <HAL_GetTick>
 800026a:	1b40      	subs	r0, r0, r5
 800026c:	2802      	cmp	r0, #2
 800026e:	d9f6      	bls.n	800025e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000270:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000272:	f043 0310 	orr.w	r3, r3, #16
 8000276:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000278:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
 8000282:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000284:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000286:	f043 0310 	orr.w	r3, r3, #16
 800028a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800028c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000294:	bd38      	pop	{r3, r4, r5, pc}
	...

08000298 <ADC_Enable>:
{
 8000298:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800029a:	6803      	ldr	r3, [r0, #0]
 800029c:	689a      	ldr	r2, [r3, #8]
 800029e:	f002 0203 	and.w	r2, r2, #3
 80002a2:	2a01      	cmp	r2, #1
{
 80002a4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002a6:	d104      	bne.n	80002b2 <ADC_Enable+0x1a>
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	07d2      	lsls	r2, r2, #31
 80002ac:	d501      	bpl.n	80002b2 <ADC_Enable+0x1a>
  return HAL_OK;
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002b2:	6899      	ldr	r1, [r3, #8]
 80002b4:	4a0e      	ldr	r2, [pc, #56]	; (80002f0 <ADC_Enable+0x58>)
 80002b6:	4211      	tst	r1, r2
 80002b8:	d10f      	bne.n	80002da <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 80002ba:	689a      	ldr	r2, [r3, #8]
 80002bc:	f042 0201 	orr.w	r2, r2, #1
 80002c0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80002c2:	f7ff ffab 	bl	800021c <HAL_GetTick>
 80002c6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002c8:	6823      	ldr	r3, [r4, #0]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	07db      	lsls	r3, r3, #31
 80002ce:	d4ee      	bmi.n	80002ae <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002d0:	f7ff ffa4 	bl	800021c <HAL_GetTick>
 80002d4:	1b40      	subs	r0, r0, r5
 80002d6:	2802      	cmp	r0, #2
 80002d8:	d9f6      	bls.n	80002c8 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002dc:	f043 0310 	orr.w	r3, r3, #16
 80002e0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002ea:	2001      	movs	r0, #1
 80002ec:	bd38      	pop	{r3, r4, r5, pc}
 80002ee:	bf00      	nop
 80002f0:	8000003f 	.word	0x8000003f

080002f4 <HAL_ADC_Init>:
{
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 80002f8:	2300      	movs	r3, #0
 80002fa:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80002fc:	4604      	mov	r4, r0
 80002fe:	2800      	cmp	r0, #0
 8000300:	f000 8091 	beq.w	8000426 <HAL_ADC_Init+0x132>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000304:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000306:	06d2      	lsls	r2, r2, #27
 8000308:	d463      	bmi.n	80003d2 <HAL_ADC_Init+0xde>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800030a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800030c:	2b00      	cmp	r3, #0
 800030e:	d02e      	beq.n	800036e <HAL_ADC_Init+0x7a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000310:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000312:	6823      	ldr	r3, [r4, #0]
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	00d1      	lsls	r1, r2, #3
 8000318:	d502      	bpl.n	8000320 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800031a:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800031c:	009a      	lsls	r2, r3, #2
 800031e:	d50a      	bpl.n	8000336 <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 8000320:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000322:	f023 0312 	bic.w	r3, r3, #18
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800032c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000334:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000338:	06db      	lsls	r3, r3, #27
 800033a:	d46e      	bmi.n	800041a <HAL_ADC_Init+0x126>
 800033c:	2800      	cmp	r0, #0
 800033e:	d16c      	bne.n	800041a <HAL_ADC_Init+0x126>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000340:	6823      	ldr	r3, [r4, #0]
 8000342:	689d      	ldr	r5, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000344:	f015 0504 	ands.w	r5, r5, #4
 8000348:	d167      	bne.n	800041a <HAL_ADC_Init+0x126>
    ADC_STATE_CLR_SET(hadc->State,
 800034a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800034c:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000350:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000358:	6462      	str	r2, [r4, #68]	; 0x44
 800035a:	4a78      	ldr	r2, [pc, #480]	; (800053c <HAL_ADC_Init+0x248>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800035c:	d065      	beq.n	800042a <HAL_ADC_Init+0x136>
 800035e:	4293      	cmp	r3, r2
 8000360:	d166      	bne.n	8000430 <HAL_ADC_Init+0x13c>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000362:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000366:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000368:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800036c:	e066      	b.n	800043c <HAL_ADC_Init+0x148>
      ADC_CLEAR_ERRORCODE(hadc);
 800036e:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000370:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000372:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000374:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000378:	f002 fed4 	bl	8003124 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800037c:	6823      	ldr	r3, [r4, #0]
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	00de      	lsls	r6, r3, #3
 8000382:	d4c5      	bmi.n	8000310 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 8000384:	4620      	mov	r0, r4
 8000386:	f7ff ff4f 	bl	8000228 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800038a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800038c:	06d5      	lsls	r5, r2, #27
 800038e:	d4c0      	bmi.n	8000312 <HAL_ADC_Init+0x1e>
 8000390:	2800      	cmp	r0, #0
 8000392:	d1be      	bne.n	8000312 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000394:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000396:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800039a:	f023 0302 	bic.w	r3, r3, #2
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80003a4:	6823      	ldr	r3, [r4, #0]
 80003a6:	689a      	ldr	r2, [r3, #8]
 80003a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80003ac:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80003ae:	689a      	ldr	r2, [r3, #8]
 80003b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003b4:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003b6:	4b62      	ldr	r3, [pc, #392]	; (8000540 <HAL_ADC_Init+0x24c>)
 80003b8:	4a62      	ldr	r2, [pc, #392]	; (8000544 <HAL_ADC_Init+0x250>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80003c0:	230a      	movs	r3, #10
 80003c2:	4353      	muls	r3, r2
            wait_loop_index--;
 80003c4:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 80003c6:	9b00      	ldr	r3, [sp, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0a1      	beq.n	8000310 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 80003cc:	9b00      	ldr	r3, [sp, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	e7f8      	b.n	80003c4 <HAL_ADC_Init+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003d2:	4618      	mov	r0, r3
 80003d4:	e7af      	b.n	8000336 <HAL_ADC_Init+0x42>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003d6:	4293      	cmp	r3, r2
 80003d8:	bf0c      	ite	eq
 80003da:	9101      	streq	r1, [sp, #4]
 80003dc:	9001      	strne	r0, [sp, #4]
 80003de:	e02c      	b.n	800043a <HAL_ADC_Init+0x146>
        ADC_STATE_CLR_SET(hadc->State,
 80003e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003e2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80003e6:	f042 0220 	orr.w	r2, r2, #32
 80003ea:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80003ee:	f042 0201 	orr.w	r2, r2, #1
 80003f2:	64a2      	str	r2, [r4, #72]	; 0x48
 80003f4:	e052      	b.n	800049c <HAL_ADC_Init+0x1a8>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80003f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80003fa:	e06d      	b.n	80004d8 <HAL_ADC_Init+0x1e4>
 80003fc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000400:	e06a      	b.n	80004d8 <HAL_ADC_Init+0x1e4>
 8000402:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000406:	e067      	b.n	80004d8 <HAL_ADC_Init+0x1e4>
 8000408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800040c:	e064      	b.n	80004d8 <HAL_ADC_Init+0x1e4>
 800040e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000412:	e061      	b.n	80004d8 <HAL_ADC_Init+0x1e4>
 8000414:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000418:	e05e      	b.n	80004d8 <HAL_ADC_Init+0x1e4>
    ADC_STATE_CLR_SET(hadc->State,
 800041a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800041c:	f023 0312 	bic.w	r3, r3, #18
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000426:	2001      	movs	r0, #1
 8000428:	e085      	b.n	8000536 <HAL_ADC_Init+0x242>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800042a:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800042c:	4a46      	ldr	r2, [pc, #280]	; (8000548 <HAL_ADC_Init+0x254>)
 800042e:	e005      	b.n	800043c <HAL_ADC_Init+0x148>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000430:	4946      	ldr	r1, [pc, #280]	; (800054c <HAL_ADC_Init+0x258>)
 8000432:	4a47      	ldr	r2, [pc, #284]	; (8000550 <HAL_ADC_Init+0x25c>)
 8000434:	428b      	cmp	r3, r1
 8000436:	d1ce      	bne.n	80003d6 <HAL_ADC_Init+0xe2>
 8000438:	9201      	str	r2, [sp, #4]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800043a:	4a46      	ldr	r2, [pc, #280]	; (8000554 <HAL_ADC_Init+0x260>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800043c:	6899      	ldr	r1, [r3, #8]
 800043e:	f001 0103 	and.w	r1, r1, #3
 8000442:	2901      	cmp	r1, #1
 8000444:	d102      	bne.n	800044c <HAL_ADC_Init+0x158>
 8000446:	6819      	ldr	r1, [r3, #0]
 8000448:	07ce      	lsls	r6, r1, #31
 800044a:	d40f      	bmi.n	800046c <HAL_ADC_Init+0x178>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800044c:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800044e:	b139      	cbz	r1, 8000460 <HAL_ADC_Init+0x16c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000450:	688e      	ldr	r6, [r1, #8]
 8000452:	f006 0603 	and.w	r6, r6, #3
 8000456:	2e01      	cmp	r6, #1
 8000458:	d102      	bne.n	8000460 <HAL_ADC_Init+0x16c>
 800045a:	6809      	ldr	r1, [r1, #0]
 800045c:	07c9      	lsls	r1, r1, #31
 800045e:	d405      	bmi.n	800046c <HAL_ADC_Init+0x178>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000460:	6891      	ldr	r1, [r2, #8]
 8000462:	6866      	ldr	r6, [r4, #4]
 8000464:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8000468:	4331      	orrs	r1, r6
 800046a:	6091      	str	r1, [r2, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800046c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800046e:	68a6      	ldr	r6, [r4, #8]
 8000470:	69e2      	ldr	r2, [r4, #28]
 8000472:	2901      	cmp	r1, #1
 8000474:	68e1      	ldr	r1, [r4, #12]
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	bf18      	it	ne
 800047c:	f44f 5580 	movne.w	r5, #4096	; 0x1000
 8000480:	ea41 3142 	orr.w	r1, r1, r2, lsl #13
 8000484:	4329      	orrs	r1, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000486:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000488:	2d01      	cmp	r5, #1
 800048a:	d107      	bne.n	800049c <HAL_ADC_Init+0x1a8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800048c:	2a00      	cmp	r2, #0
 800048e:	d1a7      	bne.n	80003e0 <HAL_ADC_Init+0xec>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000490:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000492:	3a01      	subs	r2, #1
 8000494:	ea41 4142 	orr.w	r1, r1, r2, lsl #17
 8000498:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800049c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800049e:	2a01      	cmp	r2, #1
 80004a0:	d01d      	beq.n	80004de <HAL_ADC_Init+0x1ea>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004a2:	4d2a      	ldr	r5, [pc, #168]	; (800054c <HAL_ADC_Init+0x258>)
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d003      	beq.n	80004b0 <HAL_ADC_Init+0x1bc>
 80004a8:	f505 7580 	add.w	r5, r5, #256	; 0x100
 80004ac:	42ab      	cmp	r3, r5
 80004ae:	d1a2      	bne.n	80003f6 <HAL_ADC_Init+0x102>
 80004b0:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 80004b4:	d0a2      	beq.n	80003fc <HAL_ADC_Init+0x108>
 80004b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80004ba:	d0a2      	beq.n	8000402 <HAL_ADC_Init+0x10e>
 80004bc:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 80004c0:	d0a2      	beq.n	8000408 <HAL_ADC_Init+0x114>
 80004c2:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 80004c6:	d0a2      	beq.n	800040e <HAL_ADC_Init+0x11a>
 80004c8:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 80004cc:	d0a2      	beq.n	8000414 <HAL_ADC_Init+0x120>
 80004ce:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 80004d2:	bf08      	it	eq
 80004d4:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 80004d8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80004da:	4329      	orrs	r1, r5
 80004dc:	4311      	orrs	r1, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80004de:	689a      	ldr	r2, [r3, #8]
 80004e0:	f012 0f0c 	tst.w	r2, #12
 80004e4:	d10b      	bne.n	80004fe <HAL_ADC_Init+0x20a>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004e6:	68da      	ldr	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80004e8:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80004ee:	f022 0202 	bic.w	r2, r2, #2
 80004f2:	60da      	str	r2, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80004f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 80004fc:	4311      	orrs	r1, r2
    MODIFY_REG(hadc->Instance->CFGR,
 80004fe:	68dd      	ldr	r5, [r3, #12]
 8000500:	4a15      	ldr	r2, [pc, #84]	; (8000558 <HAL_ADC_Init+0x264>)
 8000502:	402a      	ands	r2, r5
 8000504:	4311      	orrs	r1, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000506:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000508:	60d9      	str	r1, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800050a:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800050c:	bf05      	ittet	eq
 800050e:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000510:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000512:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000514:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
 8000518:	bf06      	itte	eq
 800051a:	f021 010f 	biceq.w	r1, r1, #15
 800051e:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000520:	f022 020f 	bicne.w	r2, r2, #15
 8000524:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000526:	2300      	movs	r3, #0
 8000528:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 800052a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800052c:	f023 0303 	bic.w	r3, r3, #3
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000536:	b016      	add	sp, #88	; 0x58
 8000538:	bd70      	pop	{r4, r5, r6, pc}
 800053a:	bf00      	nop
 800053c:	50000100 	.word	0x50000100
 8000540:	20000010 	.word	0x20000010
 8000544:	000f4240 	.word	0x000f4240
 8000548:	50000300 	.word	0x50000300
 800054c:	50000400 	.word	0x50000400
 8000550:	50000500 	.word	0x50000500
 8000554:	50000700 	.word	0x50000700
 8000558:	fff0c007 	.word	0xfff0c007

0800055c <HAL_ADC_Start>:
{
 800055c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800055e:	6803      	ldr	r3, [r0, #0]
 8000560:	689d      	ldr	r5, [r3, #8]
 8000562:	f015 0504 	ands.w	r5, r5, #4
{
 8000566:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000568:	f040 809d 	bne.w	80006a6 <HAL_ADC_Start+0x14a>
    __HAL_LOCK(hadc);
 800056c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000570:	2b01      	cmp	r3, #1
 8000572:	f000 8098 	beq.w	80006a6 <HAL_ADC_Start+0x14a>
 8000576:	2301      	movs	r3, #1
 8000578:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 800057c:	f7ff fe8c 	bl	8000298 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000580:	2800      	cmp	r0, #0
 8000582:	f040 808d 	bne.w	80006a0 <HAL_ADC_Start+0x144>
      ADC_STATE_CLR_SET(hadc->State,
 8000586:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000588:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800058c:	f023 0301 	bic.w	r3, r3, #1
 8000590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000594:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800059c:	d002      	beq.n	80005a4 <HAL_ADC_Start+0x48>
 800059e:	4a43      	ldr	r2, [pc, #268]	; (80006ac <HAL_ADC_Start+0x150>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d117      	bne.n	80005d4 <HAL_ADC_Start+0x78>
 80005a4:	4a42      	ldr	r2, [pc, #264]	; (80006b0 <HAL_ADC_Start+0x154>)
 80005a6:	6892      	ldr	r2, [r2, #8]
 80005a8:	06d1      	lsls	r1, r2, #27
 80005aa:	d005      	beq.n	80005b8 <HAL_ADC_Start+0x5c>
 80005ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005b0:	d002      	beq.n	80005b8 <HAL_ADC_Start+0x5c>
 80005b2:	4a40      	ldr	r2, [pc, #256]	; (80006b4 <HAL_ADC_Start+0x158>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d11a      	bne.n	80005ee <HAL_ADC_Start+0x92>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80005be:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80005c0:	68da      	ldr	r2, [r3, #12]
 80005c2:	0195      	lsls	r5, r2, #6
 80005c4:	d521      	bpl.n	800060a <HAL_ADC_Start+0xae>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005c8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80005cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005d0:	6462      	str	r2, [r4, #68]	; 0x44
 80005d2:	e01a      	b.n	800060a <HAL_ADC_Start+0xae>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005d4:	4a38      	ldr	r2, [pc, #224]	; (80006b8 <HAL_ADC_Start+0x15c>)
 80005d6:	6892      	ldr	r2, [r2, #8]
 80005d8:	06d2      	lsls	r2, r2, #27
 80005da:	d0ed      	beq.n	80005b8 <HAL_ADC_Start+0x5c>
 80005dc:	4a35      	ldr	r2, [pc, #212]	; (80006b4 <HAL_ADC_Start+0x158>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d0ea      	beq.n	80005b8 <HAL_ADC_Start+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005e8:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005ea:	4a32      	ldr	r2, [pc, #200]	; (80006b4 <HAL_ADC_Start+0x158>)
 80005ec:	e008      	b.n	8000600 <HAL_ADC_Start+0xa4>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80005f4:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005f6:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <HAL_ADC_Start+0x150>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d1f6      	bne.n	80005ea <HAL_ADC_Start+0x8e>
 80005fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000600:	68d2      	ldr	r2, [r2, #12]
 8000602:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8000606:	2a00      	cmp	r2, #0
 8000608:	d1dd      	bne.n	80005c6 <HAL_ADC_Start+0x6a>
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800060a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800060c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000610:	bf1c      	itt	ne
 8000612:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 8000614:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000618:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800061a:	2200      	movs	r2, #0
 800061c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000624:	f04f 021c 	mov.w	r2, #28
 8000628:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800062a:	d002      	beq.n	8000632 <HAL_ADC_Start+0xd6>
 800062c:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <HAL_ADC_Start+0x150>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d108      	bne.n	8000644 <HAL_ADC_Start+0xe8>
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <HAL_ADC_Start+0x154>)
 8000634:	6891      	ldr	r1, [r2, #8]
 8000636:	06c9      	lsls	r1, r1, #27
 8000638:	d118      	bne.n	800066c <HAL_ADC_Start+0x110>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	f042 0204 	orr.w	r2, r2, #4
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000644:	4a1c      	ldr	r2, [pc, #112]	; (80006b8 <HAL_ADC_Start+0x15c>)
 8000646:	6892      	ldr	r2, [r2, #8]
 8000648:	06d2      	lsls	r2, r2, #27
 800064a:	d0f6      	beq.n	800063a <HAL_ADC_Start+0xde>
 800064c:	4a1a      	ldr	r2, [pc, #104]	; (80006b8 <HAL_ADC_Start+0x15c>)
 800064e:	6892      	ldr	r2, [r2, #8]
 8000650:	f002 021f 	and.w	r2, r2, #31
 8000654:	2a05      	cmp	r2, #5
 8000656:	d0f0      	beq.n	800063a <HAL_ADC_Start+0xde>
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_ADC_Start+0x15c>)
 800065a:	6892      	ldr	r2, [r2, #8]
 800065c:	f002 021f 	and.w	r2, r2, #31
 8000660:	2a09      	cmp	r2, #9
 8000662:	d0ea      	beq.n	800063a <HAL_ADC_Start+0xde>
 8000664:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <HAL_ADC_Start+0x158>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d0e7      	beq.n	800063a <HAL_ADC_Start+0xde>
}
 800066a:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800066c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000670:	d002      	beq.n	8000678 <HAL_ADC_Start+0x11c>
 8000672:	490e      	ldr	r1, [pc, #56]	; (80006ac <HAL_ADC_Start+0x150>)
 8000674:	428b      	cmp	r3, r1
 8000676:	d1e9      	bne.n	800064c <HAL_ADC_Start+0xf0>
 8000678:	6892      	ldr	r2, [r2, #8]
 800067a:	f002 021f 	and.w	r2, r2, #31
 800067e:	2a05      	cmp	r2, #5
 8000680:	d0db      	beq.n	800063a <HAL_ADC_Start+0xde>
 8000682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000686:	d002      	beq.n	800068e <HAL_ADC_Start+0x132>
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <HAL_ADC_Start+0x150>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d1e4      	bne.n	8000658 <HAL_ADC_Start+0xfc>
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_ADC_Start+0x154>)
 8000690:	6892      	ldr	r2, [r2, #8]
 8000692:	f002 021f 	and.w	r2, r2, #31
 8000696:	2a09      	cmp	r2, #9
 8000698:	d0cf      	beq.n	800063a <HAL_ADC_Start+0xde>
 800069a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800069e:	e7e0      	b.n	8000662 <HAL_ADC_Start+0x106>
      __HAL_UNLOCK(hadc);
 80006a0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 80006a4:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80006a6:	2002      	movs	r0, #2
 80006a8:	bd38      	pop	{r3, r4, r5, pc}
 80006aa:	bf00      	nop
 80006ac:	50000100 	.word	0x50000100
 80006b0:	50000300 	.word	0x50000300
 80006b4:	50000400 	.word	0x50000400
 80006b8:	50000700 	.word	0x50000700

080006bc <HAL_ADC_PollForConversion>:
{
 80006bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80006c0:	6946      	ldr	r6, [r0, #20]
 80006c2:	6803      	ldr	r3, [r0, #0]
 80006c4:	2e08      	cmp	r6, #8
{
 80006c6:	4604      	mov	r4, r0
 80006c8:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80006ca:	d027      	beq.n	800071c <HAL_ADC_PollForConversion+0x60>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80006cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006d0:	d015      	beq.n	80006fe <HAL_ADC_PollForConversion+0x42>
 80006d2:	4946      	ldr	r1, [pc, #280]	; (80007ec <HAL_ADC_PollForConversion+0x130>)
 80006d4:	4a46      	ldr	r2, [pc, #280]	; (80007f0 <HAL_ADC_PollForConversion+0x134>)
 80006d6:	4847      	ldr	r0, [pc, #284]	; (80007f4 <HAL_ADC_PollForConversion+0x138>)
 80006d8:	4283      	cmp	r3, r0
 80006da:	bf08      	it	eq
 80006dc:	460a      	moveq	r2, r1
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80006de:	6891      	ldr	r1, [r2, #8]
 80006e0:	f011 011f 	ands.w	r1, r1, #31
 80006e4:	d10d      	bne.n	8000702 <HAL_ADC_PollForConversion+0x46>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	07d5      	lsls	r5, r2, #31
 80006ea:	d516      	bpl.n	800071a <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80006ee:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	6463      	str	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80006f8:	2001      	movs	r0, #1
 80006fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80006fe:	4a3b      	ldr	r2, [pc, #236]	; (80007ec <HAL_ADC_PollForConversion+0x130>)
 8000700:	e7ed      	b.n	80006de <HAL_ADC_PollForConversion+0x22>
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000702:	6892      	ldr	r2, [r2, #8]
 8000704:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8000708:	d007      	beq.n	800071a <HAL_ADC_PollForConversion+0x5e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800070a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8000712:	2300      	movs	r3, #0
 8000714:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000718:	e7ee      	b.n	80006f8 <HAL_ADC_PollForConversion+0x3c>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800071a:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800071c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000720:	d002      	beq.n	8000728 <HAL_ADC_PollForConversion+0x6c>
 8000722:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <HAL_ADC_PollForConversion+0x138>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d134      	bne.n	8000792 <HAL_ADC_PollForConversion+0xd6>
 8000728:	4a30      	ldr	r2, [pc, #192]	; (80007ec <HAL_ADC_PollForConversion+0x130>)
 800072a:	6892      	ldr	r2, [r2, #8]
 800072c:	06d0      	lsls	r0, r2, #27
 800072e:	d005      	beq.n	800073c <HAL_ADC_PollForConversion+0x80>
 8000730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000734:	d002      	beq.n	800073c <HAL_ADC_PollForConversion+0x80>
 8000736:	4a30      	ldr	r2, [pc, #192]	; (80007f8 <HAL_ADC_PollForConversion+0x13c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d133      	bne.n	80007a4 <HAL_ADC_PollForConversion+0xe8>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800073c:	68dd      	ldr	r5, [r3, #12]
  tickstart = HAL_GetTick();  
 800073e:	f7ff fd6d 	bl	800021c <HAL_GetTick>
 8000742:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4216      	tst	r6, r2
 800074a:	d032      	beq.n	80007b2 <HAL_ADC_PollForConversion+0xf6>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800074c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800074e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000752:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000754:	68da      	ldr	r2, [r3, #12]
 8000756:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800075a:	d113      	bne.n	8000784 <HAL_ADC_PollForConversion+0xc8>
 800075c:	04a8      	lsls	r0, r5, #18
 800075e:	d411      	bmi.n	8000784 <HAL_ADC_PollForConversion+0xc8>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	0711      	lsls	r1, r2, #28
 8000764:	d50e      	bpl.n	8000784 <HAL_ADC_PollForConversion+0xc8>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	f012 0f04 	tst.w	r2, #4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800076c:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800076e:	d134      	bne.n	80007da <HAL_ADC_PollForConversion+0x11e>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000774:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000776:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000778:	04d2      	lsls	r2, r2, #19
 800077a:	d403      	bmi.n	8000784 <HAL_ADC_PollForConversion+0xc8>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800077c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800077e:	f042 0201 	orr.w	r2, r2, #1
 8000782:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000784:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000788:	bf0c      	ite	eq
 800078a:	601e      	streq	r6, [r3, #0]
  return HAL_OK;
 800078c:	2000      	movne	r0, #0
 800078e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_ADC_PollForConversion+0x134>)
 8000794:	6892      	ldr	r2, [r2, #8]
 8000796:	06d1      	lsls	r1, r2, #27
 8000798:	d0d0      	beq.n	800073c <HAL_ADC_PollForConversion+0x80>
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_ADC_PollForConversion+0x13c>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d0cd      	beq.n	800073c <HAL_ADC_PollForConversion+0x80>
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80007a0:	4613      	mov	r3, r2
 80007a2:	e7cb      	b.n	800073c <HAL_ADC_PollForConversion+0x80>
 80007a4:	4913      	ldr	r1, [pc, #76]	; (80007f4 <HAL_ADC_PollForConversion+0x138>)
 80007a6:	428b      	cmp	r3, r1
 80007a8:	bf14      	ite	ne
 80007aa:	4613      	movne	r3, r2
 80007ac:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
 80007b0:	e7c4      	b.n	800073c <HAL_ADC_PollForConversion+0x80>
    if(Timeout != HAL_MAX_DELAY)
 80007b2:	1c7a      	adds	r2, r7, #1
 80007b4:	d0c7      	beq.n	8000746 <HAL_ADC_PollForConversion+0x8a>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80007b6:	b94f      	cbnz	r7, 80007cc <HAL_ADC_PollForConversion+0x110>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80007b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80007c0:	2300      	movs	r3, #0
 80007c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80007c6:	2003      	movs	r0, #3
 80007c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80007cc:	f7ff fd26 	bl	800021c <HAL_GetTick>
 80007d0:	eba0 0008 	sub.w	r0, r0, r8
 80007d4:	4287      	cmp	r7, r0
 80007d6:	d2b5      	bcs.n	8000744 <HAL_ADC_PollForConversion+0x88>
 80007d8:	e7ee      	b.n	80007b8 <HAL_ADC_PollForConversion+0xfc>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007da:	f042 0220 	orr.w	r2, r2, #32
 80007de:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80007e2:	f042 0201 	orr.w	r2, r2, #1
 80007e6:	64a2      	str	r2, [r4, #72]	; 0x48
 80007e8:	e7cc      	b.n	8000784 <HAL_ADC_PollForConversion+0xc8>
 80007ea:	bf00      	nop
 80007ec:	50000300 	.word	0x50000300
 80007f0:	50000700 	.word	0x50000700
 80007f4:	50000100 	.word	0x50000100
 80007f8:	50000400 	.word	0x50000400

080007fc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80007fc:	6803      	ldr	r3, [r0, #0]
 80007fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000800:	4770      	bx	lr
	...

08000804 <HAL_ADC_ConfigChannel>:
{
 8000804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000806:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800080c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000810:	2b01      	cmp	r3, #1
{
 8000812:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000814:	f000 8163 	beq.w	8000ade <HAL_ADC_ConfigChannel+0x2da>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000818:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800081a:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800081c:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 800081e:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000820:	0752      	lsls	r2, r2, #29
  __HAL_LOCK(hadc);
 8000822:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000826:	f100 8155 	bmi.w	8000ad4 <HAL_ADC_ConfigChannel+0x2d0>
    if (sConfig->Rank < 5U)
 800082a:	6848      	ldr	r0, [r1, #4]
 800082c:	680c      	ldr	r4, [r1, #0]
 800082e:	2804      	cmp	r0, #4
 8000830:	f04f 0206 	mov.w	r2, #6
 8000834:	d831      	bhi.n	800089a <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000836:	4342      	muls	r2, r0
 8000838:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 800083a:	201f      	movs	r0, #31
 800083c:	4090      	lsls	r0, r2
 800083e:	ea27 0000 	bic.w	r0, r7, r0
 8000842:	fa04 f202 	lsl.w	r2, r4, r2
 8000846:	4302      	orrs	r2, r0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	f012 0f0c 	tst.w	r2, #12
 8000850:	d162      	bne.n	8000918 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000852:	2c09      	cmp	r4, #9
 8000854:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000858:	688f      	ldr	r7, [r1, #8]
 800085a:	d946      	bls.n	80008ea <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800085c:	4422      	add	r2, r4
 800085e:	6998      	ldr	r0, [r3, #24]
 8000860:	3a1e      	subs	r2, #30
 8000862:	f04f 0e07 	mov.w	lr, #7
 8000866:	fa0e fe02 	lsl.w	lr, lr, r2
 800086a:	ea20 000e 	bic.w	r0, r0, lr
 800086e:	fa07 f202 	lsl.w	r2, r7, r2
 8000872:	4302      	orrs	r2, r0
 8000874:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000876:	68da      	ldr	r2, [r3, #12]
 8000878:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 800087c:	694a      	ldr	r2, [r1, #20]
 800087e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000882:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000886:	690a      	ldr	r2, [r1, #16]
 8000888:	3a01      	subs	r2, #1
 800088a:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800088e:	2a03      	cmp	r2, #3
 8000890:	d873      	bhi.n	800097a <HAL_ADC_ConfigChannel+0x176>
 8000892:	e8df f002 	tbb	[pc, r2]
 8000896:	5137      	.short	0x5137
 8000898:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 800089a:	2809      	cmp	r0, #9
 800089c:	d80b      	bhi.n	80008b6 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800089e:	4342      	muls	r2, r0
 80008a0:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 80008a2:	3a1e      	subs	r2, #30
 80008a4:	201f      	movs	r0, #31
 80008a6:	4090      	lsls	r0, r2
 80008a8:	ea27 0000 	bic.w	r0, r7, r0
 80008ac:	fa04 f202 	lsl.w	r2, r4, r2
 80008b0:	4302      	orrs	r2, r0
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
 80008b4:	e7c9      	b.n	800084a <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 80008b6:	280e      	cmp	r0, #14
 80008b8:	d80b      	bhi.n	80008d2 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80008ba:	4342      	muls	r2, r0
 80008bc:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80008be:	3a3c      	subs	r2, #60	; 0x3c
 80008c0:	201f      	movs	r0, #31
 80008c2:	4090      	lsls	r0, r2
 80008c4:	ea27 0000 	bic.w	r0, r7, r0
 80008c8:	fa04 f202 	lsl.w	r2, r4, r2
 80008cc:	4302      	orrs	r2, r0
 80008ce:	639a      	str	r2, [r3, #56]	; 0x38
 80008d0:	e7bb      	b.n	800084a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80008d2:	4342      	muls	r2, r0
 80008d4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80008d6:	3a5a      	subs	r2, #90	; 0x5a
 80008d8:	201f      	movs	r0, #31
 80008da:	4090      	lsls	r0, r2
 80008dc:	ea27 0000 	bic.w	r0, r7, r0
 80008e0:	fa04 f202 	lsl.w	r2, r4, r2
 80008e4:	4302      	orrs	r2, r0
 80008e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e8:	e7af      	b.n	800084a <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80008ea:	6958      	ldr	r0, [r3, #20]
 80008ec:	4422      	add	r2, r4
 80008ee:	f04f 0e07 	mov.w	lr, #7
 80008f2:	fa0e fe02 	lsl.w	lr, lr, r2
 80008f6:	ea20 000e 	bic.w	r0, r0, lr
 80008fa:	fa07 f202 	lsl.w	r2, r7, r2
 80008fe:	4302      	orrs	r2, r0
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	e7b8      	b.n	8000876 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000904:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000906:	4f83      	ldr	r7, [pc, #524]	; (8000b14 <HAL_ADC_ConfigChannel+0x310>)
 8000908:	4017      	ands	r7, r2
 800090a:	ea47 020c 	orr.w	r2, r7, ip
 800090e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000912:	ea42 020e 	orr.w	r2, r2, lr
 8000916:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	f002 0203 	and.w	r2, r2, #3
 800091e:	2a01      	cmp	r2, #1
 8000920:	f040 80df 	bne.w	8000ae2 <HAL_ADC_ConfigChannel+0x2de>
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	07d7      	lsls	r7, r2, #31
 8000928:	f140 80db 	bpl.w	8000ae2 <HAL_ADC_ConfigChannel+0x2de>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800092c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800092e:	2300      	movs	r3, #0
 8000930:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000934:	b017      	add	sp, #92	; 0x5c
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000938:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800093a:	4f76      	ldr	r7, [pc, #472]	; (8000b14 <HAL_ADC_ConfigChannel+0x310>)
 800093c:	4017      	ands	r7, r2
 800093e:	ea47 020c 	orr.w	r2, r7, ip
 8000942:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000946:	ea42 020e 	orr.w	r2, r2, lr
 800094a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800094c:	e7e4      	b.n	8000918 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800094e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000950:	4870      	ldr	r0, [pc, #448]	; (8000b14 <HAL_ADC_ConfigChannel+0x310>)
 8000952:	4010      	ands	r0, r2
 8000954:	ea40 020c 	orr.w	r2, r0, ip
 8000958:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800095c:	ea42 020e 	orr.w	r2, r2, lr
 8000960:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8000962:	e7d9      	b.n	8000918 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000964:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000966:	4a6b      	ldr	r2, [pc, #428]	; (8000b14 <HAL_ADC_ConfigChannel+0x310>)
 8000968:	4002      	ands	r2, r0
 800096a:	ea42 020c 	orr.w	r2, r2, ip
 800096e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000972:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000976:	66da      	str	r2, [r3, #108]	; 0x6c
 8000978:	e7ce      	b.n	8000918 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800097a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800097c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000980:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000982:	bf02      	ittt	eq
 8000984:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000986:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800098a:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800098c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800098e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000992:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000994:	bf02      	ittt	eq
 8000996:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000998:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800099c:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800099e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80009a0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80009a4:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80009a6:	bf02      	ittt	eq
 80009a8:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 80009aa:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80009ae:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80009b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80009b2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80009b6:	4594      	cmp	ip, r2
 80009b8:	d1ae      	bne.n	8000918 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80009ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80009bc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80009c0:	e7d9      	b.n	8000976 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80009c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80009c6:	2101      	movs	r1, #1
 80009c8:	40a1      	lsls	r1, r4
 80009ca:	ea22 0201 	bic.w	r2, r2, r1
 80009ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009d6:	d01e      	beq.n	8000a16 <HAL_ADC_ConfigChannel+0x212>
 80009d8:	494f      	ldr	r1, [pc, #316]	; (8000b18 <HAL_ADC_ConfigChannel+0x314>)
 80009da:	4a50      	ldr	r2, [pc, #320]	; (8000b1c <HAL_ADC_ConfigChannel+0x318>)
 80009dc:	4850      	ldr	r0, [pc, #320]	; (8000b20 <HAL_ADC_ConfigChannel+0x31c>)
 80009de:	4283      	cmp	r3, r0
 80009e0:	bf08      	it	eq
 80009e2:	460a      	moveq	r2, r1
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009e4:	2c10      	cmp	r4, #16
 80009e6:	d118      	bne.n	8000a1a <HAL_ADC_ConfigChannel+0x216>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009e8:	6891      	ldr	r1, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009ea:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009ee:	d19d      	bne.n	800092c <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009f4:	494a      	ldr	r1, [pc, #296]	; (8000b20 <HAL_ADC_ConfigChannel+0x31c>)
 80009f6:	d11c      	bne.n	8000a32 <HAL_ADC_ConfigChannel+0x22e>
 80009f8:	9101      	str	r1, [sp, #4]
 80009fa:	e024      	b.n	8000a46 <HAL_ADC_ConfigChannel+0x242>
        MODIFY_REG(hadc->Instance->SMPR1,
 80009fc:	1c60      	adds	r0, r4, #1
 80009fe:	6959      	ldr	r1, [r3, #20]
 8000a00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000a04:	2207      	movs	r2, #7
 8000a06:	4082      	lsls	r2, r0
 8000a08:	ea21 0102 	bic.w	r1, r1, r2
 8000a0c:	fa06 f200 	lsl.w	r2, r6, r0
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	e7dd      	b.n	80009d2 <HAL_ADC_ConfigChannel+0x1ce>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a16:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <HAL_ADC_ConfigChannel+0x314>)
 8000a18:	e7e4      	b.n	80009e4 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a1a:	2c11      	cmp	r4, #17
 8000a1c:	d103      	bne.n	8000a26 <HAL_ADC_ConfigChannel+0x222>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a1e:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000a20:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
 8000a24:	e7e3      	b.n	80009ee <HAL_ADC_ConfigChannel+0x1ea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000a26:	2c12      	cmp	r4, #18
 8000a28:	d180      	bne.n	800092c <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000a2a:	6891      	ldr	r1, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a2c:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
 8000a30:	e7dd      	b.n	80009ee <HAL_ADC_ConfigChannel+0x1ea>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d102      	bne.n	8000a3c <HAL_ADC_ConfigChannel+0x238>
 8000a36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000a3a:	e7dd      	b.n	80009f8 <HAL_ADC_ConfigChannel+0x1f4>
 8000a3c:	4939      	ldr	r1, [pc, #228]	; (8000b24 <HAL_ADC_ConfigChannel+0x320>)
 8000a3e:	483a      	ldr	r0, [pc, #232]	; (8000b28 <HAL_ADC_ConfigChannel+0x324>)
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d12b      	bne.n	8000a9c <HAL_ADC_ConfigChannel+0x298>
 8000a44:	9001      	str	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a46:	6899      	ldr	r1, [r3, #8]
 8000a48:	f001 0103 	and.w	r1, r1, #3
 8000a4c:	2901      	cmp	r1, #1
 8000a4e:	d102      	bne.n	8000a56 <HAL_ADC_ConfigChannel+0x252>
 8000a50:	6819      	ldr	r1, [r3, #0]
 8000a52:	07c8      	lsls	r0, r1, #31
 8000a54:	d438      	bmi.n	8000ac8 <HAL_ADC_ConfigChannel+0x2c4>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a56:	9901      	ldr	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a58:	b139      	cbz	r1, 8000a6a <HAL_ADC_ConfigChannel+0x266>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a5a:	6888      	ldr	r0, [r1, #8]
 8000a5c:	f000 0003 	and.w	r0, r0, #3
 8000a60:	2801      	cmp	r0, #1
 8000a62:	d102      	bne.n	8000a6a <HAL_ADC_ConfigChannel+0x266>
 8000a64:	6809      	ldr	r1, [r1, #0]
 8000a66:	07c9      	lsls	r1, r1, #31
 8000a68:	d42e      	bmi.n	8000ac8 <HAL_ADC_ConfigChannel+0x2c4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a6a:	2c10      	cmp	r4, #16
 8000a6c:	d11a      	bne.n	8000aa4 <HAL_ADC_ConfigChannel+0x2a0>
 8000a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a72:	f47f af5b 	bne.w	800092c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000a76:	6893      	ldr	r3, [r2, #8]
 8000a78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a7c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_ADC_ConfigChannel+0x328>)
 8000a80:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <HAL_ADC_ConfigChannel+0x32c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a88:	230a      	movs	r3, #10
 8000a8a:	4353      	muls	r3, r2
            wait_loop_index--;
 8000a8c:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000a8e:	9b00      	ldr	r3, [sp, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f43f af4b 	beq.w	800092c <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000a96:	9b00      	ldr	r3, [sp, #0]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	e7f7      	b.n	8000a8c <HAL_ADC_ConfigChannel+0x288>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a9c:	4283      	cmp	r3, r0
 8000a9e:	bf18      	it	ne
 8000aa0:	2100      	movne	r1, #0
 8000aa2:	e7a9      	b.n	80009f8 <HAL_ADC_ConfigChannel+0x1f4>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000aa4:	2c11      	cmp	r4, #17
 8000aa6:	d108      	bne.n	8000aba <HAL_ADC_ConfigChannel+0x2b6>
 8000aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aac:	f47f af3e 	bne.w	800092c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000ab0:	6893      	ldr	r3, [r2, #8]
 8000ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000ab6:	6093      	str	r3, [r2, #8]
 8000ab8:	e738      	b.n	800092c <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000aba:	2c12      	cmp	r4, #18
 8000abc:	f47f af36 	bne.w	800092c <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000ac0:	6893      	ldr	r3, [r2, #8]
 8000ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac6:	e7f6      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0x2b2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	e72c      	b.n	800092e <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	646b      	str	r3, [r5, #68]	; 0x44
 8000adc:	e727      	b.n	800092e <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000ade:	2002      	movs	r0, #2
 8000ae0:	e728      	b.n	8000934 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000ae2:	2e01      	cmp	r6, #1
 8000ae4:	f47f af6d 	bne.w	80009c2 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ae8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000aec:	40a6      	lsls	r6, r4
 8000aee:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000af0:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000af2:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000af6:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000af8:	d980      	bls.n	80009fc <HAL_ADC_ConfigChannel+0x1f8>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000afa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000afe:	6999      	ldr	r1, [r3, #24]
 8000b00:	3a1b      	subs	r2, #27
 8000b02:	2007      	movs	r0, #7
 8000b04:	4090      	lsls	r0, r2
 8000b06:	ea21 0100 	bic.w	r1, r1, r0
 8000b0a:	fa06 f202 	lsl.w	r2, r6, r2
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	619a      	str	r2, [r3, #24]
 8000b12:	e75e      	b.n	80009d2 <HAL_ADC_ConfigChannel+0x1ce>
 8000b14:	83fff000 	.word	0x83fff000
 8000b18:	50000300 	.word	0x50000300
 8000b1c:	50000700 	.word	0x50000700
 8000b20:	50000100 	.word	0x50000100
 8000b24:	50000400 	.word	0x50000400
 8000b28:	50000500 	.word	0x50000500
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	000f4240 	.word	0x000f4240

08000b34 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b36:	6802      	ldr	r2, [r0, #0]
 8000b38:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000b3a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8000b3e:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b40:	d101      	bne.n	8000b46 <HAL_ADCEx_MultiModeConfigChannel+0x12>
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	e009      	b.n	8000b5a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d102      	bne.n	8000b50 <HAL_ADCEx_MultiModeConfigChannel+0x1c>
 8000b4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b4e:	e7f8      	b.n	8000b42 <HAL_ADCEx_MultiModeConfigChannel+0xe>
 8000b50:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000b52:	4c3d      	ldr	r4, [pc, #244]	; (8000c48 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d130      	bne.n	8000bba <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8000b58:	9401      	str	r4, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000b5a:	9c01      	ldr	r4, [sp, #4]
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d058      	beq.n	8000c12 <HAL_ADCEx_MultiModeConfigChannel+0xde>
  __HAL_LOCK(hadc);
 8000b60:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d056      	beq.n	8000c16 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000b6e:	6893      	ldr	r3, [r2, #8]
 8000b70:	075b      	lsls	r3, r3, #29
 8000b72:	d443      	bmi.n	8000bfc <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000b74:	68a3      	ldr	r3, [r4, #8]
 8000b76:	075f      	lsls	r7, r3, #29
 8000b78:	d440      	bmi.n	8000bfc <HAL_ADCEx_MultiModeConfigChannel+0xc8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b7a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000b7e:	d020      	beq.n	8000bc2 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8000b80:	4d32      	ldr	r5, [pc, #200]	; (8000c4c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000b82:	4b33      	ldr	r3, [pc, #204]	; (8000c50 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8000b84:	4e2e      	ldr	r6, [pc, #184]	; (8000c40 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000b86:	42b2      	cmp	r2, r6
 8000b88:	bf08      	it	eq
 8000b8a:	462b      	moveq	r3, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000b8c:	680d      	ldr	r5, [r1, #0]
 8000b8e:	b1d5      	cbz	r5, 8000bc6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000b90:	684e      	ldr	r6, [r1, #4]
 8000b92:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000b96:	4637      	mov	r7, r6
 8000b98:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8000b9a:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8000b9e:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8000ba2:	433e      	orrs	r6, r7
 8000ba4:	609e      	str	r6, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000ba6:	6896      	ldr	r6, [r2, #8]
 8000ba8:	f006 0603 	and.w	r6, r6, #3
 8000bac:	2e01      	cmp	r6, #1
 8000bae:	d134      	bne.n	8000c1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
 8000bb0:	6812      	ldr	r2, [r2, #0]
 8000bb2:	07d6      	lsls	r6, r2, #31
 8000bb4:	d531      	bpl.n	8000c1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e025      	b.n	8000c06 <HAL_ADCEx_MultiModeConfigChannel+0xd2>
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000bba:	42a2      	cmp	r2, r4
 8000bbc:	bf18      	it	ne
 8000bbe:	2300      	movne	r3, #0
 8000bc0:	e7bf      	b.n	8000b42 <HAL_ADCEx_MultiModeConfigChannel+0xe>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000bc4:	e7e2      	b.n	8000b8c <HAL_ADCEx_MultiModeConfigChannel+0x58>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000bc6:	6899      	ldr	r1, [r3, #8]
 8000bc8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000bcc:	6099      	str	r1, [r3, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000bce:	6891      	ldr	r1, [r2, #8]
 8000bd0:	f001 0103 	and.w	r1, r1, #3
 8000bd4:	2901      	cmp	r1, #1
 8000bd6:	d102      	bne.n	8000bde <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	07d1      	lsls	r1, r2, #31
 8000bdc:	d4eb      	bmi.n	8000bb6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000bde:	68a2      	ldr	r2, [r4, #8]
 8000be0:	f002 0203 	and.w	r2, r2, #3
 8000be4:	2a01      	cmp	r2, #1
 8000be6:	d102      	bne.n	8000bee <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8000be8:	6822      	ldr	r2, [r4, #0]
 8000bea:	07d2      	lsls	r2, r2, #31
 8000bec:	d4e3      	bmi.n	8000bb6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000bf4:	f022 020f 	bic.w	r2, r2, #15
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	e7dc      	b.n	8000bb6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bfc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
} 
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	b017      	add	sp, #92	; 0x5c
 8000c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e7fa      	b.n	8000c0c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
  __HAL_LOCK(hadc);
 8000c16:	2302      	movs	r3, #2
 8000c18:	e7f8      	b.n	8000c0c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000c1a:	68a2      	ldr	r2, [r4, #8]
 8000c1c:	f002 0203 	and.w	r2, r2, #3
 8000c20:	2a01      	cmp	r2, #1
 8000c22:	d102      	bne.n	8000c2a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	07d4      	lsls	r4, r2, #31
 8000c28:	d4c5      	bmi.n	8000bb6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	6889      	ldr	r1, [r1, #8]
 8000c2e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000c32:	430d      	orrs	r5, r1
 8000c34:	f022 020f 	bic.w	r2, r2, #15
 8000c38:	4315      	orrs	r5, r2
 8000c3a:	609d      	str	r5, [r3, #8]
 8000c3c:	e7bb      	b.n	8000bb6 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8000c3e:	bf00      	nop
 8000c40:	50000100 	.word	0x50000100
 8000c44:	50000400 	.word	0x50000400
 8000c48:	50000500 	.word	0x50000500
 8000c4c:	50000300 	.word	0x50000300
 8000c50:	50000700 	.word	0x50000700

08000c54 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c56:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c5c:	041b      	lsls	r3, r3, #16
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c64:	0200      	lsls	r0, r0, #8
 8000c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c6e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c70:	60d3      	str	r3, [r2, #12]
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7a:	b530      	push	{r4, r5, lr}
 8000c7c:	68dc      	ldr	r4, [r3, #12]
 8000c7e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c82:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c88:	2b04      	cmp	r3, #4
 8000c8a:	bf28      	it	cs
 8000c8c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 0501 	mov.w	r5, #1
 8000c94:	fa05 f303 	lsl.w	r3, r5, r3
 8000c98:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9c:	bf8c      	ite	hi
 8000c9e:	3c03      	subhi	r4, #3
 8000ca0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca6:	fa05 f404 	lsl.w	r4, r5, r4
 8000caa:	3c01      	subs	r4, #1
 8000cac:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000cae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	ea42 0201 	orr.w	r2, r2, r1
 8000cb4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	bfaf      	iteee	ge
 8000cba:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	f000 000f 	andlt.w	r0, r0, #15
 8000cc2:	4b06      	ldrlt	r3, [pc, #24]	; (8000cdc <HAL_NVIC_SetPriority+0x64>)
 8000cc4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	bfa5      	ittet	ge
 8000cc8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000ccc:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cd4:	bd30      	pop	{r4, r5, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	e000ed14 	.word	0xe000ed14

08000ce0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000ce0:	0942      	lsrs	r2, r0, #5
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f000 001f 	and.w	r0, r0, #31
 8000ce8:	fa03 f000 	lsl.w	r0, r3, r0
 8000cec:	4b01      	ldr	r3, [pc, #4]	; (8000cf4 <HAL_NVIC_EnableIRQ+0x14>)
 8000cee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cfc:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000e94 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d04:	4a61      	ldr	r2, [pc, #388]	; (8000e8c <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000d06:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d08:	fa38 f403 	lsrs.w	r4, r8, r3
 8000d0c:	d102      	bne.n	8000d14 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000d0e:	b003      	add	sp, #12
 8000d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d14:	f04f 0e01 	mov.w	lr, #1
 8000d18:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000d1c:	ea18 060e 	ands.w	r6, r8, lr
 8000d20:	f000 80a6 	beq.w	8000e70 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d24:	684c      	ldr	r4, [r1, #4]
 8000d26:	f024 0710 	bic.w	r7, r4, #16
 8000d2a:	2f02      	cmp	r7, #2
 8000d2c:	d116      	bne.n	8000d5c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000d2e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d32:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d36:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d3a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d42:	f04f 0c0f 	mov.w	ip, #15
 8000d46:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d4a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d4e:	690d      	ldr	r5, [r1, #16]
 8000d50:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d54:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d58:	f8ca 5020 	str.w	r5, [sl, #32]
 8000d5c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d60:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000d62:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d66:	fa05 f50a 	lsl.w	r5, r5, sl
 8000d6a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d6c:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d70:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d74:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d78:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7a:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d7e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000d80:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d84:	d811      	bhi.n	8000daa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000d86:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8c:	68cf      	ldr	r7, [r1, #12]
 8000d8e:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000d92:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000d96:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d98:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d9e:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000da2:	409f      	lsls	r7, r3
 8000da4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000da8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000daa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dac:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dae:	688f      	ldr	r7, [r1, #8]
 8000db0:	fa07 f70a 	lsl.w	r7, r7, sl
 8000db4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000db6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db8:	00e5      	lsls	r5, r4, #3
 8000dba:	d559      	bpl.n	8000e70 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000dc0:	f045 0501 	orr.w	r5, r5, #1
 8000dc4:	f8c9 5018 	str.w	r5, [r9, #24]
 8000dc8:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000dcc:	f023 0703 	bic.w	r7, r3, #3
 8000dd0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000dd4:	f005 0501 	and.w	r5, r5, #1
 8000dd8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000ddc:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000dde:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000de4:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000de6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000dea:	f04f 0e0f 	mov.w	lr, #15
 8000dee:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000df2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000df6:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dfa:	d03b      	beq.n	8000e74 <HAL_GPIO_Init+0x17c>
 8000dfc:	4d24      	ldr	r5, [pc, #144]	; (8000e90 <HAL_GPIO_Init+0x198>)
 8000dfe:	42a8      	cmp	r0, r5
 8000e00:	d03a      	beq.n	8000e78 <HAL_GPIO_Init+0x180>
 8000e02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e06:	42a8      	cmp	r0, r5
 8000e08:	d038      	beq.n	8000e7c <HAL_GPIO_Init+0x184>
 8000e0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e0e:	42a8      	cmp	r0, r5
 8000e10:	d036      	beq.n	8000e80 <HAL_GPIO_Init+0x188>
 8000e12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e16:	42a8      	cmp	r0, r5
 8000e18:	d034      	beq.n	8000e84 <HAL_GPIO_Init+0x18c>
 8000e1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e1e:	42a8      	cmp	r0, r5
 8000e20:	d032      	beq.n	8000e88 <HAL_GPIO_Init+0x190>
 8000e22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e26:	42a8      	cmp	r0, r5
 8000e28:	bf14      	ite	ne
 8000e2a:	2507      	movne	r5, #7
 8000e2c:	2506      	moveq	r5, #6
 8000e2e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e32:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e36:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e38:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e3a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e40:	bf0c      	ite	eq
 8000e42:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000e44:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000e46:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000e48:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	bf0c      	ite	eq
 8000e50:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000e52:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000e54:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000e56:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e58:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	bf0c      	ite	eq
 8000e5e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000e60:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000e62:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000e64:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e66:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e68:	bf54      	ite	pl
 8000e6a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000e6c:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000e6e:	60d5      	str	r5, [r2, #12]
    position++;
 8000e70:	3301      	adds	r3, #1
 8000e72:	e749      	b.n	8000d08 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e74:	2500      	movs	r5, #0
 8000e76:	e7da      	b.n	8000e2e <HAL_GPIO_Init+0x136>
 8000e78:	2501      	movs	r5, #1
 8000e7a:	e7d8      	b.n	8000e2e <HAL_GPIO_Init+0x136>
 8000e7c:	2502      	movs	r5, #2
 8000e7e:	e7d6      	b.n	8000e2e <HAL_GPIO_Init+0x136>
 8000e80:	2503      	movs	r5, #3
 8000e82:	e7d4      	b.n	8000e2e <HAL_GPIO_Init+0x136>
 8000e84:	2504      	movs	r5, #4
 8000e86:	e7d2      	b.n	8000e2e <HAL_GPIO_Init+0x136>
 8000e88:	2505      	movs	r5, #5
 8000e8a:	e7d0      	b.n	8000e2e <HAL_GPIO_Init+0x136>
 8000e8c:	40010400 	.word	0x40010400
 8000e90:	48000400 	.word	0x48000400
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e98:	b10a      	cbz	r2, 8000e9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e9a:	6181      	str	r1, [r0, #24]
 8000e9c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e9e:	6281      	str	r1, [r0, #40]	; 0x28
 8000ea0:	4770      	bx	lr
	...

08000ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea8:	4605      	mov	r5, r0
 8000eaa:	b918      	cbnz	r0, 8000eb4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000eac:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000eae:	b002      	add	sp, #8
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb4:	6803      	ldr	r3, [r0, #0]
 8000eb6:	07df      	lsls	r7, r3, #31
 8000eb8:	d411      	bmi.n	8000ede <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eba:	682b      	ldr	r3, [r5, #0]
 8000ebc:	079e      	lsls	r6, r3, #30
 8000ebe:	f100 8088 	bmi.w	8000fd2 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	071c      	lsls	r4, r3, #28
 8000ec6:	f100 80fc 	bmi.w	80010c2 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eca:	682b      	ldr	r3, [r5, #0]
 8000ecc:	0758      	lsls	r0, r3, #29
 8000ece:	f100 8145 	bmi.w	800115c <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ed2:	69aa      	ldr	r2, [r5, #24]
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	f040 81dc 	bne.w	8001292 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 8000eda:	2000      	movs	r0, #0
 8000edc:	e7e7      	b.n	8000eae <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ede:	4cbd      	ldr	r4, [pc, #756]	; (80011d4 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d00a      	beq.n	8000f00 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eea:	6863      	ldr	r3, [r4, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d119      	bne.n	8000f28 <HAL_RCC_OscConfig+0x84>
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d113      	bne.n	8000f28 <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f04:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	6821      	ldr	r1, [r4, #0]
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	2201      	movs	r2, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	420b      	tst	r3, r1
 8000f1e:	d0cc      	beq.n	8000eba <HAL_RCC_OscConfig+0x16>
 8000f20:	686b      	ldr	r3, [r5, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1c9      	bne.n	8000eba <HAL_RCC_OscConfig+0x16>
 8000f26:	e7c1      	b.n	8000eac <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f28:	686b      	ldr	r3, [r5, #4]
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d11e      	bne.n	8000f6e <HAL_RCC_OscConfig+0xca>
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f38:	f7ff f970 	bl	800021c <HAL_GetTick>
 8000f3c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f40:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f42:	2701      	movs	r7, #1
 8000f44:	fa96 f3a6 	rbit	r3, r6
 8000f48:	6822      	ldr	r2, [r4, #0]
 8000f4a:	fa96 f3a6 	rbit	r3, r6
 8000f4e:	fab3 f383 	clz	r3, r3
 8000f52:	f003 031f 	and.w	r3, r3, #31
 8000f56:	fa07 f303 	lsl.w	r3, r7, r3
 8000f5a:	4213      	tst	r3, r2
 8000f5c:	d1ad      	bne.n	8000eba <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff f95d 	bl	800021c <HAL_GetTick>
 8000f62:	eba0 0008 	sub.w	r0, r0, r8
 8000f66:	2864      	cmp	r0, #100	; 0x64
 8000f68:	d9ec      	bls.n	8000f44 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	e79f      	b.n	8000eae <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f6e:	bb0b      	cbnz	r3, 8000fb4 <HAL_RCC_OscConfig+0x110>
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f76:	6023      	str	r3, [r4, #0]
 8000f78:	6823      	ldr	r3, [r4, #0]
 8000f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f80:	f7ff f94c 	bl	800021c <HAL_GetTick>
 8000f84:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f88:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	2701      	movs	r7, #1
 8000f8c:	fa96 f3a6 	rbit	r3, r6
 8000f90:	6822      	ldr	r2, [r4, #0]
 8000f92:	fa96 f3a6 	rbit	r3, r6
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	fa07 f303 	lsl.w	r3, r7, r3
 8000fa2:	4213      	tst	r3, r2
 8000fa4:	d089      	beq.n	8000eba <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa6:	f7ff f939 	bl	800021c <HAL_GetTick>
 8000faa:	eba0 0008 	sub.w	r0, r0, r8
 8000fae:	2864      	cmp	r0, #100	; 0x64
 8000fb0:	d9ec      	bls.n	8000f8c <HAL_RCC_OscConfig+0xe8>
 8000fb2:	e7da      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	d103      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x120>
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc0:	6023      	str	r3, [r4, #0]
 8000fc2:	e7b5      	b.n	8000f30 <HAL_RCC_OscConfig+0x8c>
 8000fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc8:	6023      	str	r3, [r4, #0]
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	e7b1      	b.n	8000f36 <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd2:	4c80      	ldr	r4, [pc, #512]	; (80011d4 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	6863      	ldr	r3, [r4, #4]
 8000fd6:	f013 0f0c 	tst.w	r3, #12
 8000fda:	d00a      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d125      	bne.n	8001032 <HAL_RCC_OscConfig+0x18e>
 8000fe6:	6863      	ldr	r3, [r4, #4]
 8000fe8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ff0:	d11f      	bne.n	8001032 <HAL_RCC_OscConfig+0x18e>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff8:	6821      	ldr	r1, [r4, #0]
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	2201      	movs	r2, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	420b      	tst	r3, r1
 800100e:	d003      	beq.n	8001018 <HAL_RCC_OscConfig+0x174>
 8001010:	68eb      	ldr	r3, [r5, #12]
 8001012:	4293      	cmp	r3, r2
 8001014:	f47f af4a 	bne.w	8000eac <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001018:	6821      	ldr	r1, [r4, #0]
 800101a:	23f8      	movs	r3, #248	; 0xf8
 800101c:	fa93 f3a3 	rbit	r3, r3
 8001020:	fab3 f283 	clz	r2, r3
 8001024:	692b      	ldr	r3, [r5, #16]
 8001026:	4093      	lsls	r3, r2
 8001028:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800102c:	4313      	orrs	r3, r2
 800102e:	6023      	str	r3, [r4, #0]
 8001030:	e747      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001032:	68ea      	ldr	r2, [r5, #12]
 8001034:	2601      	movs	r6, #1
 8001036:	b30a      	cbz	r2, 800107c <HAL_RCC_OscConfig+0x1d8>
 8001038:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	2702      	movs	r7, #2
 800104c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800104e:	f7ff f8e5 	bl	800021c <HAL_GetTick>
 8001052:	4680      	mov	r8, r0
 8001054:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	fa97 f3a7 	rbit	r3, r7
 800105e:	fab3 f383 	clz	r3, r3
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	fa06 f303 	lsl.w	r3, r6, r3
 800106a:	4213      	tst	r3, r2
 800106c:	d1d4      	bne.n	8001018 <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff f8d5 	bl	800021c <HAL_GetTick>
 8001072:	eba0 0008 	sub.w	r0, r0, r8
 8001076:	2802      	cmp	r0, #2
 8001078:	d9ec      	bls.n	8001054 <HAL_RCC_OscConfig+0x1b0>
 800107a:	e776      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
 800107c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001080:	fab3 f383 	clz	r3, r3
 8001084:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001088:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	2702      	movs	r7, #2
 8001090:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001092:	f7ff f8c3 	bl	800021c <HAL_GetTick>
 8001096:	4680      	mov	r8, r0
 8001098:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109c:	6822      	ldr	r2, [r4, #0]
 800109e:	fa97 f3a7 	rbit	r3, r7
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	fa06 f303 	lsl.w	r3, r6, r3
 80010ae:	4213      	tst	r3, r2
 80010b0:	f43f af07 	beq.w	8000ec2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b4:	f7ff f8b2 	bl	800021c <HAL_GetTick>
 80010b8:	eba0 0008 	sub.w	r0, r0, r8
 80010bc:	2802      	cmp	r0, #2
 80010be:	d9eb      	bls.n	8001098 <HAL_RCC_OscConfig+0x1f4>
 80010c0:	e753      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c2:	696a      	ldr	r2, [r5, #20]
 80010c4:	4e43      	ldr	r6, [pc, #268]	; (80011d4 <HAL_RCC_OscConfig+0x330>)
 80010c6:	4944      	ldr	r1, [pc, #272]	; (80011d8 <HAL_RCC_OscConfig+0x334>)
 80010c8:	2401      	movs	r4, #1
 80010ca:	b31a      	cbz	r2, 8001114 <HAL_RCC_OscConfig+0x270>
 80010cc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	440b      	add	r3, r1
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	2702      	movs	r7, #2
 80010da:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80010dc:	f7ff f89e 	bl	800021c <HAL_GetTick>
 80010e0:	4680      	mov	r8, r0
 80010e2:	fa97 f3a7 	rbit	r3, r7
 80010e6:	fa97 f3a7 	rbit	r3, r7
 80010ea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010f0:	fa97 f3a7 	rbit	r3, r7
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	fa04 f303 	lsl.w	r3, r4, r3
 8001100:	4213      	tst	r3, r2
 8001102:	f47f aee2 	bne.w	8000eca <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff f889 	bl	800021c <HAL_GetTick>
 800110a:	eba0 0008 	sub.w	r0, r0, r8
 800110e:	2802      	cmp	r0, #2
 8001110:	d9e7      	bls.n	80010e2 <HAL_RCC_OscConfig+0x23e>
 8001112:	e72a      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
 8001114:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001118:	fab3 f383 	clz	r3, r3
 800111c:	440b      	add	r3, r1
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	2702      	movs	r7, #2
 8001122:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001124:	f7ff f87a 	bl	800021c <HAL_GetTick>
 8001128:	4680      	mov	r8, r0
 800112a:	fa97 f3a7 	rbit	r3, r7
 800112e:	fa97 f3a7 	rbit	r3, r7
 8001132:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001136:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001138:	fa97 f3a7 	rbit	r3, r7
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	fa04 f303 	lsl.w	r3, r4, r3
 8001148:	4213      	tst	r3, r2
 800114a:	f43f aebe 	beq.w	8000eca <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff f865 	bl	800021c <HAL_GetTick>
 8001152:	eba0 0008 	sub.w	r0, r0, r8
 8001156:	2802      	cmp	r0, #2
 8001158:	d9e7      	bls.n	800112a <HAL_RCC_OscConfig+0x286>
 800115a:	e706      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115c:	4c1d      	ldr	r4, [pc, #116]	; (80011d4 <HAL_RCC_OscConfig+0x330>)
 800115e:	69e3      	ldr	r3, [r4, #28]
 8001160:	00d9      	lsls	r1, r3, #3
 8001162:	d434      	bmi.n	80011ce <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	69e3      	ldr	r3, [r4, #28]
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	61e3      	str	r3, [r4, #28]
 800116c:	69e3      	ldr	r3, [r4, #28]
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001176:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4f18      	ldr	r7, [pc, #96]	; (80011dc <HAL_RCC_OscConfig+0x338>)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	05da      	lsls	r2, r3, #23
 800117e:	d52f      	bpl.n	80011e0 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001180:	68ab      	ldr	r3, [r5, #8]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d13d      	bne.n	8001202 <HAL_RCC_OscConfig+0x35e>
 8001186:	6a23      	ldr	r3, [r4, #32]
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800118e:	f7ff f845 	bl	800021c <HAL_GetTick>
 8001192:	2702      	movs	r7, #2
 8001194:	4682      	mov	sl, r0
 8001196:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001198:	f04f 0801 	mov.w	r8, #1
 800119c:	fa97 f3a7 	rbit	r3, r7
 80011a0:	fa97 f3a7 	rbit	r3, r7
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d06c      	beq.n	8001282 <HAL_RCC_OscConfig+0x3de>
 80011a8:	6a22      	ldr	r2, [r4, #32]
 80011aa:	fa99 f3a9 	rbit	r3, r9
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	fa08 f303 	lsl.w	r3, r8, r3
 80011ba:	4213      	tst	r3, r2
 80011bc:	d058      	beq.n	8001270 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 80011be:	2e00      	cmp	r6, #0
 80011c0:	f43f ae87 	beq.w	8000ed2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c4:	69e3      	ldr	r3, [r4, #28]
 80011c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ca:	61e3      	str	r3, [r4, #28]
 80011cc:	e681      	b.n	8000ed2 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2600      	movs	r6, #0
 80011d0:	e7d2      	b.n	8001178 <HAL_RCC_OscConfig+0x2d4>
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	10908120 	.word	0x10908120
 80011dc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011e8:	f7ff f818 	bl	800021c <HAL_GetTick>
 80011ec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	05db      	lsls	r3, r3, #23
 80011f2:	d4c5      	bmi.n	8001180 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f4:	f7ff f812 	bl	800021c <HAL_GetTick>
 80011f8:	eba0 0008 	sub.w	r0, r0, r8
 80011fc:	2864      	cmp	r0, #100	; 0x64
 80011fe:	d9f6      	bls.n	80011ee <HAL_RCC_OscConfig+0x34a>
 8001200:	e6b3      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001202:	bb3b      	cbnz	r3, 8001254 <HAL_RCC_OscConfig+0x3b0>
 8001204:	6a23      	ldr	r3, [r4, #32]
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	6223      	str	r3, [r4, #32]
 800120c:	6a23      	ldr	r3, [r4, #32]
 800120e:	f023 0304 	bic.w	r3, r3, #4
 8001212:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001214:	f7ff f802 	bl	800021c <HAL_GetTick>
 8001218:	2702      	movs	r7, #2
 800121a:	4682      	mov	sl, r0
 800121c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121e:	f04f 0801 	mov.w	r8, #1
 8001222:	fa97 f3a7 	rbit	r3, r7
 8001226:	fa97 f3a7 	rbit	r3, r7
 800122a:	b373      	cbz	r3, 800128a <HAL_RCC_OscConfig+0x3e6>
 800122c:	6a22      	ldr	r2, [r4, #32]
 800122e:	fa99 f3a9 	rbit	r3, r9
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	fa08 f303 	lsl.w	r3, r8, r3
 800123e:	4213      	tst	r3, r2
 8001240:	d0bd      	beq.n	80011be <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7fe ffeb 	bl	800021c <HAL_GetTick>
 8001246:	f241 3388 	movw	r3, #5000	; 0x1388
 800124a:	eba0 000a 	sub.w	r0, r0, sl
 800124e:	4298      	cmp	r0, r3
 8001250:	d9e7      	bls.n	8001222 <HAL_RCC_OscConfig+0x37e>
 8001252:	e68a      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	2b05      	cmp	r3, #5
 8001256:	6a23      	ldr	r3, [r4, #32]
 8001258:	d103      	bne.n	8001262 <HAL_RCC_OscConfig+0x3be>
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6223      	str	r3, [r4, #32]
 8001260:	e791      	b.n	8001186 <HAL_RCC_OscConfig+0x2e2>
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6223      	str	r3, [r4, #32]
 8001268:	6a23      	ldr	r3, [r4, #32]
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	e78d      	b.n	800118c <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7fe ffd4 	bl	800021c <HAL_GetTick>
 8001274:	f241 3388 	movw	r3, #5000	; 0x1388
 8001278:	eba0 000a 	sub.w	r0, r0, sl
 800127c:	4298      	cmp	r0, r3
 800127e:	d98d      	bls.n	800119c <HAL_RCC_OscConfig+0x2f8>
 8001280:	e673      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
 8001282:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001288:	e78f      	b.n	80011aa <HAL_RCC_OscConfig+0x306>
 800128a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001290:	e7cd      	b.n	800122e <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001292:	4c44      	ldr	r4, [pc, #272]	; (80013a4 <HAL_RCC_OscConfig+0x500>)
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	f43f ae06 	beq.w	8000eac <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a0:	2a02      	cmp	r2, #2
 80012a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012a6:	d158      	bne.n	800135a <HAL_RCC_OscConfig+0x4b6>
 80012a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012ac:	fab3 f383 	clz	r3, r3
 80012b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012be:	f7fe ffad 	bl	800021c <HAL_GetTick>
 80012c2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80012c6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c8:	2601      	movs	r6, #1
 80012ca:	fa97 f3a7 	rbit	r3, r7
 80012ce:	6822      	ldr	r2, [r4, #0]
 80012d0:	fa97 f3a7 	rbit	r3, r7
 80012d4:	fab3 f383 	clz	r3, r3
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	fa06 f303 	lsl.w	r3, r6, r3
 80012e0:	4213      	tst	r3, r2
 80012e2:	d133      	bne.n	800134c <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80012e8:	f023 030f 	bic.w	r3, r3, #15
 80012ec:	4313      	orrs	r3, r2
 80012ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012f0:	6862      	ldr	r2, [r4, #4]
 80012f2:	6a2b      	ldr	r3, [r5, #32]
 80012f4:	69e9      	ldr	r1, [r5, #28]
 80012f6:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80012fa:	430b      	orrs	r3, r1
 80012fc:	4313      	orrs	r3, r2
 80012fe:	6063      	str	r3, [r4, #4]
 8001300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001304:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001310:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800131a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800131c:	f7fe ff7e 	bl	800021c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001320:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001322:	4607      	mov	r7, r0
 8001324:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001328:	6822      	ldr	r2, [r4, #0]
 800132a:	fa95 f3a5 	rbit	r3, r5
 800132e:	fab3 f383 	clz	r3, r3
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	fa06 f303 	lsl.w	r3, r6, r3
 800133a:	4213      	tst	r3, r2
 800133c:	f47f adcd 	bne.w	8000eda <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001340:	f7fe ff6c 	bl	800021c <HAL_GetTick>
 8001344:	1bc0      	subs	r0, r0, r7
 8001346:	2802      	cmp	r0, #2
 8001348:	d9ec      	bls.n	8001324 <HAL_RCC_OscConfig+0x480>
 800134a:	e60e      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134c:	f7fe ff66 	bl	800021c <HAL_GetTick>
 8001350:	eba0 0008 	sub.w	r0, r0, r8
 8001354:	2802      	cmp	r0, #2
 8001356:	d9b8      	bls.n	80012ca <HAL_RCC_OscConfig+0x426>
 8001358:	e607      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
 800135a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800135e:	fab3 f383 	clz	r3, r3
 8001362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001366:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001370:	f7fe ff54 	bl	800021c <HAL_GetTick>
 8001374:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001378:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137a:	2601      	movs	r6, #1
 800137c:	fa95 f3a5 	rbit	r3, r5
 8001380:	6822      	ldr	r2, [r4, #0]
 8001382:	fa95 f3a5 	rbit	r3, r5
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	fa06 f303 	lsl.w	r3, r6, r3
 8001392:	4213      	tst	r3, r2
 8001394:	f43f ada1 	beq.w	8000eda <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001398:	f7fe ff40 	bl	800021c <HAL_GetTick>
 800139c:	1bc0      	subs	r0, r0, r7
 800139e:	2802      	cmp	r0, #2
 80013a0:	d9ec      	bls.n	800137c <HAL_RCC_OscConfig+0x4d8>
 80013a2:	e5e2      	b.n	8000f6a <HAL_RCC_OscConfig+0xc6>
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80013a8:	4911      	ldr	r1, [pc, #68]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x48>)
 80013aa:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ac:	f003 020c 	and.w	r2, r3, #12
 80013b0:	2a08      	cmp	r2, #8
 80013b2:	d11a      	bne.n	80013ea <HAL_RCC_GetSysClockFreq+0x42>
 80013b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013b8:	fa92 f2a2 	rbit	r2, r2
 80013bc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013be:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80013c4:	fa90 f0a0 	rbit	r0, r0
 80013c8:	fab0 f080 	clz	r0, r0
 80013cc:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013d4:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013d6:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80013dc:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <HAL_RCC_GetSysClockFreq+0x54>)
 80013e0:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013e4:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80013e6:	4348      	muls	r0, r1
 80013e8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	08003478 	.word	0x08003478
 80013f8:	08003488 	.word	0x08003488
 80013fc:	007a1200 	.word	0x007a1200

08001400 <HAL_RCC_ClockConfig>:
{
 8001400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001404:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001406:	4604      	mov	r4, r0
 8001408:	b910      	cbnz	r0, 8001410 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
 800140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <HAL_RCC_ClockConfig+0x144>)
 8001412:	6813      	ldr	r3, [r2, #0]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	428b      	cmp	r3, r1
 800141a:	d32e      	bcc.n	800147a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800141c:	6822      	ldr	r2, [r4, #0]
 800141e:	0791      	lsls	r1, r2, #30
 8001420:	d436      	bmi.n	8001490 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	07d2      	lsls	r2, r2, #31
 8001424:	d43c      	bmi.n	80014a0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_RCC_ClockConfig+0x144>)
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	429d      	cmp	r5, r3
 8001430:	d375      	bcc.n	800151e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001432:	6822      	ldr	r2, [r4, #0]
 8001434:	4d44      	ldr	r5, [pc, #272]	; (8001548 <HAL_RCC_ClockConfig+0x148>)
 8001436:	f012 0f04 	tst.w	r2, #4
 800143a:	d17c      	bne.n	8001536 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143c:	0713      	lsls	r3, r2, #28
 800143e:	d506      	bpl.n	800144e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001440:	686b      	ldr	r3, [r5, #4]
 8001442:	6922      	ldr	r2, [r4, #16]
 8001444:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001448:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800144c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800144e:	f7ff ffab 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001452:	686b      	ldr	r3, [r5, #4]
 8001454:	22f0      	movs	r2, #240	; 0xf0
 8001456:	fa92 f2a2 	rbit	r2, r2
 800145a:	fab2 f282 	clz	r2, r2
 800145e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001462:	40d3      	lsrs	r3, r2
 8001464:	4a39      	ldr	r2, [pc, #228]	; (800154c <HAL_RCC_ClockConfig+0x14c>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	40d8      	lsrs	r0, r3
 800146a:	4b39      	ldr	r3, [pc, #228]	; (8001550 <HAL_RCC_ClockConfig+0x150>)
 800146c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800146e:	2000      	movs	r0, #0
 8001470:	f001 fede 	bl	8003230 <HAL_InitTick>
  return HAL_OK;
 8001474:	2000      	movs	r0, #0
 8001476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f023 0307 	bic.w	r3, r3, #7
 8001480:	430b      	orrs	r3, r1
 8001482:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001484:	6813      	ldr	r3, [r2, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	4299      	cmp	r1, r3
 800148c:	d1bd      	bne.n	800140a <HAL_RCC_ClockConfig+0xa>
 800148e:	e7c5      	b.n	800141c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	492d      	ldr	r1, [pc, #180]	; (8001548 <HAL_RCC_ClockConfig+0x148>)
 8001492:	68a0      	ldr	r0, [r4, #8]
 8001494:	684b      	ldr	r3, [r1, #4]
 8001496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800149a:	4303      	orrs	r3, r0
 800149c:	604b      	str	r3, [r1, #4]
 800149e:	e7c0      	b.n	8001422 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a0:	6862      	ldr	r2, [r4, #4]
 80014a2:	4e29      	ldr	r6, [pc, #164]	; (8001548 <HAL_RCC_ClockConfig+0x148>)
 80014a4:	2a01      	cmp	r2, #1
 80014a6:	d127      	bne.n	80014f8 <HAL_RCC_ClockConfig+0xf8>
 80014a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ac:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b0:	6831      	ldr	r1, [r6, #0]
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	d0a1      	beq.n	800140a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	6873      	ldr	r3, [r6, #4]
 80014c8:	f023 0303 	bic.w	r3, r3, #3
 80014cc:	431a      	orrs	r2, r3
 80014ce:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80014d0:	f7fe fea4 	bl	800021c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	6873      	ldr	r3, [r6, #4]
 80014dc:	6862      	ldr	r2, [r4, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014e6:	d09e      	beq.n	8001426 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f7fe fe98 	bl	800021c <HAL_GetTick>
 80014ec:	1bc0      	subs	r0, r0, r7
 80014ee:	4540      	cmp	r0, r8
 80014f0:	d9f3      	bls.n	80014da <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80014f2:	2003      	movs	r0, #3
}
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f8:	2a02      	cmp	r2, #2
 80014fa:	bf0c      	ite	eq
 80014fc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001500:	2302      	movne	r3, #2
 8001502:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	6830      	ldr	r0, [r6, #0]
 8001508:	fa93 f3a3 	rbit	r3, r3
 800150c:	fab3 f383 	clz	r3, r3
 8001510:	f003 031f 	and.w	r3, r3, #31
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	4203      	tst	r3, r0
 800151c:	e7d2      	b.n	80014c4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	f023 0307 	bic.w	r3, r3, #7
 8001524:	432b      	orrs	r3, r5
 8001526:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	429d      	cmp	r5, r3
 8001530:	f47f af6b 	bne.w	800140a <HAL_RCC_ClockConfig+0xa>
 8001534:	e77d      	b.n	8001432 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001536:	686b      	ldr	r3, [r5, #4]
 8001538:	68e1      	ldr	r1, [r4, #12]
 800153a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800153e:	430b      	orrs	r3, r1
 8001540:	606b      	str	r3, [r5, #4]
 8001542:	e77b      	b.n	800143c <HAL_RCC_ClockConfig+0x3c>
 8001544:	40022000 	.word	0x40022000
 8001548:	40021000 	.word	0x40021000
 800154c:	080034ef 	.word	0x080034ef
 8001550:	20000010 	.word	0x20000010

08001554 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001556:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	fa92 f2a2 	rbit	r2, r2
 8001560:	fab2 f282 	clz	r2, r2
 8001564:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001568:	40d3      	lsrs	r3, r2
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_RCC_GetPCLK1Freq+0x28>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001570:	6810      	ldr	r0, [r2, #0]
}    
 8001572:	40d8      	lsrs	r0, r3
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	080034ff 	.word	0x080034ff
 8001580:	20000010 	.word	0x20000010

08001584 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001586:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	fa92 f2a2 	rbit	r2, r2
 8001590:	fab2 f282 	clz	r2, r2
 8001594:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001598:	40d3      	lsrs	r3, r2
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80015a0:	6810      	ldr	r0, [r2, #0]
} 
 80015a2:	40d8      	lsrs	r0, r3
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	080034ff 	.word	0x080034ff
 80015b0:	20000010 	.word	0x20000010

080015b4 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015b4:	230f      	movs	r3, #15
 80015b6:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_GetClockConfig+0x34>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80015c8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80015d0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015da:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_RCC_GetClockConfig+0x38>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	600b      	str	r3, [r1, #0]
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40022000 	.word	0x40022000

080015f0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015f0:	6803      	ldr	r3, [r0, #0]
{
 80015f2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015f6:	03df      	lsls	r7, r3, #15
{
 80015f8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015fa:	d523      	bpl.n	8001644 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fc:	4d9b      	ldr	r5, [pc, #620]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80015fe:	69eb      	ldr	r3, [r5, #28]
 8001600:	00de      	lsls	r6, r3, #3
 8001602:	f100 80d7 	bmi.w	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	69eb      	ldr	r3, [r5, #28]
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	61eb      	str	r3, [r5, #28]
 800160e:	69eb      	ldr	r3, [r5, #28]
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001618:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4f95      	ldr	r7, [pc, #596]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	05d8      	lsls	r0, r3, #23
 8001620:	f140 80ca 	bpl.w	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001624:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001626:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800162a:	f040 80da 	bne.w	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800162e:	6a2b      	ldr	r3, [r5, #32]
 8001630:	6862      	ldr	r2, [r4, #4]
 8001632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001636:	4313      	orrs	r3, r2
 8001638:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800163a:	b11e      	cbz	r6, 8001644 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163c:	69eb      	ldr	r3, [r5, #28]
 800163e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001642:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001644:	6820      	ldr	r0, [r4, #0]
 8001646:	07c3      	lsls	r3, r0, #31
 8001648:	d506      	bpl.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800164a:	4a88      	ldr	r2, [pc, #544]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800164c:	68a1      	ldr	r1, [r4, #8]
 800164e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001650:	f023 0303 	bic.w	r3, r3, #3
 8001654:	430b      	orrs	r3, r1
 8001656:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001658:	0787      	lsls	r7, r0, #30
 800165a:	d506      	bpl.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800165c:	4a83      	ldr	r2, [pc, #524]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800165e:	68e1      	ldr	r1, [r4, #12]
 8001660:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001662:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001666:	430b      	orrs	r3, r1
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800166a:	0746      	lsls	r6, r0, #29
 800166c:	d506      	bpl.n	800167c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800166e:	4a7f      	ldr	r2, [pc, #508]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001670:	6921      	ldr	r1, [r4, #16]
 8001672:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001674:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001678:	430b      	orrs	r3, r1
 800167a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800167c:	0685      	lsls	r5, r0, #26
 800167e:	d506      	bpl.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001680:	4a7a      	ldr	r2, [pc, #488]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001682:	69e1      	ldr	r1, [r4, #28]
 8001684:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001686:	f023 0310 	bic.w	r3, r3, #16
 800168a:	430b      	orrs	r3, r1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800168e:	0381      	lsls	r1, r0, #14
 8001690:	d506      	bpl.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001692:	4a76      	ldr	r2, [pc, #472]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001694:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001696:	6853      	ldr	r3, [r2, #4]
 8001698:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800169c:	430b      	orrs	r3, r1
 800169e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80016a0:	0642      	lsls	r2, r0, #25
 80016a2:	d506      	bpl.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80016a4:	4a71      	ldr	r2, [pc, #452]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016a6:	6a21      	ldr	r1, [r4, #32]
 80016a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016aa:	f023 0320 	bic.w	r3, r3, #32
 80016ae:	430b      	orrs	r3, r1
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80016b2:	0343      	lsls	r3, r0, #13
 80016b4:	d506      	bpl.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80016b6:	4a6d      	ldr	r2, [pc, #436]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80016c4:	0707      	lsls	r7, r0, #28
 80016c6:	d506      	bpl.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80016c8:	4a68      	ldr	r2, [pc, #416]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016ca:	6961      	ldr	r1, [r4, #20]
 80016cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016ce:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80016d2:	430b      	orrs	r3, r1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016d6:	06c6      	lsls	r6, r0, #27
 80016d8:	d506      	bpl.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016da:	4a64      	ldr	r2, [pc, #400]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016dc:	69a1      	ldr	r1, [r4, #24]
 80016de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80016e8:	0585      	lsls	r5, r0, #22
 80016ea:	d506      	bpl.n	80016fa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016ec:	4a5f      	ldr	r2, [pc, #380]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80016f0:	6853      	ldr	r3, [r2, #4]
 80016f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016f6:	430b      	orrs	r3, r1
 80016f8:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80016fa:	0601      	lsls	r1, r0, #24
 80016fc:	d506      	bpl.n	800170c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80016fe:	4a5b      	ldr	r2, [pc, #364]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001700:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001704:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001708:	430b      	orrs	r3, r1
 800170a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800170c:	05c2      	lsls	r2, r0, #23
 800170e:	d506      	bpl.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001710:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001712:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001714:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001716:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800171a:	430b      	orrs	r3, r1
 800171c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800171e:	04c3      	lsls	r3, r0, #19
 8001720:	d506      	bpl.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001722:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001726:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172c:	430b      	orrs	r3, r1
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001730:	0487      	lsls	r7, r0, #18
 8001732:	d506      	bpl.n	8001742 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001734:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001736:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001738:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800173a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800173e:	430b      	orrs	r3, r1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001742:	02c6      	lsls	r6, r0, #11
 8001744:	d506      	bpl.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001746:	4a49      	ldr	r2, [pc, #292]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001748:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800174a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800174c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001750:	430b      	orrs	r3, r1
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001754:	0285      	lsls	r5, r0, #10
 8001756:	d506      	bpl.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001758:	4a44      	ldr	r2, [pc, #272]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800175a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800175c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800175e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001762:	430b      	orrs	r3, r1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001766:	0241      	lsls	r1, r0, #9
 8001768:	d506      	bpl.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800176a:	4a40      	ldr	r2, [pc, #256]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800176c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800176e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001774:	430b      	orrs	r3, r1
 8001776:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001778:	0202      	lsls	r2, r0, #8
 800177a:	d506      	bpl.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800177c:	4a3b      	ldr	r2, [pc, #236]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800177e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001780:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001786:	430b      	orrs	r3, r1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800178a:	01c3      	lsls	r3, r0, #7
 800178c:	d506      	bpl.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800178e:	4a37      	ldr	r2, [pc, #220]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001790:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001792:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001798:	430b      	orrs	r3, r1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800179c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80017a0:	d01c      	beq.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017a4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80017a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017ac:	430b      	orrs	r3, r1
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80017b0:	2000      	movs	r0, #0
 80017b2:	e013      	b.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 80017b4:	2600      	movs	r6, #0
 80017b6:	e730      	b.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80017c0:	f7fe fd2c 	bl	800021c <HAL_GetTick>
 80017c4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	05d9      	lsls	r1, r3, #23
 80017ca:	f53f af2b 	bmi.w	8001624 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7fe fd25 	bl	800021c <HAL_GetTick>
 80017d2:	eba0 0008 	sub.w	r0, r0, r8
 80017d6:	2864      	cmp	r0, #100	; 0x64
 80017d8:	d9f5      	bls.n	80017c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80017da:	2003      	movs	r0, #3
}
 80017dc:	b002      	add	sp, #8
 80017de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017e2:	6862      	ldr	r2, [r4, #4]
 80017e4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f43f af20 	beq.w	800162e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017ee:	6a29      	ldr	r1, [r5, #32]
 80017f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80017f8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80017fc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001874 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	4472      	add	r2, lr
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	2701      	movs	r7, #1
 800180a:	6017      	str	r7, [r2, #0]
 800180c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	4473      	add	r3, lr
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800181c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800181e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001820:	f57f af05 	bpl.w	800162e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001824:	f7fe fcfa 	bl	800021c <HAL_GetTick>
 8001828:	f04f 0802 	mov.w	r8, #2
 800182c:	4682      	mov	sl, r0
 800182e:	46c1      	mov	r9, r8
 8001830:	fa98 f3a8 	rbit	r3, r8
 8001834:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	b1a3      	cbz	r3, 8001864 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800183a:	6a2a      	ldr	r2, [r5, #32]
 800183c:	fa99 f3a9 	rbit	r3, r9
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	f003 031f 	and.w	r3, r3, #31
 8001848:	fa07 f303 	lsl.w	r3, r7, r3
 800184c:	4213      	tst	r3, r2
 800184e:	f47f aeee 	bne.w	800162e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7fe fce3 	bl	800021c <HAL_GetTick>
 8001856:	f241 3388 	movw	r3, #5000	; 0x1388
 800185a:	eba0 000a 	sub.w	r0, r0, sl
 800185e:	4298      	cmp	r0, r3
 8001860:	d9e6      	bls.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001862:	e7ba      	b.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8001864:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800186a:	e7e7      	b.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 800186c:	40021000 	.word	0x40021000
 8001870:	40007000 	.word	0x40007000
 8001874:	10908100 	.word	0x10908100

08001878 <HAL_TIM_Base_MspInit>:
 8001878:	4770      	bx	lr

0800187a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800187a:	6803      	ldr	r3, [r0, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800188c:	2000      	movs	r0, #0
 800188e:	4770      	bx	lr

08001890 <HAL_TIM_OC_DelayElapsedCallback>:
 8001890:	4770      	bx	lr

08001892 <HAL_TIM_IC_CaptureCallback>:
 8001892:	4770      	bx	lr

08001894 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001894:	4770      	bx	lr

08001896 <HAL_TIM_TriggerCallback>:
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001898:	6803      	ldr	r3, [r0, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	0791      	lsls	r1, r2, #30
{
 800189e:	b510      	push	{r4, lr}
 80018a0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018a2:	d50f      	bpl.n	80018c4 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	0792      	lsls	r2, r2, #30
 80018a8:	d50c      	bpl.n	80018c4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018aa:	f06f 0202 	mvn.w	r2, #2
 80018ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018b2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b4:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018b6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b8:	f000 8085 	beq.w	80019c6 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80018bc:	f7ff ffe9 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c0:	2300      	movs	r3, #0
 80018c2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	0752      	lsls	r2, r2, #29
 80018ca:	d510      	bpl.n	80018ee <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	0750      	lsls	r0, r2, #29
 80018d0:	d50d      	bpl.n	80018ee <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018d2:	f06f 0204 	mvn.w	r2, #4
 80018d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018d8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018da:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018dc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018e0:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80018e2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018e4:	d075      	beq.n	80019d2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80018e6:	f7ff ffd4 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	2300      	movs	r3, #0
 80018ec:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	0711      	lsls	r1, r2, #28
 80018f4:	d50f      	bpl.n	8001916 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	0712      	lsls	r2, r2, #28
 80018fa:	d50c      	bpl.n	8001916 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80018fc:	f06f 0208 	mvn.w	r2, #8
 8001900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001902:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001904:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001906:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001908:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190c:	d067      	beq.n	80019de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800190e:	f7ff ffc0 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	2300      	movs	r3, #0
 8001914:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	06d0      	lsls	r0, r2, #27
 800191c:	d510      	bpl.n	8001940 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	06d1      	lsls	r1, r2, #27
 8001922:	d50d      	bpl.n	8001940 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001924:	f06f 0210 	mvn.w	r2, #16
 8001928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800192c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001932:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001934:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001936:	d058      	beq.n	80019ea <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001938:	f7ff ffab 	bl	8001892 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193c:	2300      	movs	r3, #0
 800193e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	07d2      	lsls	r2, r2, #31
 8001946:	d508      	bpl.n	800195a <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	07d0      	lsls	r0, r2, #31
 800194c:	d505      	bpl.n	800195a <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800194e:	f06f 0201 	mvn.w	r2, #1
 8001952:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001954:	4620      	mov	r0, r4
 8001956:	f001 fb57 	bl	8003008 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	0611      	lsls	r1, r2, #24
 8001960:	d508      	bpl.n	8001974 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	0612      	lsls	r2, r2, #24
 8001966:	d505      	bpl.n	8001974 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800196c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800196e:	4620      	mov	r0, r4
 8001970:	f000 f8c7 	bl	8001b02 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	05d0      	lsls	r0, r2, #23
 800197a:	d508      	bpl.n	800198e <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	0611      	lsls	r1, r2, #24
 8001980:	d505      	bpl.n	800198e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001982:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001986:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001988:	4620      	mov	r0, r4
 800198a:	f000 f8bb 	bl	8001b04 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	0652      	lsls	r2, r2, #25
 8001994:	d508      	bpl.n	80019a8 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	0650      	lsls	r0, r2, #25
 800199a:	d505      	bpl.n	80019a8 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800199c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff ff77 	bl	8001896 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	0691      	lsls	r1, r2, #26
 80019ae:	d522      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	0692      	lsls	r2, r2, #26
 80019b4:	d51f      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019b6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80019ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019bc:	611a      	str	r2, [r3, #16]
    }
  }
}
 80019be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80019c2:	f000 b89d 	b.w	8001b00 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c6:	f7ff ff63 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff ff62 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
 80019d0:	e776      	b.n	80018c0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d2:	f7ff ff5d 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d6:	4620      	mov	r0, r4
 80019d8:	f7ff ff5c 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
 80019dc:	e785      	b.n	80018ea <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	f7ff ff57 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80019e2:	4620      	mov	r0, r4
 80019e4:	f7ff ff56 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
 80019e8:	e793      	b.n	8001912 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ea:	f7ff ff51 	bl	8001890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ee:	4620      	mov	r0, r4
 80019f0:	f7ff ff50 	bl	8001894 <HAL_TIM_PWM_PulseFinishedCallback>
 80019f4:	e7a2      	b.n	800193c <HAL_TIM_IRQHandler+0xa4>
 80019f6:	bd10      	pop	{r4, pc}

080019f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019f8:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 80019fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d012      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a04:	d00f      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a0a:	4290      	cmp	r0, r2
 8001a0c:	d00b      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a12:	4290      	cmp	r0, r2
 8001a14:	d007      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a16:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d003      	beq.n	8001a26 <TIM_Base_SetConfig+0x2e>
 8001a1e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d115      	bne.n	8001a52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001a26:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a2c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a2e:	4a25      	ldr	r2, [pc, #148]	; (8001ac4 <TIM_Base_SetConfig+0xcc>)
 8001a30:	4290      	cmp	r0, r2
 8001a32:	d01d      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a38:	d01a      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a3a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a3e:	4290      	cmp	r0, r2
 8001a40:	d016      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a46:	4290      	cmp	r0, r2
 8001a48:	d012      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a4a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d00e      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <TIM_Base_SetConfig+0xd0>)
 8001a54:	4290      	cmp	r0, r2
 8001a56:	d00b      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5c:	4290      	cmp	r0, r2
 8001a5e:	d007      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a64:	4290      	cmp	r0, r2
 8001a66:	d003      	beq.n	8001a70 <TIM_Base_SetConfig+0x78>
 8001a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a6c:	4290      	cmp	r0, r2
 8001a6e:	d103      	bne.n	8001a78 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a70:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a76:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a78:	694a      	ldr	r2, [r1, #20]
 8001a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a7e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001a80:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a82:	688b      	ldr	r3, [r1, #8]
 8001a84:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001a86:	680b      	ldr	r3, [r1, #0]
 8001a88:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <TIM_Base_SetConfig+0xcc>)
 8001a8c:	4298      	cmp	r0, r3
 8001a8e:	d013      	beq.n	8001ab8 <TIM_Base_SetConfig+0xc0>
 8001a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a94:	4298      	cmp	r0, r3
 8001a96:	d00f      	beq.n	8001ab8 <TIM_Base_SetConfig+0xc0>
 8001a98:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001a9c:	4298      	cmp	r0, r3
 8001a9e:	d00b      	beq.n	8001ab8 <TIM_Base_SetConfig+0xc0>
 8001aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa4:	4298      	cmp	r0, r3
 8001aa6:	d007      	beq.n	8001ab8 <TIM_Base_SetConfig+0xc0>
 8001aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aac:	4298      	cmp	r0, r3
 8001aae:	d003      	beq.n	8001ab8 <TIM_Base_SetConfig+0xc0>
 8001ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab4:	4298      	cmp	r0, r3
 8001ab6:	d101      	bne.n	8001abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ab8:	690b      	ldr	r3, [r1, #16]
 8001aba:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001abc:	2301      	movs	r3, #1
 8001abe:	6143      	str	r3, [r0, #20]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	40014000 	.word	0x40014000

08001acc <HAL_TIM_Base_Init>:
{ 
 8001acc:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001ace:	4604      	mov	r4, r0
 8001ad0:	b1a0      	cbz	r0, 8001afc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ad2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ad6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ada:	b91b      	cbnz	r3, 8001ae4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001adc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ae0:	f7ff feca 	bl	8001878 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001aea:	6820      	ldr	r0, [r4, #0]
 8001aec:	1d21      	adds	r1, r4, #4
 8001aee:	f7ff ff83 	bl	80019f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001af8:	2000      	movs	r0, #0
 8001afa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001afc:	2001      	movs	r0, #1
}
 8001afe:	bd10      	pop	{r4, pc}

08001b00 <HAL_TIMEx_CommutationCallback>:
 8001b00:	4770      	bx	lr

08001b02 <HAL_TIMEx_BreakCallback>:
 8001b02:	4770      	bx	lr

08001b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001b04:	4770      	bx	lr
	...

08001b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
 8001b0a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b0c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b0e:	6921      	ldr	r1, [r4, #16]
 8001b10:	68a2      	ldr	r2, [r4, #8]
 8001b12:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b14:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b16:	430a      	orrs	r2, r1
 8001b18:	6961      	ldr	r1, [r4, #20]
 8001b1a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b1c:	4977      	ldr	r1, [pc, #476]	; (8001cfc <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b1e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b20:	4001      	ands	r1, r0
 8001b22:	430a      	orrs	r2, r1
 8001b24:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b26:	686a      	ldr	r2, [r5, #4]
 8001b28:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b2a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b2c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001b30:	430a      	orrs	r2, r1
 8001b32:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b34:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b36:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b38:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b3c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b42:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <UART_SetConfig+0x1f8>)
 8001b44:	4295      	cmp	r5, r2
 8001b46:	d112      	bne.n	8001b6e <UART_SetConfig+0x66>
 8001b48:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001b4c:	496d      	ldr	r1, [pc, #436]	; (8001d04 <UART_SetConfig+0x1fc>)
 8001b4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b50:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b58:	5c8a      	ldrb	r2, [r1, r2]
 8001b5a:	d066      	beq.n	8001c2a <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001b5c:	2a08      	cmp	r2, #8
 8001b5e:	d819      	bhi.n	8001b94 <UART_SetConfig+0x8c>
 8001b60:	e8df f002 	tbb	[pc, r2]
 8001b64:	189e92c2 	.word	0x189e92c2
 8001b68:	181818a9 	.word	0x181818a9
 8001b6c:	ac          	.byte	0xac
 8001b6d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b6e:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <UART_SetConfig+0x200>)
 8001b70:	4295      	cmp	r5, r2
 8001b72:	d124      	bne.n	8001bbe <UART_SetConfig+0xb6>
 8001b74:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8001b78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b7a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001b7e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b82:	f000 80a0 	beq.w	8001cc6 <UART_SetConfig+0x1be>
 8001b86:	d807      	bhi.n	8001b98 <UART_SetConfig+0x90>
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	f000 80aa 	beq.w	8001ce2 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b92:	d076      	beq.n	8001c82 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001b96:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b98:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001b9c:	f000 8099 	beq.w	8001cd2 <UART_SetConfig+0x1ca>
 8001ba0:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001ba4:	d1f3      	bne.n	8001b8e <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001baa:	d179      	bne.n	8001ca0 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001bac:	6860      	ldr	r0, [r4, #4]
 8001bae:	0843      	lsrs	r3, r0, #1
 8001bb0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001bb4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bb8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bbc:	e054      	b.n	8001c68 <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bbe:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <UART_SetConfig+0x204>)
 8001bc0:	4295      	cmp	r5, r2
 8001bc2:	d10e      	bne.n	8001be2 <UART_SetConfig+0xda>
 8001bc4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8001bc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bca:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8001bce:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001bd2:	d078      	beq.n	8001cc6 <UART_SetConfig+0x1be>
 8001bd4:	d9d8      	bls.n	8001b88 <UART_SetConfig+0x80>
 8001bd6:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 8001bda:	d07a      	beq.n	8001cd2 <UART_SetConfig+0x1ca>
 8001bdc:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8001be0:	e7e0      	b.n	8001ba4 <UART_SetConfig+0x9c>
 8001be2:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <UART_SetConfig+0x208>)
 8001be4:	4295      	cmp	r5, r2
 8001be6:	d10e      	bne.n	8001c06 <UART_SetConfig+0xfe>
 8001be8:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8001bec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bee:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8001bf2:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001bf6:	d066      	beq.n	8001cc6 <UART_SetConfig+0x1be>
 8001bf8:	d9c6      	bls.n	8001b88 <UART_SetConfig+0x80>
 8001bfa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8001bfe:	d068      	beq.n	8001cd2 <UART_SetConfig+0x1ca>
 8001c00:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8001c04:	e7ce      	b.n	8001ba4 <UART_SetConfig+0x9c>
 8001c06:	4a43      	ldr	r2, [pc, #268]	; (8001d14 <UART_SetConfig+0x20c>)
 8001c08:	4295      	cmp	r5, r2
 8001c0a:	d1c0      	bne.n	8001b8e <UART_SetConfig+0x86>
 8001c0c:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001c10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c12:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8001c16:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001c1a:	d054      	beq.n	8001cc6 <UART_SetConfig+0x1be>
 8001c1c:	d9b4      	bls.n	8001b88 <UART_SetConfig+0x80>
 8001c1e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8001c22:	d056      	beq.n	8001cd2 <UART_SetConfig+0x1ca>
 8001c24:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8001c28:	e7bc      	b.n	8001ba4 <UART_SetConfig+0x9c>
    switch (clocksource)
 8001c2a:	2a08      	cmp	r2, #8
 8001c2c:	d829      	bhi.n	8001c82 <UART_SetConfig+0x17a>
 8001c2e:	a301      	add	r3, pc, #4	; (adr r3, 8001c34 <UART_SetConfig+0x12c>)
 8001c30:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001c34:	08001c59 	.word	0x08001c59
 8001c38:	08001c7d 	.word	0x08001c7d
 8001c3c:	08001bad 	.word	0x08001bad
 8001c40:	08001c83 	.word	0x08001c83
 8001c44:	08001ccd 	.word	0x08001ccd
 8001c48:	08001c83 	.word	0x08001c83
 8001c4c:	08001c83 	.word	0x08001c83
 8001c50:	08001c83 	.word	0x08001c83
 8001c54:	08001cd9 	.word	0x08001cd9
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c58:	f7ff fc7c 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c5c:	6861      	ldr	r1, [r4, #4]
 8001c5e:	084a      	lsrs	r2, r1, #1
 8001c60:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c68:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c6a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001c6c:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001c70:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c72:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001c76:	4313      	orrs	r3, r2
 8001c78:	60cb      	str	r3, [r1, #12]
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c7c:	f7ff fc82 	bl	8001584 <HAL_RCC_GetPCLK2Freq>
 8001c80:	e7ec      	b.n	8001c5c <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8001c82:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e7f1      	b.n	8001c6c <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c88:	f7ff fc7c 	bl	8001584 <HAL_RCC_GetPCLK2Freq>
 8001c8c:	6863      	ldr	r3, [r4, #4]
 8001c8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c92:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <UART_SetConfig+0x1f8>)
 8001c98:	b280      	uxth	r0, r0
 8001c9a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c9c:	2000      	movs	r0, #0
        break;
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ca0:	6862      	ldr	r2, [r4, #4]
 8001ca2:	0853      	lsrs	r3, r2, #1
 8001ca4:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001ca8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	60eb      	str	r3, [r5, #12]
 8001cb4:	e7f2      	b.n	8001c9c <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cb6:	f7ff fb77 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001cba:	e017      	b.n	8001cec <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001cbc:	6862      	ldr	r2, [r4, #4]
 8001cbe:	0853      	lsrs	r3, r2, #1
 8001cc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001cc4:	e7f2      	b.n	8001cac <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cca:	d1f4      	bne.n	8001cb6 <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ccc:	f7ff fb6c 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001cd0:	e7c4      	b.n	8001c5c <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cd6:	d1f1      	bne.n	8001cbc <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cd8:	6860      	ldr	r0, [r4, #4]
 8001cda:	0843      	lsrs	r3, r0, #1
 8001cdc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ce0:	e76a      	b.n	8001bb8 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce6:	d0b7      	beq.n	8001c58 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ce8:	f7ff fc34 	bl	8001554 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cec:	6863      	ldr	r3, [r4, #4]
 8001cee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001cf2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cf6:	b280      	uxth	r0, r0
 8001cf8:	60e8      	str	r0, [r5, #12]
 8001cfa:	e7cf      	b.n	8001c9c <UART_SetConfig+0x194>
 8001cfc:	efff69f3 	.word	0xefff69f3
 8001d00:	40013800 	.word	0x40013800
 8001d04:	08003498 	.word	0x08003498
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40004800 	.word	0x40004800
 8001d10:	40004c00 	.word	0x40004c00
 8001d14:	40005000 	.word	0x40005000

08001d18 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d1a:	07da      	lsls	r2, r3, #31
{
 8001d1c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d1e:	d506      	bpl.n	8001d2e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d20:	6801      	ldr	r1, [r0, #0]
 8001d22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001d24:	684a      	ldr	r2, [r1, #4]
 8001d26:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d2a:	4322      	orrs	r2, r4
 8001d2c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d2e:	079c      	lsls	r4, r3, #30
 8001d30:	d506      	bpl.n	8001d40 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d32:	6801      	ldr	r1, [r0, #0]
 8001d34:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d36:	684a      	ldr	r2, [r1, #4]
 8001d38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d3c:	4322      	orrs	r2, r4
 8001d3e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d40:	0759      	lsls	r1, r3, #29
 8001d42:	d506      	bpl.n	8001d52 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d44:	6801      	ldr	r1, [r0, #0]
 8001d46:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d48:	684a      	ldr	r2, [r1, #4]
 8001d4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d4e:	4322      	orrs	r2, r4
 8001d50:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d52:	071a      	lsls	r2, r3, #28
 8001d54:	d506      	bpl.n	8001d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d56:	6801      	ldr	r1, [r0, #0]
 8001d58:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001d5a:	684a      	ldr	r2, [r1, #4]
 8001d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d60:	4322      	orrs	r2, r4
 8001d62:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d64:	06dc      	lsls	r4, r3, #27
 8001d66:	d506      	bpl.n	8001d76 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d68:	6801      	ldr	r1, [r0, #0]
 8001d6a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d6c:	688a      	ldr	r2, [r1, #8]
 8001d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d72:	4322      	orrs	r2, r4
 8001d74:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d76:	0699      	lsls	r1, r3, #26
 8001d78:	d506      	bpl.n	8001d88 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d7a:	6801      	ldr	r1, [r0, #0]
 8001d7c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d7e:	688a      	ldr	r2, [r1, #8]
 8001d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d84:	4322      	orrs	r2, r4
 8001d86:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d88:	065a      	lsls	r2, r3, #25
 8001d8a:	d50f      	bpl.n	8001dac <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d8c:	6801      	ldr	r1, [r0, #0]
 8001d8e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d90:	684a      	ldr	r2, [r1, #4]
 8001d92:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d96:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d9c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d9e:	d105      	bne.n	8001dac <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001da0:	684a      	ldr	r2, [r1, #4]
 8001da2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001da4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001da8:	4322      	orrs	r2, r4
 8001daa:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	d506      	bpl.n	8001dbe <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001db0:	6802      	ldr	r2, [r0, #0]
 8001db2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001db4:	6853      	ldr	r3, [r2, #4]
 8001db6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6053      	str	r3, [r2, #4]
 8001dbe:	bd10      	pop	{r4, pc}

08001dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc4:	9d06      	ldr	r5, [sp, #24]
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	460f      	mov	r7, r1
 8001dca:	4616      	mov	r6, r2
 8001dcc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dce:	6821      	ldr	r1, [r4, #0]
 8001dd0:	69ca      	ldr	r2, [r1, #28]
 8001dd2:	ea37 0302 	bics.w	r3, r7, r2
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2201      	moveq	r2, #1
 8001dda:	2200      	movne	r2, #0
 8001ddc:	42b2      	cmp	r2, r6
 8001dde:	d002      	beq.n	8001de6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001de0:	2000      	movs	r0, #0
}
 8001de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001de6:	1c6b      	adds	r3, r5, #1
 8001de8:	d0f2      	beq.n	8001dd0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dea:	b99d      	cbnz	r5, 8001e14 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001df4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	f022 0201 	bic.w	r2, r2, #1
 8001dfc:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001e04:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001e0e:	2003      	movs	r0, #3
 8001e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e14:	f7fe fa02 	bl	800021c <HAL_GetTick>
 8001e18:	eba0 0008 	sub.w	r0, r0, r8
 8001e1c:	4285      	cmp	r5, r0
 8001e1e:	d2d6      	bcs.n	8001dce <UART_WaitOnFlagUntilTimeout+0xe>
 8001e20:	e7e4      	b.n	8001dec <UART_WaitOnFlagUntilTimeout+0x2c>

08001e22 <UART_CheckIdleState>:
{
 8001e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e24:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e26:	2600      	movs	r6, #0
 8001e28:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001e2a:	f7fe f9f7 	bl	800021c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001e34:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e36:	d417      	bmi.n	8001e68 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	075b      	lsls	r3, r3, #29
 8001e3e:	d50a      	bpl.n	8001e56 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	462b      	mov	r3, r5
 8001e4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f7ff ffb6 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001e54:	b9a0      	cbnz	r0, 8001e80 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001e56:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e58:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001e5a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001e5e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001e62:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001e66:	e00c      	b.n	8001e82 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4632      	mov	r2, r6
 8001e70:	4603      	mov	r3, r0
 8001e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e76:	4620      	mov	r0, r4
 8001e78:	f7ff ffa2 	bl	8001dc0 <UART_WaitOnFlagUntilTimeout>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d0db      	beq.n	8001e38 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e80:	2003      	movs	r0, #3
}
 8001e82:	b002      	add	sp, #8
 8001e84:	bd70      	pop	{r4, r5, r6, pc}

08001e86 <HAL_UART_Init>:
{
 8001e86:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e88:	4604      	mov	r4, r0
 8001e8a:	b360      	cbz	r0, 8001ee6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e8c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e94:	b91b      	cbnz	r3, 8001e9e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e96:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001e9a:	f001 f999 	bl	80031d0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e9e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001ea0:	2324      	movs	r3, #36	; 0x24
 8001ea2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001ea6:	6813      	ldr	r3, [r2, #0]
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f7ff fe2a 	bl	8001b08 <UART_SetConfig>
 8001eb4:	2801      	cmp	r0, #1
 8001eb6:	d016      	beq.n	8001ee6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eba:	b113      	cbz	r3, 8001ec2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f7ff ff2b 	bl	8001d18 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001eda:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001ee2:	f7ff bf9e 	b.w	8001e22 <UART_CheckIdleState>
}
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001eea:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001eec:	f000 fbdc 	bl	80026a8 <vTaskStartScheduler>
  
  return osOK;
}
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	bd08      	pop	{r3, pc}

08001ef4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ef4:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ef6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001efa:	8a02      	ldrh	r2, [r0, #16]
{
 8001efc:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001efe:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001f02:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001f04:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001f06:	bf14      	ite	ne
 8001f08:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f0a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f0c:	a803      	add	r0, sp, #12
 8001f0e:	9001      	str	r0, [sp, #4]
 8001f10:	9400      	str	r4, [sp, #0]
 8001f12:	4628      	mov	r0, r5
 8001f14:	f000 faf8 	bl	8002508 <xTaskCreate>
 8001f18:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001f1a:	bf0c      	ite	eq
 8001f1c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001f1e:	2000      	movne	r0, #0
}
 8001f20:	b005      	add	sp, #20
 8001f22:	bd30      	pop	{r4, r5, pc}

08001f24 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001f24:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001f26:	2800      	cmp	r0, #0
 8001f28:	bf08      	it	eq
 8001f2a:	2001      	moveq	r0, #1
 8001f2c:	f000 fd0a 	bl	8002944 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001f30:	2000      	movs	r0, #0
 8001f32:	bd08      	pop	{r3, pc}

08001f34 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f34:	f100 0308 	add.w	r3, r0, #8
 8001f38:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f3e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f40:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f42:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f44:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f46:	6003      	str	r3, [r0, #0]
 8001f48:	4770      	bx	lr

08001f4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6103      	str	r3, [r0, #16]
 8001f4e:	4770      	bx	lr

08001f50 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f50:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f52:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f5c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f5e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f60:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f62:	3301      	adds	r3, #1
 8001f64:	6003      	str	r3, [r0, #0]
 8001f66:	4770      	bx	lr

08001f68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f68:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f6a:	1c53      	adds	r3, r2, #1
{
 8001f6c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001f6e:	d10a      	bne.n	8001f86 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f70:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f76:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f78:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f7a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f7c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f7e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f80:	3301      	adds	r3, #1
 8001f82:	6003      	str	r3, [r0, #0]
 8001f84:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f86:	f100 0308 	add.w	r3, r0, #8
 8001f8a:	685c      	ldr	r4, [r3, #4]
 8001f8c:	6825      	ldr	r5, [r4, #0]
 8001f8e:	42aa      	cmp	r2, r5
 8001f90:	d3ef      	bcc.n	8001f72 <vListInsert+0xa>
 8001f92:	4623      	mov	r3, r4
 8001f94:	e7f9      	b.n	8001f8a <vListInsert+0x22>

08001f96 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f96:	6841      	ldr	r1, [r0, #4]
 8001f98:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f9a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f9c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f9e:	6882      	ldr	r2, [r0, #8]
 8001fa0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fa6:	bf08      	it	eq
 8001fa8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001faa:	2200      	movs	r2, #0
 8001fac:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	3801      	subs	r0, #1
 8001fb2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <prvTaskExitError+0x2c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	d008      	beq.n	8001fd2 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc4:	f383 8811 	msr	BASEPRI, r3
 8001fc8:	f3bf 8f6f 	isb	sy
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	e7fe      	b.n	8001fd0 <prvTaskExitError+0x18>
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	e7fe      	b.n	8001fe2 <prvTaskExitError+0x2a>
 8001fe4:	20000004 	.word	0x20000004

08001fe8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001fe8:	4806      	ldr	r0, [pc, #24]	; (8002004 <prvPortStartFirstTask+0x1c>)
 8001fea:	6800      	ldr	r0, [r0, #0]
 8001fec:	6800      	ldr	r0, [r0, #0]
 8001fee:	f380 8808 	msr	MSP, r0
 8001ff2:	b662      	cpsie	i
 8001ff4:	b661      	cpsie	f
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	df00      	svc	0
 8002000:	bf00      	nop
 8002002:	0000      	.short	0x0000
 8002004:	e000ed08 	.word	0xe000ed08

08002008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002008:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002018 <vPortEnableVFP+0x10>
 800200c:	6801      	ldr	r1, [r0, #0]
 800200e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002012:	6001      	str	r1, [r0, #0]
 8002014:	4770      	bx	lr
 8002016:	0000      	.short	0x0000
 8002018:	e000ed88 	.word	0xe000ed88

0800201c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <pxPortInitialiseStack+0x28>)
 8002026:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800202a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800202e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002032:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002036:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800203a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800203e:	3844      	subs	r0, #68	; 0x44
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	08001fb9 	.word	0x08001fb9
	...

08002050 <SVC_Handler>:
	__asm volatile (
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <pxCurrentTCBConst2>)
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	6808      	ldr	r0, [r1, #0]
 8002056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205a:	f380 8809 	msr	PSP, r0
 800205e:	f3bf 8f6f 	isb	sy
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f380 8811 	msr	BASEPRI, r0
 800206a:	4770      	bx	lr
 800206c:	f3af 8000 	nop.w

08002070 <pxCurrentTCBConst2>:
 8002070:	200018b0 	.word	0x200018b0

08002074 <vPortEnterCritical>:
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <vPortEnterCritical+0x3c>)
 8002086:	6813      	ldr	r3, [r2, #0]
 8002088:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800208a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800208c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800208e:	d10d      	bne.n	80020ac <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <vPortEnterCritical+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002098:	d008      	beq.n	80020ac <vPortEnterCritical+0x38>
 800209a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209e:	f383 8811 	msr	BASEPRI, r3
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	f3bf 8f4f 	dsb	sy
 80020aa:	e7fe      	b.n	80020aa <vPortEnterCritical+0x36>
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000004 	.word	0x20000004
 80020b4:	e000ed04 	.word	0xe000ed04

080020b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80020b8:	4a08      	ldr	r2, [pc, #32]	; (80020dc <vPortExitCritical+0x24>)
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	b943      	cbnz	r3, 80020d0 <vPortExitCritical+0x18>
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	e7fe      	b.n	80020ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80020d0:	3b01      	subs	r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80020d4:	b90b      	cbnz	r3, 80020da <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	4770      	bx	lr
 80020dc:	20000004 	.word	0x20000004

080020e0 <PendSV_Handler>:
	__asm volatile
 80020e0:	f3ef 8009 	mrs	r0, PSP
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <pxCurrentTCBConst>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f01e 0f10 	tst.w	lr, #16
 80020f0:	bf08      	it	eq
 80020f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020fa:	6010      	str	r0, [r2, #0]
 80020fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002104:	f380 8811 	msr	BASEPRI, r0
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f000 fc76 	bl	8002a00 <vTaskSwitchContext>
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	f380 8811 	msr	BASEPRI, r0
 800211c:	bc08      	pop	{r3}
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	6808      	ldr	r0, [r1, #0]
 8002122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002126:	f01e 0f10 	tst.w	lr, #16
 800212a:	bf08      	it	eq
 800212c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002130:	f380 8809 	msr	PSP, r0
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	f3af 8000 	nop.w

08002140 <pxCurrentTCBConst>:
 8002140:	200018b0 	.word	0x200018b0

08002144 <SysTick_Handler>:
{
 8002144:	b508      	push	{r3, lr}
	__asm volatile
 8002146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214a:	f383 8811 	msr	BASEPRI, r3
 800214e:	f3bf 8f6f 	isb	sy
 8002152:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002156:	f000 faeb 	bl	8002730 <xTaskIncrementTick>
 800215a:	b118      	cbz	r0, 8002164 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <SysTick_Handler+0x28>)
 800215e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002162:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002164:	2300      	movs	r3, #0
 8002166:	f383 8811 	msr	BASEPRI, r3
 800216a:	bd08      	pop	{r3, pc}
 800216c:	e000ed04 	.word	0xe000ed04

08002170 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <vPortSetupTimerInterrupt+0x1c>)
 8002172:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fbb3 f3f2 	udiv	r3, r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <vPortSetupTimerInterrupt+0x20>)
 800217e:	3b01      	subs	r3, #1
 8002180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <vPortSetupTimerInterrupt+0x24>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000010 	.word	0x20000010
 8002190:	e000e014 	.word	0xe000e014
 8002194:	e000e010 	.word	0xe000e010

08002198 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <xPortStartScheduler+0xc8>)
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <xPortStartScheduler+0xcc>)
{
 800219c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	4291      	cmp	r1, r2
 80021a2:	d108      	bne.n	80021b6 <xPortStartScheduler+0x1e>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	e7fe      	b.n	80021b4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <xPortStartScheduler+0xd0>)
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d108      	bne.n	80021d0 <xPortStartScheduler+0x38>
 80021be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	e7fe      	b.n	80021ce <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <xPortStartScheduler+0xd4>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021d8:	22ff      	movs	r2, #255	; 0xff
 80021da:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021dc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80021ea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021ee:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021f0:	4b20      	ldr	r3, [pc, #128]	; (8002274 <xPortStartScheduler+0xdc>)
 80021f2:	2207      	movs	r2, #7
 80021f4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021f6:	2100      	movs	r1, #0
 80021f8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80021fc:	0600      	lsls	r0, r0, #24
 80021fe:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8002202:	d423      	bmi.n	800224c <xPortStartScheduler+0xb4>
 8002204:	b101      	cbz	r1, 8002208 <xPortStartScheduler+0x70>
 8002206:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800220c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002210:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <xPortStartScheduler+0xd4>)
 8002216:	b2db      	uxtb	r3, r3
 8002218:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <xPortStartScheduler+0xe0>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002222:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800222a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800222c:	f7ff ffa0 	bl	8002170 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <xPortStartScheduler+0xe4>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002236:	f7ff fee7 	bl	8002008 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <xPortStartScheduler+0xe8>)
 800223c:	6813      	ldr	r3, [r2, #0]
 800223e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002242:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002244:	f7ff fed0 	bl	8001fe8 <prvPortStartFirstTask>
	prvTaskExitError();
 8002248:	f7ff feb6 	bl	8001fb8 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800224c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002250:	0052      	lsls	r2, r2, #1
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f88d 2003 	strb.w	r2, [sp, #3]
 8002258:	2101      	movs	r1, #1
 800225a:	4622      	mov	r2, r4
 800225c:	e7cc      	b.n	80021f8 <xPortStartScheduler+0x60>
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	410fc271 	.word	0x410fc271
 8002268:	410fc270 	.word	0x410fc270
 800226c:	e000e400 	.word	0xe000e400
 8002270:	20000030 	.word	0x20000030
 8002274:	20000034 	.word	0x20000034
 8002278:	e000ed20 	.word	0xe000ed20
 800227c:	20000004 	.word	0x20000004
 8002280:	e000ef34 	.word	0xe000ef34

08002284 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002284:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <prvInsertBlockIntoFreeList+0x40>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4282      	cmp	r2, r0
 800228c:	d318      	bcc.n	80022c0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800228e:	685c      	ldr	r4, [r3, #4]
 8002290:	1919      	adds	r1, r3, r4
 8002292:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002294:	bf01      	itttt	eq
 8002296:	6841      	ldreq	r1, [r0, #4]
 8002298:	4618      	moveq	r0, r3
 800229a:	1909      	addeq	r1, r1, r4
 800229c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800229e:	6844      	ldr	r4, [r0, #4]
 80022a0:	1901      	adds	r1, r0, r4
 80022a2:	428a      	cmp	r2, r1
 80022a4:	d107      	bne.n	80022b6 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80022a6:	4908      	ldr	r1, [pc, #32]	; (80022c8 <prvInsertBlockIntoFreeList+0x44>)
 80022a8:	6809      	ldr	r1, [r1, #0]
 80022aa:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022ac:	bf1f      	itttt	ne
 80022ae:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80022b0:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022b2:	1909      	addne	r1, r1, r4
 80022b4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80022b6:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80022b8:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80022ba:	bf18      	it	ne
 80022bc:	6018      	strne	r0, [r3, #0]
 80022be:	bd10      	pop	{r4, pc}
 80022c0:	4613      	mov	r3, r2
 80022c2:	e7e1      	b.n	8002288 <prvInsertBlockIntoFreeList+0x4>
 80022c4:	200018a8 	.word	0x200018a8
 80022c8:	20000038 	.word	0x20000038

080022cc <pvPortMalloc>:
{
 80022cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80022d2:	f000 fa25 	bl	8002720 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80022d6:	493e      	ldr	r1, [pc, #248]	; (80023d0 <pvPortMalloc+0x104>)
 80022d8:	4d3e      	ldr	r5, [pc, #248]	; (80023d4 <pvPortMalloc+0x108>)
 80022da:	680b      	ldr	r3, [r1, #0]
 80022dc:	bb0b      	cbnz	r3, 8002322 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80022de:	4a3e      	ldr	r2, [pc, #248]	; (80023d8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022e0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022e2:	bf1f      	itttt	ne
 80022e4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022e6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022ea:	f502 53c3 	addne.w	r3, r2, #6240	; 0x1860
 80022ee:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022f0:	bf14      	ite	ne
 80022f2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022f4:	f44f 53c3 	moveq.w	r3, #6240	; 0x1860
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022f8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80022fa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022fc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002300:	4e36      	ldr	r6, [pc, #216]	; (80023dc <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002302:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002304:	2000      	movs	r0, #0
 8002306:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002308:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800230a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800230c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800230e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002310:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002312:	4b33      	ldr	r3, [pc, #204]	; (80023e0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002314:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002316:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <pvPortMalloc+0x118>)
 800231a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800231c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002320:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002322:	682f      	ldr	r7, [r5, #0]
 8002324:	4227      	tst	r7, r4
 8002326:	d116      	bne.n	8002356 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002328:	2c00      	cmp	r4, #0
 800232a:	d041      	beq.n	80023b0 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 800232c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002330:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002332:	bf1c      	itt	ne
 8002334:	f023 0307 	bicne.w	r3, r3, #7
 8002338:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800233a:	b163      	cbz	r3, 8002356 <pvPortMalloc+0x8a>
 800233c:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <pvPortMalloc+0x118>)
 800233e:	6816      	ldr	r6, [r2, #0]
 8002340:	42b3      	cmp	r3, r6
 8002342:	4690      	mov	r8, r2
 8002344:	d807      	bhi.n	8002356 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <pvPortMalloc+0x110>)
 8002348:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800234a:	6868      	ldr	r0, [r5, #4]
 800234c:	4283      	cmp	r3, r0
 800234e:	d804      	bhi.n	800235a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002350:	6809      	ldr	r1, [r1, #0]
 8002352:	428d      	cmp	r5, r1
 8002354:	d107      	bne.n	8002366 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002356:	2400      	movs	r4, #0
 8002358:	e02a      	b.n	80023b0 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800235a:	682c      	ldr	r4, [r5, #0]
 800235c:	2c00      	cmp	r4, #0
 800235e:	d0f7      	beq.n	8002350 <pvPortMalloc+0x84>
 8002360:	462a      	mov	r2, r5
 8002362:	4625      	mov	r5, r4
 8002364:	e7f1      	b.n	800234a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002366:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002368:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800236a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800236c:	1ac2      	subs	r2, r0, r3
 800236e:	2a10      	cmp	r2, #16
 8002370:	d90f      	bls.n	8002392 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002372:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002374:	0741      	lsls	r1, r0, #29
 8002376:	d008      	beq.n	800238a <pvPortMalloc+0xbe>
 8002378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	e7fe      	b.n	8002388 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800238a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800238c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800238e:	f7ff ff79 	bl	8002284 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002392:	4913      	ldr	r1, [pc, #76]	; (80023e0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002394:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002396:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002398:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800239a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800239c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800239e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023a2:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023a6:	bf38      	it	cc
 80023a8:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023aa:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023ac:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80023ae:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80023b0:	f000 fa50 	bl	8002854 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023b4:	0763      	lsls	r3, r4, #29
 80023b6:	d008      	beq.n	80023ca <pvPortMalloc+0xfe>
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	e7fe      	b.n	80023c8 <pvPortMalloc+0xfc>
}
 80023ca:	4620      	mov	r0, r4
 80023cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d0:	20000038 	.word	0x20000038
 80023d4:	2000189c 	.word	0x2000189c
 80023d8:	2000003c 	.word	0x2000003c
 80023dc:	200018a8 	.word	0x200018a8
 80023e0:	200018a4 	.word	0x200018a4
 80023e4:	200018a0 	.word	0x200018a0

080023e8 <vPortFree>:
{
 80023e8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80023ea:	4604      	mov	r4, r0
 80023ec:	b370      	cbz	r0, 800244c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <vPortFree+0x68>)
 80023f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	4213      	tst	r3, r2
 80023f8:	d108      	bne.n	800240c <vPortFree+0x24>
 80023fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023fe:	f383 8811 	msr	BASEPRI, r3
 8002402:	f3bf 8f6f 	isb	sy
 8002406:	f3bf 8f4f 	dsb	sy
 800240a:	e7fe      	b.n	800240a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800240c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002410:	b141      	cbz	r1, 8002424 <vPortFree+0x3c>
 8002412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	e7fe      	b.n	8002422 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002424:	ea23 0302 	bic.w	r3, r3, r2
 8002428:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800242c:	f000 f978 	bl	8002720 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002430:	4a08      	ldr	r2, [pc, #32]	; (8002454 <vPortFree+0x6c>)
 8002432:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002436:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002438:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800243c:	440b      	add	r3, r1
 800243e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002440:	f7ff ff20 	bl	8002284 <prvInsertBlockIntoFreeList>
}
 8002444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002448:	f000 ba04 	b.w	8002854 <xTaskResumeAll>
 800244c:	bd10      	pop	{r4, pc}
 800244e:	bf00      	nop
 8002450:	2000189c 	.word	0x2000189c
 8002454:	200018a0 	.word	0x200018a0

08002458 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <prvResetNextTaskUnblockTime+0x1c>)
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <prvResetNextTaskUnblockTime+0x20>)
 8002460:	b919      	cbnz	r1, 800246a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800246e:	68d2      	ldr	r2, [r2, #12]
 8002470:	6852      	ldr	r2, [r2, #4]
 8002472:	e7f8      	b.n	8002466 <prvResetNextTaskUnblockTime+0xe>
 8002474:	200018b4 	.word	0x200018b4
 8002478:	2000198c 	.word	0x2000198c

0800247c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002480:	4e1b      	ldr	r6, [pc, #108]	; (80024f0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002482:	681d      	ldr	r5, [r3, #0]
{
 8002484:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002486:	6830      	ldr	r0, [r6, #0]
 8002488:	3004      	adds	r0, #4
{
 800248a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800248c:	f7ff fd83 	bl	8001f96 <uxListRemove>
 8002490:	4633      	mov	r3, r6
 8002492:	b940      	cbnz	r0, 80024a6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002494:	6831      	ldr	r1, [r6, #0]
 8002496:	4e17      	ldr	r6, [pc, #92]	; (80024f4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002498:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800249a:	6832      	ldr	r2, [r6, #0]
 800249c:	2001      	movs	r0, #1
 800249e:	4088      	lsls	r0, r1
 80024a0:	ea22 0200 	bic.w	r2, r2, r0
 80024a4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024a6:	1c62      	adds	r2, r4, #1
 80024a8:	d107      	bne.n	80024ba <prvAddCurrentTaskToDelayedList+0x3e>
 80024aa:	b137      	cbz	r7, 80024ba <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	4812      	ldr	r0, [pc, #72]	; (80024f8 <prvAddCurrentTaskToDelayedList+0x7c>)
 80024b0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80024b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024b6:	f7ff bd4b 	b.w	8001f50 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80024ba:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024bc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80024be:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80024c0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80024c2:	d907      	bls.n	80024d4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <prvAddCurrentTaskToDelayedList+0x80>)
 80024c6:	6810      	ldr	r0, [r2, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
}
 80024ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024ce:	3104      	adds	r1, #4
 80024d0:	f7ff bd4a 	b.w	8001f68 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <prvAddCurrentTaskToDelayedList+0x84>)
 80024d6:	6810      	ldr	r0, [r2, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	3104      	adds	r1, #4
 80024dc:	f7ff fd44 	bl	8001f68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <prvAddCurrentTaskToDelayedList+0x88>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80024e6:	bf38      	it	cc
 80024e8:	601c      	strcc	r4, [r3, #0]
 80024ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ec:	200019d4 	.word	0x200019d4
 80024f0:	200018b0 	.word	0x200018b0
 80024f4:	2000195c 	.word	0x2000195c
 80024f8:	200019ac 	.word	0x200019ac
 80024fc:	200018b8 	.word	0x200018b8
 8002500:	200018b4 	.word	0x200018b4
 8002504:	2000198c 	.word	0x2000198c

08002508 <xTaskCreate>:
	{
 8002508:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800250c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002510:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002512:	4650      	mov	r0, sl
	{
 8002514:	460f      	mov	r7, r1
 8002516:	4699      	mov	r9, r3
 8002518:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800251a:	f7ff fed7 	bl	80022cc <pvPortMalloc>
			if( pxStack != NULL )
 800251e:	4605      	mov	r5, r0
 8002520:	2800      	cmp	r0, #0
 8002522:	f000 8096 	beq.w	8002652 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002526:	2054      	movs	r0, #84	; 0x54
 8002528:	f7ff fed0 	bl	80022cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800252c:	4604      	mov	r4, r0
 800252e:	2800      	cmp	r0, #0
 8002530:	f000 808c 	beq.w	800264c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002534:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002538:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800253a:	4455      	add	r5, sl
 800253c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800253e:	f025 0a07 	bic.w	sl, r5, #7
 8002542:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002546:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002548:	7859      	ldrb	r1, [r3, #1]
 800254a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800254e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002552:	b109      	cbz	r1, 8002558 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002554:	42bb      	cmp	r3, r7
 8002556:	d1f7      	bne.n	8002548 <xTaskCreate+0x40>
 8002558:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800255a:	2d06      	cmp	r5, #6
 800255c:	bf28      	it	cs
 800255e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002560:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002564:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002566:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002568:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800256a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800256c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002570:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002574:	f7ff fce9 	bl	8001f4a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002578:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800257c:	f104 0018 	add.w	r0, r4, #24
 8002580:	f7ff fce3 	bl	8001f4a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002584:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002588:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800258a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800258c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800258e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002592:	464a      	mov	r2, r9
 8002594:	4641      	mov	r1, r8
 8002596:	4650      	mov	r0, sl
 8002598:	f7ff fd40 	bl	800201c <pxPortInitialiseStack>
 800259c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800259e:	b106      	cbz	r6, 80025a2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025a0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80025a2:	f7ff fd67 	bl	8002074 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80025a6:	4b32      	ldr	r3, [pc, #200]	; (8002670 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80025a8:	4e32      	ldr	r6, [pc, #200]	; (8002674 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80026a0 <xTaskCreate+0x198>
 80025b0:	3201      	adds	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80025b4:	6835      	ldr	r5, [r6, #0]
 80025b6:	2d00      	cmp	r5, #0
 80025b8:	d14e      	bne.n	8002658 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80025ba:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d11d      	bne.n	80025fe <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80025c2:	eb08 0005 	add.w	r0, r8, r5
 80025c6:	3514      	adds	r5, #20
 80025c8:	f7ff fcb4 	bl	8001f34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80025cc:	2d8c      	cmp	r5, #140	; 0x8c
 80025ce:	d1f8      	bne.n	80025c2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80025d0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80026a4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80025d4:	4d28      	ldr	r5, [pc, #160]	; (8002678 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80025d6:	4648      	mov	r0, r9
 80025d8:	f7ff fcac 	bl	8001f34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025dc:	4628      	mov	r0, r5
 80025de:	f7ff fca9 	bl	8001f34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025e2:	4826      	ldr	r0, [pc, #152]	; (800267c <xTaskCreate+0x174>)
 80025e4:	f7ff fca6 	bl	8001f34 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80025e8:	4825      	ldr	r0, [pc, #148]	; (8002680 <xTaskCreate+0x178>)
 80025ea:	f7ff fca3 	bl	8001f34 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80025ee:	4825      	ldr	r0, [pc, #148]	; (8002684 <xTaskCreate+0x17c>)
 80025f0:	f7ff fca0 	bl	8001f34 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <xTaskCreate+0x180>)
 80025f6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <xTaskCreate+0x184>)
 80025fc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80025fe:	4a24      	ldr	r2, [pc, #144]	; (8002690 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002600:	4924      	ldr	r1, [pc, #144]	; (8002694 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002602:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002604:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002606:	3301      	adds	r3, #1
 8002608:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800260a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800260c:	2501      	movs	r5, #1
 800260e:	fa05 f302 	lsl.w	r3, r5, r2
 8002612:	4303      	orrs	r3, r0
 8002614:	2014      	movs	r0, #20
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	fb00 8002 	mla	r0, r0, r2, r8
 800261c:	4639      	mov	r1, r7
 800261e:	f7ff fc97 	bl	8001f50 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002622:	f7ff fd49 	bl	80020b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <xTaskCreate+0x190>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	b163      	cbz	r3, 8002646 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800262c:	6833      	ldr	r3, [r6, #0]
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002632:	429a      	cmp	r2, r3
 8002634:	d207      	bcs.n	8002646 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <xTaskCreate+0x194>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
	}
 8002646:	4628      	mov	r0, r5
 8002648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800264c:	4628      	mov	r0, r5
 800264e:	f7ff fecb 	bl	80023e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002652:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002656:	e7f6      	b.n	8002646 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <xTaskCreate+0x190>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1ce      	bne.n	80025fe <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002660:	6833      	ldr	r3, [r6, #0]
 8002662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002664:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002666:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002668:	bf98      	it	ls
 800266a:	6034      	strls	r4, [r6, #0]
 800266c:	e7c7      	b.n	80025fe <xTaskCreate+0xf6>
 800266e:	bf00      	nop
 8002670:	20001948 	.word	0x20001948
 8002674:	200018b0 	.word	0x200018b0
 8002678:	20001974 	.word	0x20001974
 800267c:	20001994 	.word	0x20001994
 8002680:	200019c0 	.word	0x200019c0
 8002684:	200019ac 	.word	0x200019ac
 8002688:	200018b4 	.word	0x200018b4
 800268c:	200018b8 	.word	0x200018b8
 8002690:	20001958 	.word	0x20001958
 8002694:	2000195c 	.word	0x2000195c
 8002698:	200019a8 	.word	0x200019a8
 800269c:	e000ed04 	.word	0xe000ed04
 80026a0:	200018bc 	.word	0x200018bc
 80026a4:	20001960 	.word	0x20001960

080026a8 <vTaskStartScheduler>:
{
 80026a8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <vTaskStartScheduler+0x60>)
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2400      	movs	r4, #0
 80026b0:	9400      	str	r4, [sp, #0]
 80026b2:	4623      	mov	r3, r4
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	4915      	ldr	r1, [pc, #84]	; (800270c <vTaskStartScheduler+0x64>)
 80026b8:	4815      	ldr	r0, [pc, #84]	; (8002710 <vTaskStartScheduler+0x68>)
 80026ba:	f7ff ff25 	bl	8002508 <xTaskCreate>
	if( xReturn == pdPASS )
 80026be:	2801      	cmp	r0, #1
 80026c0:	d114      	bne.n	80026ec <vTaskStartScheduler+0x44>
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <vTaskStartScheduler+0x6c>)
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <vTaskStartScheduler+0x70>)
 80026dc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <vTaskStartScheduler+0x74>)
 80026e0:	601c      	str	r4, [r3, #0]
}
 80026e2:	b002      	add	sp, #8
 80026e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80026e8:	f7ff bd56 	b.w	8002198 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026ec:	3001      	adds	r0, #1
 80026ee:	d108      	bne.n	8002702 <vTaskStartScheduler+0x5a>
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	e7fe      	b.n	8002700 <vTaskStartScheduler+0x58>
}
 8002702:	b002      	add	sp, #8
 8002704:	bd10      	pop	{r4, pc}
 8002706:	bf00      	nop
 8002708:	20001988 	.word	0x20001988
 800270c:	0800349c 	.word	0x0800349c
 8002710:	0800298d 	.word	0x0800298d
 8002714:	2000198c 	.word	0x2000198c
 8002718:	200019a8 	.word	0x200019a8
 800271c:	200019d4 	.word	0x200019d4

08002720 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002720:	4a02      	ldr	r2, [pc, #8]	; (800272c <vTaskSuspendAll+0xc>)
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20001954 	.word	0x20001954

08002730 <xTaskIncrementTick>:
{
 8002730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002734:	4b3c      	ldr	r3, [pc, #240]	; (8002828 <xTaskIncrementTick+0xf8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d153      	bne.n	80027e4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800273c:	4b3b      	ldr	r3, [pc, #236]	; (800282c <xTaskIncrementTick+0xfc>)
 800273e:	681c      	ldr	r4, [r3, #0]
 8002740:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002742:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8002744:	b9bc      	cbnz	r4, 8002776 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <xTaskIncrementTick+0x100>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	b142      	cbz	r2, 8002760 <xTaskIncrementTick+0x30>
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	e7fe      	b.n	800275e <xTaskIncrementTick+0x2e>
 8002760:	4a34      	ldr	r2, [pc, #208]	; (8002834 <xTaskIncrementTick+0x104>)
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	6810      	ldr	r0, [r2, #0]
 8002766:	6018      	str	r0, [r3, #0]
 8002768:	6011      	str	r1, [r2, #0]
 800276a:	4a33      	ldr	r2, [pc, #204]	; (8002838 <xTaskIncrementTick+0x108>)
 800276c:	6813      	ldr	r3, [r2, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	f7ff fe71 	bl	8002458 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002776:	4d31      	ldr	r5, [pc, #196]	; (800283c <xTaskIncrementTick+0x10c>)
 8002778:	4f31      	ldr	r7, [pc, #196]	; (8002840 <xTaskIncrementTick+0x110>)
 800277a:	682b      	ldr	r3, [r5, #0]
 800277c:	429c      	cmp	r4, r3
 800277e:	f04f 0b00 	mov.w	fp, #0
 8002782:	d33e      	bcc.n	8002802 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002784:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002830 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002788:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002850 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800278c:	f8d8 2000 	ldr.w	r2, [r8]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	bb72      	cbnz	r2, 80027f2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002798:	602a      	str	r2, [r5, #0]
					break;
 800279a:	e032      	b.n	8002802 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800279c:	f106 0a04 	add.w	sl, r6, #4
 80027a0:	4650      	mov	r0, sl
 80027a2:	f7ff fbf8 	bl	8001f96 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80027a8:	b119      	cbz	r1, 80027b2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027aa:	f106 0018 	add.w	r0, r6, #24
 80027ae:	f7ff fbf2 	bl	8001f96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027b2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80027b4:	f8d9 3000 	ldr.w	r3, [r9]
 80027b8:	2201      	movs	r2, #1
 80027ba:	fa02 f100 	lsl.w	r1, r2, r0
 80027be:	4319      	orrs	r1, r3
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <xTaskIncrementTick+0x114>)
 80027c2:	f8c9 1000 	str.w	r1, [r9]
 80027c6:	f04f 0e14 	mov.w	lr, #20
 80027ca:	4651      	mov	r1, sl
 80027cc:	fb0e 3000 	mla	r0, lr, r0, r3
 80027d0:	f7ff fbbe 	bl	8001f50 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027d4:	6838      	ldr	r0, [r7, #0]
 80027d6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80027d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80027da:	4291      	cmp	r1, r2
 80027dc:	bf28      	it	cs
 80027de:	f04f 0b01 	movcs.w	fp, #1
 80027e2:	e7d3      	b.n	800278c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <xTaskIncrementTick+0x118>)
 80027e6:	6813      	ldr	r3, [r2, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80027ec:	f04f 0b00 	mov.w	fp, #0
 80027f0:	e011      	b.n	8002816 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027f2:	f8d8 2000 	ldr.w	r2, [r8]
 80027f6:	68d2      	ldr	r2, [r2, #12]
 80027f8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027fa:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80027fc:	428c      	cmp	r4, r1
 80027fe:	d2cd      	bcs.n	800279c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002800:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <xTaskIncrementTick+0x114>)
 8002806:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002808:	2214      	movs	r2, #20
 800280a:	434a      	muls	r2, r1
 800280c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800280e:	2a02      	cmp	r2, #2
 8002810:	bf28      	it	cs
 8002812:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002816:	4a0d      	ldr	r2, [pc, #52]	; (800284c <xTaskIncrementTick+0x11c>)
 8002818:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800281a:	2a00      	cmp	r2, #0
 800281c:	bf18      	it	ne
 800281e:	f04f 0b01 	movne.w	fp, #1
}
 8002822:	4658      	mov	r0, fp
 8002824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002828:	20001954 	.word	0x20001954
 800282c:	200019d4 	.word	0x200019d4
 8002830:	200018b4 	.word	0x200018b4
 8002834:	200018b8 	.word	0x200018b8
 8002838:	20001990 	.word	0x20001990
 800283c:	2000198c 	.word	0x2000198c
 8002840:	200018b0 	.word	0x200018b0
 8002844:	200018bc 	.word	0x200018bc
 8002848:	20001950 	.word	0x20001950
 800284c:	200019d8 	.word	0x200019d8
 8002850:	2000195c 	.word	0x2000195c

08002854 <xTaskResumeAll>:
{
 8002854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002858:	4c31      	ldr	r4, [pc, #196]	; (8002920 <xTaskResumeAll+0xcc>)
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	b943      	cbnz	r3, 8002870 <xTaskResumeAll+0x1c>
 800285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	e7fe      	b.n	800286e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002870:	f7ff fc00 	bl	8002074 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	3b01      	subs	r3, #1
 8002878:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800287a:	6824      	ldr	r4, [r4, #0]
 800287c:	b12c      	cbz	r4, 800288a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800287e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002880:	f7ff fc1a 	bl	80020b8 <vPortExitCritical>
}
 8002884:	4620      	mov	r0, r4
 8002886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <xTaskResumeAll+0xd0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f5      	beq.n	800287e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002892:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800293c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002896:	4f24      	ldr	r7, [pc, #144]	; (8002928 <xTaskResumeAll+0xd4>)
 8002898:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002940 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800289c:	f8d9 3000 	ldr.w	r3, [r9]
 80028a0:	b9e3      	cbnz	r3, 80028dc <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80028a2:	b10c      	cbz	r4, 80028a8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80028a4:	f7ff fdd8 	bl	8002458 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80028a8:	4d20      	ldr	r5, [pc, #128]	; (800292c <xTaskResumeAll+0xd8>)
 80028aa:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80028ac:	b144      	cbz	r4, 80028c0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80028ae:	4e20      	ldr	r6, [pc, #128]	; (8002930 <xTaskResumeAll+0xdc>)
 80028b0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80028b2:	f7ff ff3d 	bl	8002730 <xTaskIncrementTick>
 80028b6:	b100      	cbz	r0, 80028ba <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80028b8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80028ba:	3c01      	subs	r4, #1
 80028bc:	d1f9      	bne.n	80028b2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80028be:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <xTaskResumeAll+0xdc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0da      	beq.n	800287e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80028c8:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <xTaskResumeAll+0xe0>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80028d8:	2401      	movs	r4, #1
 80028da:	e7d1      	b.n	8002880 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80028e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028e2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028e4:	f104 0018 	add.w	r0, r4, #24
 80028e8:	f7ff fb55 	bl	8001f96 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028ec:	4630      	mov	r0, r6
 80028ee:	f7ff fb52 	bl	8001f96 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028f4:	6839      	ldr	r1, [r7, #0]
 80028f6:	2501      	movs	r5, #1
 80028f8:	fa05 f302 	lsl.w	r3, r5, r2
 80028fc:	2014      	movs	r0, #20
 80028fe:	430b      	orrs	r3, r1
 8002900:	fb00 8002 	mla	r0, r0, r2, r8
 8002904:	4631      	mov	r1, r6
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	f7ff fb22 	bl	8001f50 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <xTaskResumeAll+0xe4>)
 800290e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002916:	bf24      	itt	cs
 8002918:	4b05      	ldrcs	r3, [pc, #20]	; (8002930 <xTaskResumeAll+0xdc>)
 800291a:	601d      	strcs	r5, [r3, #0]
 800291c:	e7be      	b.n	800289c <xTaskResumeAll+0x48>
 800291e:	bf00      	nop
 8002920:	20001954 	.word	0x20001954
 8002924:	20001948 	.word	0x20001948
 8002928:	2000195c 	.word	0x2000195c
 800292c:	20001950 	.word	0x20001950
 8002930:	200019d8 	.word	0x200019d8
 8002934:	e000ed04 	.word	0xe000ed04
 8002938:	200018b0 	.word	0x200018b0
 800293c:	20001994 	.word	0x20001994
 8002940:	200018bc 	.word	0x200018bc

08002944 <vTaskDelay>:
	{
 8002944:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002946:	b940      	cbnz	r0, 800295a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <vTaskDelay+0x40>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <vTaskDelay+0x44>)
 800295c:	6819      	ldr	r1, [r3, #0]
 800295e:	b141      	cbz	r1, 8002972 <vTaskDelay+0x2e>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	e7fe      	b.n	8002970 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002972:	f7ff fed5 	bl	8002720 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002976:	f7ff fd81 	bl	800247c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800297a:	f7ff ff6b 	bl	8002854 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800297e:	2800      	cmp	r0, #0
 8002980:	d0e2      	beq.n	8002948 <vTaskDelay+0x4>
 8002982:	bd08      	pop	{r3, pc}
 8002984:	e000ed04 	.word	0xe000ed04
 8002988:	20001954 	.word	0x20001954

0800298c <prvIdleTask>:
{
 800298c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800298e:	4e17      	ldr	r6, [pc, #92]	; (80029ec <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002990:	4c17      	ldr	r4, [pc, #92]	; (80029f0 <prvIdleTask+0x64>)
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	b963      	cbnz	r3, 80029b0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002996:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <prvIdleTask+0x68>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d9f8      	bls.n	8002990 <prvIdleTask+0x4>
				taskYIELD();
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <prvIdleTask+0x6c>)
 80029a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	e7ef      	b.n	8002990 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80029b0:	f7ff feb6 	bl	8002720 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80029b4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80029b6:	f7ff ff4d 	bl	8002854 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	d0e9      	beq.n	8002992 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80029be:	f7ff fb59 	bl	8002074 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80029c2:	68f3      	ldr	r3, [r6, #12]
 80029c4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029c6:	1d28      	adds	r0, r5, #4
 80029c8:	f7ff fae5 	bl	8001f96 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <prvIdleTask+0x70>)
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80029da:	f7ff fb6d 	bl	80020b8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80029de:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029e0:	f7ff fd02 	bl	80023e8 <vPortFree>
			vPortFree( pxTCB );
 80029e4:	4628      	mov	r0, r5
 80029e6:	f7ff fcff 	bl	80023e8 <vPortFree>
 80029ea:	e7d2      	b.n	8002992 <prvIdleTask+0x6>
 80029ec:	200019c0 	.word	0x200019c0
 80029f0:	2000194c 	.word	0x2000194c
 80029f4:	200018bc 	.word	0x200018bc
 80029f8:	e000ed04 	.word	0xe000ed04
 80029fc:	20001948 	.word	0x20001948

08002a00 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <vTaskSwitchContext+0x60>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <vTaskSwitchContext+0x64>)
{
 8002a06:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a08:	b112      	cbz	r2, 8002a10 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002a0a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002a10:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <vTaskSwitchContext+0x68>)
 8002a14:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f1c3 031f 	rsb	r3, r3, #31
 8002a20:	2214      	movs	r2, #20
 8002a22:	4912      	ldr	r1, [pc, #72]	; (8002a6c <vTaskSwitchContext+0x6c>)
 8002a24:	435a      	muls	r2, r3
 8002a26:	1888      	adds	r0, r1, r2
 8002a28:	588c      	ldr	r4, [r1, r2]
 8002a2a:	b944      	cbnz	r4, 8002a3e <vTaskSwitchContext+0x3e>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	e7fe      	b.n	8002a3c <vTaskSwitchContext+0x3c>
 8002a3e:	6844      	ldr	r4, [r0, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	6864      	ldr	r4, [r4, #4]
 8002a44:	6044      	str	r4, [r0, #4]
 8002a46:	440a      	add	r2, r1
 8002a48:	4294      	cmp	r4, r2
 8002a4a:	bf04      	itt	eq
 8002a4c:	6862      	ldreq	r2, [r4, #4]
 8002a4e:	6042      	streq	r2, [r0, #4]
 8002a50:	2214      	movs	r2, #20
 8002a52:	fb02 1303 	mla	r3, r2, r3, r1
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <vTaskSwitchContext+0x70>)
 8002a5c:	e7d6      	b.n	8002a0c <vTaskSwitchContext+0xc>
 8002a5e:	bf00      	nop
 8002a60:	20001954 	.word	0x20001954
 8002a64:	200019d8 	.word	0x200019d8
 8002a68:	2000195c 	.word	0x2000195c
 8002a6c:	200018bc 	.word	0x200018bc
 8002a70:	200018b0 	.word	0x200018b0

08002a74 <backupLoop1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_backupLoop1 */
void backupLoop1(void const * argument)
{
 8002a74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN backupLoop1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff fa54 	bl	8001f24 <osDelay>
 8002a7c:	e7fb      	b.n	8002a76 <backupLoop1+0x2>
	...

08002a80 <motor0Loop>:
{
 8002a80:	b580      	push	{r7, lr}
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8002a82:	2201      	movs	r2, #1
 8002a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a88:	4818      	ldr	r0, [pc, #96]	; (8002aec <motor0Loop+0x6c>)
	  if(m1State == On){
 8002a8a:	4f19      	ldr	r7, [pc, #100]	; (8002af0 <motor0Loop+0x70>)
			if(m1Speed>MAX_SPEED || m1Speed<0){
 8002a8c:	4c19      	ldr	r4, [pc, #100]	; (8002af4 <motor0Loop+0x74>)
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_SET);
 8002a8e:	4d17      	ldr	r5, [pc, #92]	; (8002aec <motor0Loop+0x6c>)
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET);
 8002a90:	f7fe fa02 	bl	8000e98 <HAL_GPIO_WritePin>
	  if(m1State == On){
 8002a94:	783e      	ldrb	r6, [r7, #0]
 8002a96:	2e00      	cmp	r6, #0
 8002a98:	d1fd      	bne.n	8002a96 <motor0Loop+0x16>
			if(m1Speed>MAX_SPEED || m1Speed<0){
 8002a9a:	8823      	ldrh	r3, [r4, #0]
 8002a9c:	2b14      	cmp	r3, #20
				HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 8002a9e:	f04f 0201 	mov.w	r2, #1
			if(m1Speed>MAX_SPEED || m1Speed<0){
 8002aa2:	d908      	bls.n	8002ab6 <motor0Loop+0x36>
				HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aaa:	f7fe f9f5 	bl	8000e98 <HAL_GPIO_WritePin>
				errorMot = true;
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <motor0Loop+0x78>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e7ee      	b.n	8002a94 <motor0Loop+0x14>
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_SET);
 8002ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aba:	4628      	mov	r0, r5
 8002abc:	f7fe f9ec 	bl	8000e98 <HAL_GPIO_WritePin>
				setCorrectDirM1();
 8002ac0:	f000 faac 	bl	800301c <setCorrectDirM1>
				osDelay(m1Speed);
 8002ac4:	f9b4 0000 	ldrsh.w	r0, [r4]
 8002ac8:	f7ff fa2c 	bl	8001f24 <osDelay>
				resetDirM1();
 8002acc:	f000 fac6 	bl	800305c <resetDirM1>
				HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_RESET);
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	4632      	mov	r2, r6
 8002ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ad8:	f7fe f9de 	bl	8000e98 <HAL_GPIO_WritePin>
				osDelay(MAX_SPEED-m1Speed);
 8002adc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8002ae0:	f1c0 0014 	rsb	r0, r0, #20
 8002ae4:	f7ff fa1e 	bl	8001f24 <osDelay>
 8002ae8:	e7d4      	b.n	8002a94 <motor0Loop+0x14>
 8002aea:	bf00      	nop
 8002aec:	48000800 	.word	0x48000800
 8002af0:	2000000a 	.word	0x2000000a
 8002af4:	20000008 	.word	0x20000008
 8002af8:	200019de 	.word	0x200019de

08002afc <motor1Loop>:
{
 8002afc:	b580      	push	{r7, lr}
	  if(m2State == On){
 8002afe:	4e17      	ldr	r6, [pc, #92]	; (8002b5c <motor1Loop+0x60>)
		  if(m2Speed>MAX_SPEED || m2Speed<0){
 8002b00:	4c17      	ldr	r4, [pc, #92]	; (8002b60 <motor1Loop+0x64>)
			  errorMot = true;
 8002b02:	4f18      	ldr	r7, [pc, #96]	; (8002b64 <motor1Loop+0x68>)
	  if(m2State == On){
 8002b04:	7835      	ldrb	r5, [r6, #0]
 8002b06:	2d00      	cmp	r5, #0
 8002b08:	d1fd      	bne.n	8002b06 <motor1Loop+0xa>
		  if(m2Speed>MAX_SPEED || m2Speed<0){
 8002b0a:	8823      	ldrh	r3, [r4, #0]
 8002b0c:	2b14      	cmp	r3, #20
			  HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 8002b0e:	f04f 0201 	mov.w	r2, #1
		  if(m2Speed>MAX_SPEED || m2Speed<0){
 8002b12:	d907      	bls.n	8002b24 <motor1Loop+0x28>
			  HAL_GPIO_WritePin(ERROR_LED_PORT,ERROR_LED_PIN,GPIO_PIN_SET);
 8002b14:	2120      	movs	r1, #32
 8002b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1a:	f7fe f9bd 	bl	8000e98 <HAL_GPIO_WritePin>
			  errorMot = true;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	703b      	strb	r3, [r7, #0]
 8002b22:	e7ef      	b.n	8002b04 <motor1Loop+0x8>
			  HAL_GPIO_WritePin(PWMB_PORT,PWMB_PIN,GPIO_PIN_SET);
 8002b24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2c:	f7fe f9b4 	bl	8000e98 <HAL_GPIO_WritePin>
			  setCorrectDirM2();
 8002b30:	f000 faa6 	bl	8003080 <setCorrectDirM2>
			  osDelay(m2Speed);
 8002b34:	f9b4 0000 	ldrsh.w	r0, [r4]
 8002b38:	f7ff f9f4 	bl	8001f24 <osDelay>
			  resetDirM2();
 8002b3c:	f000 fac0 	bl	80030c0 <resetDirM2>
			  HAL_GPIO_WritePin(PWMB_PORT,PWMB_PIN,GPIO_PIN_RESET);
 8002b40:	462a      	mov	r2, r5
 8002b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4a:	f7fe f9a5 	bl	8000e98 <HAL_GPIO_WritePin>
			  osDelay(MAX_SPEED-m2Speed);
 8002b4e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8002b52:	f1c0 0014 	rsb	r0, r0, #20
 8002b56:	f7ff f9e5 	bl	8001f24 <osDelay>
 8002b5a:	e7d3      	b.n	8002b04 <motor1Loop+0x8>
 8002b5c:	2000000e 	.word	0x2000000e
 8002b60:	2000000c 	.word	0x2000000c
 8002b64:	200019de 	.word	0x200019de

08002b68 <backupLoop0>:
 8002b68:	b508      	push	{r3, lr}
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7ff f9da 	bl	8001f24 <osDelay>
 8002b70:	e7fb      	b.n	8002b6a <backupLoop0+0x2>

08002b72 <StartDefaultTask>:
 8002b72:	b508      	push	{r3, lr}
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7ff f9d5 	bl	8001f24 <osDelay>
 8002b7a:	e7fb      	b.n	8002b74 <StartDefaultTask+0x2>

08002b7c <controlLoop>:
 8002b7c:	b508      	push	{r3, lr}
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7ff f9d0 	bl	8001f24 <osDelay>
 8002b84:	e7fb      	b.n	8002b7e <controlLoop+0x2>

08002b86 <SystemClock_Config>:
{
 8002b86:	b530      	push	{r4, r5, lr}
 8002b88:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8a:	2228      	movs	r2, #40	; 0x28
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	a806      	add	r0, sp, #24
 8002b90:	f000 fc18 	bl	80033c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b94:	2214      	movs	r2, #20
 8002b96:	2100      	movs	r1, #0
 8002b98:	a801      	add	r0, sp, #4
 8002b9a:	f000 fc13 	bl	80033c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b9e:	2258      	movs	r2, #88	; 0x58
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	a810      	add	r0, sp, #64	; 0x40
 8002ba4:	f000 fc0e 	bl	80033c4 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bac:	2310      	movs	r3, #16
 8002bae:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bb4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bb6:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bbe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bc0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc2:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bc4:	f7fe f96e 	bl	8000ea4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bca:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bcc:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bce:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bd4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bd6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bda:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bdc:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002bde:	f7fe fc0f 	bl	8001400 <HAL_RCC_ClockConfig>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be2:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002be4:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002be6:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be8:	f7fe fd02 	bl	80015f0 <HAL_RCCEx_PeriphCLKConfig>
}
 8002bec:	b027      	add	sp, #156	; 0x9c
 8002bee:	bd30      	pop	{r4, r5, pc}

08002bf0 <main>:
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 8002bf4:	f7fd faf4 	bl	80001e0 <HAL_Init>
  SystemClock_Config();
 8002bf8:	f7ff ffc5 	bl	8002b86 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	2214      	movs	r2, #20
 8002bfe:	2100      	movs	r1, #0
 8002c00:	a822      	add	r0, sp, #136	; 0x88
 8002c02:	f000 fbdf 	bl	80033c4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c06:	4b86      	ldr	r3, [pc, #536]	; (8002e20 <main+0x230>)
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c28:	9201      	str	r2, [sp, #4]
 8002c2a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c3a:	9202      	str	r2, [sp, #8]
 8002c3c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c44:	615a      	str	r2, [r3, #20]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|AIN1_Pin|AIN2_Pin|PWMB_Pin 
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8002c54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c58:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|AIN1_Pin|AIN2_Pin|PWMB_Pin 
 8002c5a:	f7fe f91d 	bl	8000e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, backupOut1_Pin|backupOut0_Pin|PWMA_Pin, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002c64:	486f      	ldr	r0, [pc, #444]	; (8002e24 <main+0x234>)
 8002c66:	f7fe f917 	bl	8000e98 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002c70:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c72:	a922      	add	r1, sp, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <main+0x238>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c76:	486b      	ldr	r0, [pc, #428]	; (8002e24 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c78:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c7a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	9424      	str	r4, [sp, #144]	; 0x90
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c7e:	f7fe f83b 	bl	8000cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c82:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c84:	a922      	add	r1, sp, #136	; 0x88
 8002c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c8a:	2502      	movs	r5, #2
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c8c:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f7fe f830 	bl	8000cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = backupIn1_Pin;
 8002c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 8002c9c:	a922      	add	r1, sp, #136	; 0x88
 8002c9e:	4863      	ldr	r0, [pc, #396]	; (8002e2c <main+0x23c>)
  GPIO_InitStruct.Pin = backupIn1_Pin;
 8002ca0:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ca2:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 8002ca6:	f7fe f827 	bl	8000cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = backupIn0_Pin;
 8002caa:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(backupIn0_GPIO_Port, &GPIO_InitStruct);
 8002cac:	a922      	add	r1, sp, #136	; 0x88
 8002cae:	485d      	ldr	r0, [pc, #372]	; (8002e24 <main+0x234>)
  GPIO_InitStruct.Pin = backupIn0_Pin;
 8002cb0:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb2:	2703      	movs	r7, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cb4:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb6:	9423      	str	r4, [sp, #140]	; 0x8c
  HAL_GPIO_Init(backupIn0_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f7fe f81e 	bl	8000cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = backupOut1_Pin|backupOut0_Pin|PWMA_Pin;
 8002cbc:	f44f 7360 	mov.w	r3, #896	; 0x380
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc0:	a922      	add	r1, sp, #136	; 0x88
 8002cc2:	4858      	ldr	r0, [pc, #352]	; (8002e24 <main+0x234>)
  GPIO_InitStruct.Pin = backupOut1_Pin|backupOut0_Pin|PWMA_Pin;
 8002cc4:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cc8:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cca:	9725      	str	r7, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ccc:	f7fe f814 	bl	8000cf8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|PWMB_Pin|BN1_Pin 
 8002cd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd4:	a922      	add	r1, sp, #136	; 0x88
 8002cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = AIN1_Pin|AIN2_Pin|PWMB_Pin|BN1_Pin 
 8002cda:	9322      	str	r3, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cdc:	9623      	str	r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cde:	9524      	str	r5, [sp, #144]	; 0x90
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce0:	9725      	str	r7, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f7fe f809 	bl	8000cf8 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002ce6:	4852      	ldr	r0, [pc, #328]	; (8002e30 <main+0x240>)
  huart2.Init.BaudRate = 38400;
 8002ce8:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <main+0x244>)
  hadc1.Instance = ADC1;
 8002cea:	4d53      	ldr	r5, [pc, #332]	; (8002e38 <main+0x248>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cec:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8002cee:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002cf2:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cf6:	230c      	movs	r3, #12
 8002cf8:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cfa:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cfc:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cfe:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d00:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d02:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d04:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d06:	f7ff f8be 	bl	8001e86 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d0a:	2218      	movs	r2, #24
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	a822      	add	r0, sp, #136	; 0x88
  ADC_MultiModeTypeDef multimode = {0};
 8002d10:	941d      	str	r4, [sp, #116]	; 0x74
 8002d12:	941e      	str	r4, [sp, #120]	; 0x78
 8002d14:	941f      	str	r4, [sp, #124]	; 0x7c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d16:	f000 fb55 	bl	80033c4 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d1a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002d1e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002d22:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d26:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d28:	2304      	movs	r3, #4
 8002d2a:	616b      	str	r3, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d2c:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8002d2e:	622e      	str	r6, [r5, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d30:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d32:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d34:	61ec      	str	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d36:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d38:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d3a:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d3c:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d3e:	61ac      	str	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d40:	63ac      	str	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d42:	f7fd fad7 	bl	80002f4 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d46:	a91d      	add	r1, sp, #116	; 0x74
 8002d48:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d4a:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d4c:	f7fd fef2 	bl	8000b34 <HAL_ADCEx_MultiModeConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d50:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002d52:	4d3a      	ldr	r5, [pc, #232]	; (8002e3c <main+0x24c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d54:	9623      	str	r6, [sp, #140]	; 0x8c
  sConfig.Channel = ADC_CHANNEL_14;
 8002d56:	230e      	movs	r3, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d58:	a922      	add	r1, sp, #136	; 0x88
  sConfig.Channel = ADC_CHANNEL_14;
 8002d5a:	9322      	str	r3, [sp, #136]	; 0x88
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d5c:	9425      	str	r4, [sp, #148]	; 0x94
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d5e:	9424      	str	r4, [sp, #144]	; 0x90
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d60:	9426      	str	r4, [sp, #152]	; 0x98
  sConfig.Offset = 0;
 8002d62:	9427      	str	r4, [sp, #156]	; 0x9c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d64:	f7fd fd4e 	bl	8000804 <HAL_ADC_ConfigChannel>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d6a:	af04      	add	r7, sp, #16
 8002d6c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002d6e:	462e      	mov	r6, r5
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002d70:	4621      	mov	r1, r4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002d72:	f856 3b04 	ldr.w	r3, [r6], #4
 8002d76:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002d78:	a804      	add	r0, sp, #16
 8002d7a:	f7ff f8bb 	bl	8001ef4 <osThreadCreate>
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <main+0x250>)
 8002d80:	6018      	str	r0, [r3, #0]
  osThreadDef(motor0Task, motor0Loop, osPriorityIdle, 0, 128);
 8002d82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002d84:	af09      	add	r7, sp, #36	; 0x24
 8002d86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002d88:	6833      	ldr	r3, [r6, #0]
 8002d8a:	603b      	str	r3, [r7, #0]
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	a809      	add	r0, sp, #36	; 0x24
 8002d90:	f7ff f8b0 	bl	8001ef4 <osThreadCreate>
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <main+0x254>)
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8002d96:	f105 0718 	add.w	r7, r5, #24
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8002d9a:	6018      	str	r0, [r3, #0]
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8002d9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002d9e:	ae0e      	add	r6, sp, #56	; 0x38
 8002da0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6033      	str	r3, [r6, #0]
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8002da6:	4621      	mov	r1, r4
 8002da8:	a80e      	add	r0, sp, #56	; 0x38
 8002daa:	f7ff f8a3 	bl	8001ef4 <osThreadCreate>
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <main+0x258>)
  osThreadDef(ADCTask, ADCLoop, osPriorityIdle, 0, 128);
 8002db0:	f105 072c 	add.w	r7, r5, #44	; 0x2c
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8002db4:	6018      	str	r0, [r3, #0]
  osThreadDef(ADCTask, ADCLoop, osPriorityIdle, 0, 128);
 8002db6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002db8:	ae13      	add	r6, sp, #76	; 0x4c
 8002dba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6033      	str	r3, [r6, #0]
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	a813      	add	r0, sp, #76	; 0x4c
 8002dc4:	f7ff f896 	bl	8001ef4 <osThreadCreate>
 8002dc8:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <main+0x25c>)
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8002dca:	f105 0740 	add.w	r7, r5, #64	; 0x40
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 8002dce:	6018      	str	r0, [r3, #0]
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8002dd0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002dd2:	ae18      	add	r6, sp, #96	; 0x60
 8002dd4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6033      	str	r3, [r6, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8002dda:	4621      	mov	r1, r4
 8002ddc:	a818      	add	r0, sp, #96	; 0x60
 8002dde:	f7ff f889 	bl	8001ef4 <osThreadCreate>
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <main+0x260>)
  osThreadDef(backupTask0, backupLoop0, osPriorityIdle, 0, 128);
 8002de4:	f105 0754 	add.w	r7, r5, #84	; 0x54
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8002de8:	6018      	str	r0, [r3, #0]
  osThreadDef(backupTask0, backupLoop0, osPriorityIdle, 0, 128);
 8002dea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002dec:	ae1d      	add	r6, sp, #116	; 0x74
 8002dee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6033      	str	r3, [r6, #0]
  backupTask0Handle = osThreadCreate(osThread(backupTask0), NULL);
 8002df4:	4621      	mov	r1, r4
 8002df6:	a81d      	add	r0, sp, #116	; 0x74
 8002df8:	f7ff f87c 	bl	8001ef4 <osThreadCreate>
 8002dfc:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <main+0x264>)
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 8002dfe:	3568      	adds	r5, #104	; 0x68
  backupTask0Handle = osThreadCreate(osThread(backupTask0), NULL);
 8002e00:	6018      	str	r0, [r3, #0]
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 8002e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e04:	ae22      	add	r6, sp, #136	; 0x88
 8002e06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	6033      	str	r3, [r6, #0]
  backupTask1Handle = osThreadCreate(osThread(backupTask1), NULL);
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	a822      	add	r0, sp, #136	; 0x88
 8002e10:	f7ff f870 	bl	8001ef4 <osThreadCreate>
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <main+0x268>)
 8002e16:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002e18:	f7ff f867 	bl	8001eea <osKernelStart>
 8002e1c:	e7fe      	b.n	8002e1c <main+0x22c>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	48000800 	.word	0x48000800
 8002e28:	10210000 	.word	0x10210000
 8002e2c:	48000400 	.word	0x48000400
 8002e30:	20001a58 	.word	0x20001a58
 8002e34:	40004400 	.word	0x40004400
 8002e38:	200019f8 	.word	0x200019f8
 8002e3c:	080033ec 	.word	0x080033ec
 8002e40:	200019f0 	.word	0x200019f0
 8002e44:	20001ac8 	.word	0x20001ac8
 8002e48:	200019f4 	.word	0x200019f4
 8002e4c:	20001a4c 	.word	0x20001a4c
 8002e50:	20001a54 	.word	0x20001a54
 8002e54:	20001acc 	.word	0x20001acc
 8002e58:	20001a50 	.word	0x20001a50

08002e5c <config>:
void config(int a) {
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	4604      	mov	r4, r0
ADC_ChannelConfTypeDef sTmp = {0};
 8002e62:	2218      	movs	r2, #24
 8002e64:	2100      	movs	r1, #0
 8002e66:	4668      	mov	r0, sp
 8002e68:	f000 faac 	bl	80033c4 <memset>
switch(a) {
 8002e6c:	1e60      	subs	r0, r4, #1
 8002e6e:	2301      	movs	r3, #1
 8002e70:	2808      	cmp	r0, #8
 8002e72:	d815      	bhi.n	8002ea0 <config+0x44>
 8002e74:	e8df f000 	tbb	[pc, r0]
 8002e78:	14141414 	.word	0x14141414
 8002e7c:	100e0514 	.word	0x100e0514
 8002e80:	12          	.byte	0x12
 8002e81:	00          	.byte	0x00
sTmp.Channel = ADC_CHANNEL_6;
 8002e82:	2206      	movs	r2, #6
sTmp.Channel = ADC_CHANNEL_9;
 8002e84:	9200      	str	r2, [sp, #0]
if (HAL_ADC_ConfigChannel(&hadc1, &sTmp) != HAL_OK)
 8002e86:	4669      	mov	r1, sp
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <config+0x48>)
sTmp.Rank = ADC_REGULAR_RANK_1;
 8002e8a:	9301      	str	r3, [sp, #4]
if (HAL_ADC_ConfigChannel(&hadc1, &sTmp) != HAL_OK)
 8002e8c:	f7fd fcba 	bl	8000804 <HAL_ADC_ConfigChannel>
}
 8002e90:	b006      	add	sp, #24
 8002e92:	bd10      	pop	{r4, pc}
sTmp.Channel = ADC_CHANNEL_7;
 8002e94:	2207      	movs	r2, #7
 8002e96:	e7f5      	b.n	8002e84 <config+0x28>
sTmp.Channel = ADC_CHANNEL_8;
 8002e98:	2208      	movs	r2, #8
 8002e9a:	e7f3      	b.n	8002e84 <config+0x28>
sTmp.Channel = ADC_CHANNEL_9;
 8002e9c:	2209      	movs	r2, #9
 8002e9e:	e7f1      	b.n	8002e84 <config+0x28>
sTmp.Channel = ADC_CHANNEL_1;
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	e7f0      	b.n	8002e86 <config+0x2a>
 8002ea4:	200019f8 	.word	0x200019f8

08002ea8 <ADCLoop>:
{
 8002ea8:	b58f      	push	{r0, r1, r2, r3, r7, lr}
	volatile uint16_t adcl1 = adc1, adcl2 = adc2, adcl3 = adc3, adcl4 = adc4, adcl5 = adc5;
 8002eaa:	4950      	ldr	r1, [pc, #320]	; (8002fec <ADCLoop+0x144>)
 8002eac:	4a50      	ldr	r2, [pc, #320]	; (8002ff0 <ADCLoop+0x148>)
 8002eae:	880b      	ldrh	r3, [r1, #0]
 8002eb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002eb4:	8813      	ldrh	r3, [r2, #0]
 8002eb6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8002eba:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <ADCLoop+0x14c>)
 8002ebc:	4f4e      	ldr	r7, [pc, #312]	; (8002ff8 <ADCLoop+0x150>)
 8002ebe:	8818      	ldrh	r0, [r3, #0]
 8002ec0:	4e4e      	ldr	r6, [pc, #312]	; (8002ffc <ADCLoop+0x154>)
 8002ec2:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002ec6:	8838      	ldrh	r0, [r7, #0]
 8002ec8:	f8ad 000c 	strh.w	r0, [sp, #12]
	HAL_ADC_Start(&hadc1);
 8002ecc:	4c4c      	ldr	r4, [pc, #304]	; (8003000 <ADCLoop+0x158>)
	volatile uint16_t adcl1 = adc1, adcl2 = adc2, adcl3 = adc3, adcl4 = adc4, adcl5 = adc5;
 8002ece:	8830      	ldrh	r0, [r6, #0]
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8002ed0:	4d4c      	ldr	r5, [pc, #304]	; (8003004 <ADCLoop+0x15c>)
	volatile uint16_t adcl1 = adc1, adcl2 = adc2, adcl3 = adc3, adcl4 = adc4, adcl5 = adc5;
 8002ed2:	f8ad 000e 	strh.w	r0, [sp, #14]
 8002ed6:	468a      	mov	sl, r1
 8002ed8:	4691      	mov	r9, r2
 8002eda:	4698      	mov	r8, r3
	config(1);
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7ff ffbd 	bl	8002e5c <config>
	HAL_ADC_Start(&hadc1);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7fd fb3a 	bl	800055c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8002ee8:	4629      	mov	r1, r5
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7fd fbe6 	bl	80006bc <HAL_ADC_PollForConversion>
	adcl5 = HAL_ADC_GetValue(&hadc1);
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7fd fc83 	bl	80007fc <HAL_ADC_GetValue>
 8002ef6:	b280      	uxth	r0, r0
 8002ef8:	f8ad 000e 	strh.w	r0, [sp, #14]
	adcl5 = adcl5 / 4;
 8002efc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	config(6);
 8002f00:	2006      	movs	r0, #6
	adcl5 = adcl5 / 4;
 8002f02:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002f06:	f8ad 300e 	strh.w	r3, [sp, #14]
	config(6);
 8002f0a:	f7ff ffa7 	bl	8002e5c <config>
	HAL_ADC_Start(&hadc1);
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7fd fb24 	bl	800055c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8002f14:	4629      	mov	r1, r5
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7fd fbd0 	bl	80006bc <HAL_ADC_PollForConversion>
	adcl2 = HAL_ADC_GetValue(&hadc1);
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f7fd fc6d 	bl	80007fc <HAL_ADC_GetValue>
 8002f22:	b280      	uxth	r0, r0
 8002f24:	f8ad 0008 	strh.w	r0, [sp, #8]
	adcl2 = adcl2 / 4;
 8002f28:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	config(7);
 8002f2c:	2007      	movs	r0, #7
	adcl2 = adcl2 / 4;
 8002f2e:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002f32:	f8ad 3008 	strh.w	r3, [sp, #8]
	config(7);
 8002f36:	f7ff ff91 	bl	8002e5c <config>
	HAL_ADC_Start(&hadc1);
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f7fd fb0e 	bl	800055c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8002f40:	4629      	mov	r1, r5
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7fd fbba 	bl	80006bc <HAL_ADC_PollForConversion>
	adcl1 = HAL_ADC_GetValue(&hadc1);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f7fd fc57 	bl	80007fc <HAL_ADC_GetValue>
 8002f4e:	b280      	uxth	r0, r0
 8002f50:	f8ad 0006 	strh.w	r0, [sp, #6]
	adcl1 = adcl1 / 4;
 8002f54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	config(8);
 8002f58:	2008      	movs	r0, #8
	adcl1 = adcl1 / 4;
 8002f5a:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002f5e:	f8ad 3006 	strh.w	r3, [sp, #6]
	config(8);
 8002f62:	f7ff ff7b 	bl	8002e5c <config>
	HAL_ADC_Start(&hadc1);
 8002f66:	4620      	mov	r0, r4
 8002f68:	f7fd faf8 	bl	800055c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7fd fba4 	bl	80006bc <HAL_ADC_PollForConversion>
	adcl4 = HAL_ADC_GetValue(&hadc1);
 8002f74:	4620      	mov	r0, r4
 8002f76:	f7fd fc41 	bl	80007fc <HAL_ADC_GetValue>
 8002f7a:	b280      	uxth	r0, r0
 8002f7c:	f8ad 000c 	strh.w	r0, [sp, #12]
	adcl4 = adcl4 / 4;
 8002f80:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	config(9);
 8002f84:	2009      	movs	r0, #9
	adcl4 = adcl4 / 4;
 8002f86:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002f8a:	f8ad 300c 	strh.w	r3, [sp, #12]
	config(9);
 8002f8e:	f7ff ff65 	bl	8002e5c <config>
	HAL_ADC_Start(&hadc1);
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7fd fae2 	bl	800055c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100000);
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f7fd fb8e 	bl	80006bc <HAL_ADC_PollForConversion>
	adcl3 = HAL_ADC_GetValue(&hadc1);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f7fd fc2b 	bl	80007fc <HAL_ADC_GetValue>
 8002fa6:	b280      	uxth	r0, r0
 8002fa8:	f8ad 000a 	strh.w	r0, [sp, #10]
	adcl3 = adcl3 / 4;
 8002fac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
	osDelay(2);
 8002fb0:	2002      	movs	r0, #2
	adcl3 = adcl3 / 4;
 8002fb2:	f3c3 038d 	ubfx	r3, r3, #2, #14
 8002fb6:	f8ad 300a 	strh.w	r3, [sp, #10]
	osDelay(2);
 8002fba:	f7fe ffb3 	bl	8001f24 <osDelay>
	adc1 = adcl1;
 8002fbe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002fc2:	f8aa 3000 	strh.w	r3, [sl]
	adc2 = adcl2;
 8002fc6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8002fca:	f8a9 3000 	strh.w	r3, [r9]
	adc3 = adcl3;
 8002fce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8002fd2:	f8a8 3000 	strh.w	r3, [r8]
	adc4 = adcl4;
 8002fd6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002fda:	803b      	strh	r3, [r7, #0]
	osDelay(10);
 8002fdc:	200a      	movs	r0, #10
	adc5 = adcl5;
 8002fde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8002fe2:	8033      	strh	r3, [r6, #0]
	osDelay(10);
 8002fe4:	f7fe ff9e 	bl	8001f24 <osDelay>
 8002fe8:	e778      	b.n	8002edc <ADCLoop+0x34>
 8002fea:	bf00      	nop
 8002fec:	200019e6 	.word	0x200019e6
 8002ff0:	200019e8 	.word	0x200019e8
 8002ff4:	200019ec 	.word	0x200019ec
 8002ff8:	200019ea 	.word	0x200019ea
 8002ffc:	200019e4 	.word	0x200019e4
 8003000:	200019f8 	.word	0x200019f8
 8003004:	000186a0 	.word	0x000186a0

08003008 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003008:	6802      	ldr	r2, [r0, #0]
 800300a:	4b03      	ldr	r3, [pc, #12]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800300c:	429a      	cmp	r2, r3
 800300e:	d101      	bne.n	8003014 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003010:	f7fd b8f8 	b.w	8000204 <HAL_IncTick>
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00

0800301c <setCorrectDirM1>:
#include "stdbool.h"
#include "main.h"
#include "motors.h"

void setCorrectDirM1(void){
	if(m1Dir == Forw){
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <setCorrectDirM1+0x3c>)
void setCorrectDirM1(void){
 800301e:	b510      	push	{r4, lr}
	if(m1Dir == Forw){
 8003020:	781c      	ldrb	r4, [r3, #0]
 8003022:	b97c      	cbnz	r4, 8003044 <setCorrectDirM1+0x28>
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_SET);
 8003024:	2201      	movs	r2, #1
 8003026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800302a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800302e:	f7fd ff33 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_RESET);
 8003032:	4622      	mov	r2, r4
	}
	else{
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_SET);
 8003034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	}
}
 800303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_SET);
 8003040:	f7fd bf2a 	b.w	8000e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
 8003044:	2200      	movs	r2, #0
 8003046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800304a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800304e:	f7fd ff23 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_SET);
 8003052:	2201      	movs	r2, #1
 8003054:	e7ee      	b.n	8003034 <setCorrectDirM1+0x18>
 8003056:	bf00      	nop
 8003058:	200019dc 	.word	0x200019dc

0800305c <resetDirM1>:

void resetDirM1(void){
 800305c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(AIN1_PORT,AIN1_PIN,GPIO_PIN_RESET);
 800305e:	2200      	movs	r2, #0
 8003060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003068:	f7fd ff16 	bl	8000e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_RESET);
 800306c:	2200      	movs	r2, #0
 800306e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 8003076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(AIN2_PORT,AIN2_PIN,GPIO_PIN_RESET);
 800307a:	f7fd bf0d 	b.w	8000e98 <HAL_GPIO_WritePin>
	...

08003080 <setCorrectDirM2>:

void setCorrectDirM2(void){
	if(m2Dir == Forw){
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <setCorrectDirM2+0x3c>)
void setCorrectDirM2(void){
 8003082:	b510      	push	{r4, lr}
	if(m2Dir == Forw){
 8003084:	781c      	ldrb	r4, [r3, #0]
 8003086:	b97c      	cbnz	r4, 80030a8 <setCorrectDirM2+0x28>
		HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800308e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003092:	f7fd ff01 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_RESET);
 8003096:	4622      	mov	r2, r4
	}
	else{
		HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_SET);
 8003098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800309c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	}
}
 80030a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_SET);
 80030a4:	f7fd bef8 	b.w	8000e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030b2:	f7fd fef1 	bl	8000e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_SET);
 80030b6:	2201      	movs	r2, #1
 80030b8:	e7ee      	b.n	8003098 <setCorrectDirM2+0x18>
 80030ba:	bf00      	nop
 80030bc:	200019dd 	.word	0x200019dd

080030c0 <resetDirM2>:

void resetDirM2(void){
 80030c0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(BIN1_PORT,BIN1_PIN,GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030cc:	f7fd fee4 	bl	8000e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_RESET);
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
}
 80030da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_WritePin(BIN2_PORT,BIN2_PIN,GPIO_PIN_RESET);
 80030de:	f7fd bedb 	b.w	8000e98 <HAL_GPIO_WritePin>
	...

080030e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_MspInit+0x3c>)
{
 80030e6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	619a      	str	r2, [r3, #24]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	f002 0201 	and.w	r2, r2, #1
 80030f6:	9200      	str	r2, [sp, #0]
 80030f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003100:	61da      	str	r2, [r3, #28]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	210f      	movs	r1, #15
 800310e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003114:	f7fd fdb0 	bl	8000c78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003118:	b003      	add	sp, #12
 800311a:	f85d fb04 	ldr.w	pc, [sp], #4
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003124:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003126:	2214      	movs	r2, #20
{
 8003128:	b08b      	sub	sp, #44	; 0x2c
 800312a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	2100      	movs	r1, #0
 800312e:	eb0d 0002 	add.w	r0, sp, r2
 8003132:	f000 f947 	bl	80033c4 <memset>
  if(hadc->Instance==ADC1)
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313c:	d142      	bne.n	80031c4 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800313e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8003142:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PB11     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003146:	2403      	movs	r4, #3
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003148:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314a:	481f      	ldr	r0, [pc, #124]	; (80031c8 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 800314c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003150:	615a      	str	r2, [r3, #20]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003158:	9201      	str	r2, [sp, #4]
 800315a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003162:	615a      	str	r2, [r3, #20]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800316a:	9202      	str	r2, [sp, #8]
 800316c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003174:	615a      	str	r2, [r3, #20]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800317c:	9203      	str	r2, [sp, #12]
 800317e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800318a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003190:	9304      	str	r3, [sp, #16]
 8003192:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003194:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003196:	230f      	movs	r3, #15
 8003198:	9305      	str	r3, [sp, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800319c:	f7fd fdac 	bl	8000cf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031a0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	a905      	add	r1, sp, #20
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031aa:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f7fd fda3 	bl	8000cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b6:	a905      	add	r1, sp, #20
 80031b8:	4804      	ldr	r0, [pc, #16]	; (80031cc <HAL_ADC_MspInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031bc:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	f7fd fd9a 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031c4:	b00b      	add	sp, #44	; 0x2c
 80031c6:	bd30      	pop	{r4, r5, pc}
 80031c8:	48000800 	.word	0x48000800
 80031cc:	48000400 	.word	0x48000400

080031d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4604      	mov	r4, r0
 80031d4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d6:	2214      	movs	r2, #20
 80031d8:	2100      	movs	r1, #0
 80031da:	a803      	add	r0, sp, #12
 80031dc:	f000 f8f2 	bl	80033c4 <memset>
  if(huart->Instance==USART2)
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_UART_MspInit+0x5c>)
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d11e      	bne.n	8003226 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031e8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ec:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031f4:	61da      	str	r2, [r3, #28]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80031fc:	9201      	str	r2, [sp, #4]
 80031fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003206:	615a      	str	r2, [r3, #20]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003212:	230c      	movs	r3, #12
 8003214:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800321e:	2307      	movs	r3, #7
 8003220:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003222:	f7fd fd69 	bl	8000cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003226:	b008      	add	sp, #32
 8003228:	bd10      	pop	{r4, pc}
 800322a:	bf00      	nop
 800322c:	40004400 	.word	0x40004400

08003230 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8003232:	4601      	mov	r1, r0
{
 8003234:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8003236:	2200      	movs	r2, #0
 8003238:	2019      	movs	r0, #25
 800323a:	f7fd fd1d 	bl	8000c78 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800323e:	2019      	movs	r0, #25
 8003240:	f7fd fd4e 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003246:	4c15      	ldr	r4, [pc, #84]	; (800329c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800324e:	619a      	str	r2, [r3, #24]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003256:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003258:	a901      	add	r1, sp, #4
 800325a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800325c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800325e:	f7fe f9a9 	bl	80015b4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003262:	f7fe f98f 	bl	8001584 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_InitTick+0x70>)
 8003268:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800326a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800326e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <HAL_InitTick+0x74>)
 8003272:	fbb0 f0f3 	udiv	r0, r0, r3
 8003276:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003278:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 800327a:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800327c:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800327e:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003280:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003282:	f7fe fc23 	bl	8001acc <HAL_TIM_Base_Init>
 8003286:	b920      	cbnz	r0, 8003292 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003288:	4620      	mov	r0, r4
 800328a:	f7fe faf6 	bl	800187a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800328e:	b008      	add	sp, #32
 8003290:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003292:	2001      	movs	r0, #1
 8003294:	e7fb      	b.n	800328e <HAL_InitTick+0x5e>
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	20001ad0 	.word	0x20001ad0
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	000f4240 	.word	0x000f4240

080032a8 <NMI_Handler>:
 80032a8:	4770      	bx	lr

080032aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032aa:	e7fe      	b.n	80032aa <HardFault_Handler>

080032ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ac:	e7fe      	b.n	80032ac <MemManage_Handler>

080032ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ae:	e7fe      	b.n	80032ae <BusFault_Handler>

080032b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b0:	e7fe      	b.n	80032b0 <UsageFault_Handler>

080032b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b2:	4770      	bx	lr

080032b4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032b4:	4801      	ldr	r0, [pc, #4]	; (80032bc <TIM1_UP_TIM16_IRQHandler+0x8>)
 80032b6:	f7fe baef 	b.w	8001898 <HAL_TIM_IRQHandler>
 80032ba:	bf00      	nop
 80032bc:	20001ad0 	.word	0x20001ad0

080032c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032c0:	4915      	ldr	r1, [pc, #84]	; (8003318 <SystemInit+0x58>)
 80032c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80032c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <SystemInit+0x5c>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80032d8:	6858      	ldr	r0, [r3, #4]
 80032da:	4a11      	ldr	r2, [pc, #68]	; (8003320 <SystemInit+0x60>)
 80032dc:	4002      	ands	r2, r0
 80032de:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80032e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80032fa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	f022 020f 	bic.w	r2, r2, #15
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003304:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003306:	4a07      	ldr	r2, [pc, #28]	; (8003324 <SystemInit+0x64>)
 8003308:	4002      	ands	r2, r0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003310:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003314:	608b      	str	r3, [r1, #8]
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00
 800331c:	40021000 	.word	0x40021000
 8003320:	f87fc00c 	.word	0xf87fc00c
 8003324:	ff00fccc 	.word	0xff00fccc

08003328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003360 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800332c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800332e:	e003      	b.n	8003338 <LoopCopyDataInit>

08003330 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003332:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003334:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003336:	3104      	adds	r1, #4

08003338 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003338:	480b      	ldr	r0, [pc, #44]	; (8003368 <LoopForever+0xa>)
	ldr	r3, =_edata
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <LoopForever+0xe>)
	adds	r2, r0, r1
 800333c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800333e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003340:	d3f6      	bcc.n	8003330 <CopyDataInit>
	ldr	r2, =_sbss
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003344:	e002      	b.n	800334c <LoopFillZerobss>

08003346 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003346:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003348:	f842 3b04 	str.w	r3, [r2], #4

0800334c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <LoopForever+0x16>)
	cmp	r2, r3
 800334e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003350:	d3f9      	bcc.n	8003346 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003352:	f7ff ffb5 	bl	80032c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003356:	f000 f811 	bl	800337c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800335a:	f7ff fc49 	bl	8002bf0 <main>

0800335e <LoopForever>:

LoopForever:
    b LoopForever
 800335e:	e7fe      	b.n	800335e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003360:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003364:	08003510 	.word	0x08003510
	ldr	r0, =_sdata
 8003368:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800336c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8003370:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8003374:	20001b10 	.word	0x20001b10

08003378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC1_2_IRQHandler>
	...

0800337c <__libc_init_array>:
 800337c:	b570      	push	{r4, r5, r6, lr}
 800337e:	4e0d      	ldr	r6, [pc, #52]	; (80033b4 <__libc_init_array+0x38>)
 8003380:	4c0d      	ldr	r4, [pc, #52]	; (80033b8 <__libc_init_array+0x3c>)
 8003382:	1ba4      	subs	r4, r4, r6
 8003384:	10a4      	asrs	r4, r4, #2
 8003386:	2500      	movs	r5, #0
 8003388:	42a5      	cmp	r5, r4
 800338a:	d109      	bne.n	80033a0 <__libc_init_array+0x24>
 800338c:	4e0b      	ldr	r6, [pc, #44]	; (80033bc <__libc_init_array+0x40>)
 800338e:	4c0c      	ldr	r4, [pc, #48]	; (80033c0 <__libc_init_array+0x44>)
 8003390:	f000 f820 	bl	80033d4 <_init>
 8003394:	1ba4      	subs	r4, r4, r6
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	2500      	movs	r5, #0
 800339a:	42a5      	cmp	r5, r4
 800339c:	d105      	bne.n	80033aa <__libc_init_array+0x2e>
 800339e:	bd70      	pop	{r4, r5, r6, pc}
 80033a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a4:	4798      	blx	r3
 80033a6:	3501      	adds	r5, #1
 80033a8:	e7ee      	b.n	8003388 <__libc_init_array+0xc>
 80033aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ae:	4798      	blx	r3
 80033b0:	3501      	adds	r5, #1
 80033b2:	e7f2      	b.n	800339a <__libc_init_array+0x1e>
 80033b4:	08003508 	.word	0x08003508
 80033b8:	08003508 	.word	0x08003508
 80033bc:	08003508 	.word	0x08003508
 80033c0:	0800350c 	.word	0x0800350c

080033c4 <memset>:
 80033c4:	4402      	add	r2, r0
 80033c6:	4603      	mov	r3, r0
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d100      	bne.n	80033ce <memset+0xa>
 80033cc:	4770      	bx	lr
 80033ce:	f803 1b01 	strb.w	r1, [r3], #1
 80033d2:	e7f9      	b.n	80033c8 <memset+0x4>

080033d4 <_init>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr

080033e0 <_fini>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr
