
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002450  08002450  00012450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080024d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000e28  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e34  20000e34  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a949  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000034cd  00000000  00000000  0003a985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000098d9  00000000  00000000  0003de52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d08  00000000  00000000  00047730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001150  00000000  00000000  00048438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000072e5  00000000  00000000  00049588  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005513  00000000  00000000  0005086d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00055d80  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000025b0  00000000  00000000  00055dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002438 	.word	0x08002438

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08002438 	.word	0x08002438

080001e0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x20>)
{
 80001e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f043 0310 	orr.w	r3, r3, #16
 80001ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ec:	2003      	movs	r0, #3
 80001ee:	f000 f81b 	bl	8000228 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f2:	2000      	movs	r0, #0
 80001f4:	f002 f84e 	bl	8002294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f8:	f001 fffc 	bl	80021f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001fc:	2000      	movs	r0, #0
 80001fe:	bd08      	pop	{r3, pc}
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <HAL_IncTick+0x10>)
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <HAL_IncTick+0x14>)
 8000208:	6811      	ldr	r1, [r2, #0]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	440b      	add	r3, r1
 800020e:	6013      	str	r3, [r2, #0]
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000d74 	.word	0x20000d74
 8000218:	20000000 	.word	0x20000000

0800021c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <HAL_GetTick+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000d74 	.word	0x20000d74

08000228 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800022a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800022c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000230:	041b      	lsls	r3, r3, #16
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000238:	0200      	lsls	r0, r0, #8
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000242:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000244:	60d3      	str	r3, [r2, #12]
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00

0800024c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800024e:	b530      	push	{r4, r5, lr}
 8000250:	68dc      	ldr	r4, [r3, #12]
 8000252:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000256:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800025c:	2b04      	cmp	r3, #4
 800025e:	bf28      	it	cs
 8000260:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000262:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000264:	f04f 0501 	mov.w	r5, #1
 8000268:	fa05 f303 	lsl.w	r3, r5, r3
 800026c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000270:	bf8c      	ite	hi
 8000272:	3c03      	subhi	r4, #3
 8000274:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000276:	4019      	ands	r1, r3
 8000278:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800027a:	fa05 f404 	lsl.w	r4, r5, r4
 800027e:	3c01      	subs	r4, #1
 8000280:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000282:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000284:	ea42 0201 	orr.w	r2, r2, r1
 8000288:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	bfaf      	iteee	ge
 800028e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	f000 000f 	andlt.w	r0, r0, #15
 8000296:	4b06      	ldrlt	r3, [pc, #24]	; (80002b0 <HAL_NVIC_SetPriority+0x64>)
 8000298:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	bfa5      	ittet	ge
 800029c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002a8:	bd30      	pop	{r4, r5, pc}
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00
 80002b0:	e000ed14 	.word	0xe000ed14

080002b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b4:	0942      	lsrs	r2, r0, #5
 80002b6:	2301      	movs	r3, #1
 80002b8:	f000 001f 	and.w	r0, r0, #31
 80002bc:	fa03 f000 	lsl.w	r0, r3, r0
 80002c0:	4b01      	ldr	r3, [pc, #4]	; (80002c8 <HAL_NVIC_EnableIRQ+0x14>)
 80002c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002c6:	4770      	bx	lr
 80002c8:	e000e100 	.word	0xe000e100

080002cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80002d0:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d4:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000468 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002d8:	4a61      	ldr	r2, [pc, #388]	; (8000460 <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 80002da:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 80002dc:	fa38 f403 	lsrs.w	r4, r8, r3
 80002e0:	d102      	bne.n	80002e8 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 80002e2:	b003      	add	sp, #12
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002e8:	f04f 0e01 	mov.w	lr, #1
 80002ec:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80002f0:	ea18 060e 	ands.w	r6, r8, lr
 80002f4:	f000 80a6 	beq.w	8000444 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80002f8:	684c      	ldr	r4, [r1, #4]
 80002fa:	f024 0710 	bic.w	r7, r4, #16
 80002fe:	2f02      	cmp	r7, #2
 8000300:	d116      	bne.n	8000330 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000302:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000306:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800030a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800030e:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000312:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000316:	f04f 0c0f 	mov.w	ip, #15
 800031a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800031e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000322:	690d      	ldr	r5, [r1, #16]
 8000324:	fa05 f50b 	lsl.w	r5, r5, fp
 8000328:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800032c:	f8ca 5020 	str.w	r5, [sl, #32]
 8000330:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000334:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000336:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800033a:	fa05 f50a 	lsl.w	r5, r5, sl
 800033e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000340:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000344:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000348:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800034c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800034e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000352:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000354:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000358:	d811      	bhi.n	800037e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800035a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800035c:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000360:	68cf      	ldr	r7, [r1, #12]
 8000362:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000366:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800036a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800036c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800036e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000372:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000376:	409f      	lsls	r7, r3
 8000378:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800037c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800037e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000380:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000382:	688f      	ldr	r7, [r1, #8]
 8000384:	fa07 f70a 	lsl.w	r7, r7, sl
 8000388:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800038a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800038c:	00e5      	lsls	r5, r4, #3
 800038e:	d559      	bpl.n	8000444 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000390:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000394:	f045 0501 	orr.w	r5, r5, #1
 8000398:	f8c9 5018 	str.w	r5, [r9, #24]
 800039c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 80003a0:	f023 0703 	bic.w	r7, r3, #3
 80003a4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80003a8:	f005 0501 	and.w	r5, r5, #1
 80003ac:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80003b0:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003b2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80003b8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80003be:	f04f 0e0f 	mov.w	lr, #15
 80003c2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80003c6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80003ca:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80003ce:	d03b      	beq.n	8000448 <HAL_GPIO_Init+0x17c>
 80003d0:	4d24      	ldr	r5, [pc, #144]	; (8000464 <HAL_GPIO_Init+0x198>)
 80003d2:	42a8      	cmp	r0, r5
 80003d4:	d03a      	beq.n	800044c <HAL_GPIO_Init+0x180>
 80003d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003da:	42a8      	cmp	r0, r5
 80003dc:	d038      	beq.n	8000450 <HAL_GPIO_Init+0x184>
 80003de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003e2:	42a8      	cmp	r0, r5
 80003e4:	d036      	beq.n	8000454 <HAL_GPIO_Init+0x188>
 80003e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ea:	42a8      	cmp	r0, r5
 80003ec:	d034      	beq.n	8000458 <HAL_GPIO_Init+0x18c>
 80003ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003f2:	42a8      	cmp	r0, r5
 80003f4:	d032      	beq.n	800045c <HAL_GPIO_Init+0x190>
 80003f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fa:	42a8      	cmp	r0, r5
 80003fc:	bf14      	ite	ne
 80003fe:	2507      	movne	r5, #7
 8000400:	2506      	moveq	r5, #6
 8000402:	fa05 f50c 	lsl.w	r5, r5, ip
 8000406:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800040a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800040c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800040e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000410:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000414:	bf0c      	ite	eq
 8000416:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000418:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 800041a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800041c:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800041e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000422:	bf0c      	ite	eq
 8000424:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000426:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000428:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800042a:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800042c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000430:	bf0c      	ite	eq
 8000432:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000434:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000436:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000438:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800043a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800043c:	bf54      	ite	pl
 800043e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000440:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000442:	60d5      	str	r5, [r2, #12]
    position++;
 8000444:	3301      	adds	r3, #1
 8000446:	e749      	b.n	80002dc <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000448:	2500      	movs	r5, #0
 800044a:	e7da      	b.n	8000402 <HAL_GPIO_Init+0x136>
 800044c:	2501      	movs	r5, #1
 800044e:	e7d8      	b.n	8000402 <HAL_GPIO_Init+0x136>
 8000450:	2502      	movs	r5, #2
 8000452:	e7d6      	b.n	8000402 <HAL_GPIO_Init+0x136>
 8000454:	2503      	movs	r5, #3
 8000456:	e7d4      	b.n	8000402 <HAL_GPIO_Init+0x136>
 8000458:	2504      	movs	r5, #4
 800045a:	e7d2      	b.n	8000402 <HAL_GPIO_Init+0x136>
 800045c:	2505      	movs	r5, #5
 800045e:	e7d0      	b.n	8000402 <HAL_GPIO_Init+0x136>
 8000460:	40010400 	.word	0x40010400
 8000464:	48000400 	.word	0x48000400
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800046c:	b10a      	cbz	r2, 8000472 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800046e:	6181      	str	r1, [r0, #24]
 8000470:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000472:	6281      	str	r1, [r0, #40]	; 0x28
 8000474:	4770      	bx	lr
	...

08000478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000478:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800047c:	4605      	mov	r5, r0
 800047e:	b918      	cbnz	r0, 8000488 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000480:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000482:	b002      	add	sp, #8
 8000484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000488:	6803      	ldr	r3, [r0, #0]
 800048a:	07df      	lsls	r7, r3, #31
 800048c:	d411      	bmi.n	80004b2 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800048e:	682b      	ldr	r3, [r5, #0]
 8000490:	079e      	lsls	r6, r3, #30
 8000492:	f100 8088 	bmi.w	80005a6 <HAL_RCC_OscConfig+0x12e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000496:	682b      	ldr	r3, [r5, #0]
 8000498:	071c      	lsls	r4, r3, #28
 800049a:	f100 80fc 	bmi.w	8000696 <HAL_RCC_OscConfig+0x21e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	0758      	lsls	r0, r3, #29
 80004a2:	f100 8145 	bmi.w	8000730 <HAL_RCC_OscConfig+0x2b8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004a6:	69aa      	ldr	r2, [r5, #24]
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	f040 81dc 	bne.w	8000866 <HAL_RCC_OscConfig+0x3ee>
  return HAL_OK;
 80004ae:	2000      	movs	r0, #0
 80004b0:	e7e7      	b.n	8000482 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b2:	4cbd      	ldr	r4, [pc, #756]	; (80007a8 <HAL_RCC_OscConfig+0x330>)
 80004b4:	6863      	ldr	r3, [r4, #4]
 80004b6:	f003 030c 	and.w	r3, r3, #12
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d00a      	beq.n	80004d4 <HAL_RCC_OscConfig+0x5c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	f003 030c 	and.w	r3, r3, #12
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d119      	bne.n	80004fc <HAL_RCC_OscConfig+0x84>
 80004c8:	6863      	ldr	r3, [r4, #4]
 80004ca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80004ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004d2:	d113      	bne.n	80004fc <HAL_RCC_OscConfig+0x84>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004dc:	6821      	ldr	r1, [r4, #0]
 80004de:	fa93 f3a3 	rbit	r3, r3
 80004e2:	fab3 f383 	clz	r3, r3
 80004e6:	f003 031f 	and.w	r3, r3, #31
 80004ea:	2201      	movs	r2, #1
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	420b      	tst	r3, r1
 80004f2:	d0cc      	beq.n	800048e <HAL_RCC_OscConfig+0x16>
 80004f4:	686b      	ldr	r3, [r5, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1c9      	bne.n	800048e <HAL_RCC_OscConfig+0x16>
 80004fa:	e7c1      	b.n	8000480 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fc:	686b      	ldr	r3, [r5, #4]
 80004fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000502:	d11e      	bne.n	8000542 <HAL_RCC_OscConfig+0xca>
 8000504:	6823      	ldr	r3, [r4, #0]
 8000506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800050a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050c:	f7ff fe86 	bl	800021c <HAL_GetTick>
 8000510:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000514:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000516:	2701      	movs	r7, #1
 8000518:	fa96 f3a6 	rbit	r3, r6
 800051c:	6822      	ldr	r2, [r4, #0]
 800051e:	fa96 f3a6 	rbit	r3, r6
 8000522:	fab3 f383 	clz	r3, r3
 8000526:	f003 031f 	and.w	r3, r3, #31
 800052a:	fa07 f303 	lsl.w	r3, r7, r3
 800052e:	4213      	tst	r3, r2
 8000530:	d1ad      	bne.n	800048e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000532:	f7ff fe73 	bl	800021c <HAL_GetTick>
 8000536:	eba0 0008 	sub.w	r0, r0, r8
 800053a:	2864      	cmp	r0, #100	; 0x64
 800053c:	d9ec      	bls.n	8000518 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800053e:	2003      	movs	r0, #3
 8000540:	e79f      	b.n	8000482 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000542:	bb0b      	cbnz	r3, 8000588 <HAL_RCC_OscConfig+0x110>
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800054a:	6023      	str	r3, [r4, #0]
 800054c:	6823      	ldr	r3, [r4, #0]
 800054e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000552:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000554:	f7ff fe62 	bl	800021c <HAL_GetTick>
 8000558:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800055c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800055e:	2701      	movs	r7, #1
 8000560:	fa96 f3a6 	rbit	r3, r6
 8000564:	6822      	ldr	r2, [r4, #0]
 8000566:	fa96 f3a6 	rbit	r3, r6
 800056a:	fab3 f383 	clz	r3, r3
 800056e:	f003 031f 	and.w	r3, r3, #31
 8000572:	fa07 f303 	lsl.w	r3, r7, r3
 8000576:	4213      	tst	r3, r2
 8000578:	d089      	beq.n	800048e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800057a:	f7ff fe4f 	bl	800021c <HAL_GetTick>
 800057e:	eba0 0008 	sub.w	r0, r0, r8
 8000582:	2864      	cmp	r0, #100	; 0x64
 8000584:	d9ec      	bls.n	8000560 <HAL_RCC_OscConfig+0xe8>
 8000586:	e7da      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	d103      	bne.n	8000598 <HAL_RCC_OscConfig+0x120>
 8000590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000594:	6023      	str	r3, [r4, #0]
 8000596:	e7b5      	b.n	8000504 <HAL_RCC_OscConfig+0x8c>
 8000598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059c:	6023      	str	r3, [r4, #0]
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a4:	e7b1      	b.n	800050a <HAL_RCC_OscConfig+0x92>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005a6:	4c80      	ldr	r4, [pc, #512]	; (80007a8 <HAL_RCC_OscConfig+0x330>)
 80005a8:	6863      	ldr	r3, [r4, #4]
 80005aa:	f013 0f0c 	tst.w	r3, #12
 80005ae:	d00a      	beq.n	80005c6 <HAL_RCC_OscConfig+0x14e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005b0:	6863      	ldr	r3, [r4, #4]
 80005b2:	f003 030c 	and.w	r3, r3, #12
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d125      	bne.n	8000606 <HAL_RCC_OscConfig+0x18e>
 80005ba:	6863      	ldr	r3, [r4, #4]
 80005bc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80005c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005c4:	d11f      	bne.n	8000606 <HAL_RCC_OscConfig+0x18e>
 80005c6:	2302      	movs	r3, #2
 80005c8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005cc:	6821      	ldr	r1, [r4, #0]
 80005ce:	fa93 f3a3 	rbit	r3, r3
 80005d2:	fab3 f383 	clz	r3, r3
 80005d6:	f003 031f 	and.w	r3, r3, #31
 80005da:	2201      	movs	r2, #1
 80005dc:	fa02 f303 	lsl.w	r3, r2, r3
 80005e0:	420b      	tst	r3, r1
 80005e2:	d003      	beq.n	80005ec <HAL_RCC_OscConfig+0x174>
 80005e4:	68eb      	ldr	r3, [r5, #12]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	f47f af4a 	bne.w	8000480 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005ec:	6821      	ldr	r1, [r4, #0]
 80005ee:	23f8      	movs	r3, #248	; 0xf8
 80005f0:	fa93 f3a3 	rbit	r3, r3
 80005f4:	fab3 f283 	clz	r2, r3
 80005f8:	692b      	ldr	r3, [r5, #16]
 80005fa:	4093      	lsls	r3, r2
 80005fc:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000600:	4313      	orrs	r3, r2
 8000602:	6023      	str	r3, [r4, #0]
 8000604:	e747      	b.n	8000496 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000606:	68ea      	ldr	r2, [r5, #12]
 8000608:	2601      	movs	r6, #1
 800060a:	b30a      	cbz	r2, 8000650 <HAL_RCC_OscConfig+0x1d8>
 800060c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000610:	fab3 f383 	clz	r3, r3
 8000614:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000618:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	2702      	movs	r7, #2
 8000620:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000622:	f7ff fdfb 	bl	800021c <HAL_GetTick>
 8000626:	4680      	mov	r8, r0
 8000628:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800062c:	6822      	ldr	r2, [r4, #0]
 800062e:	fa97 f3a7 	rbit	r3, r7
 8000632:	fab3 f383 	clz	r3, r3
 8000636:	f003 031f 	and.w	r3, r3, #31
 800063a:	fa06 f303 	lsl.w	r3, r6, r3
 800063e:	4213      	tst	r3, r2
 8000640:	d1d4      	bne.n	80005ec <HAL_RCC_OscConfig+0x174>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000642:	f7ff fdeb 	bl	800021c <HAL_GetTick>
 8000646:	eba0 0008 	sub.w	r0, r0, r8
 800064a:	2802      	cmp	r0, #2
 800064c:	d9ec      	bls.n	8000628 <HAL_RCC_OscConfig+0x1b0>
 800064e:	e776      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
 8000650:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000654:	fab3 f383 	clz	r3, r3
 8000658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800065c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	2702      	movs	r7, #2
 8000664:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000666:	f7ff fdd9 	bl	800021c <HAL_GetTick>
 800066a:	4680      	mov	r8, r0
 800066c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000670:	6822      	ldr	r2, [r4, #0]
 8000672:	fa97 f3a7 	rbit	r3, r7
 8000676:	fab3 f383 	clz	r3, r3
 800067a:	f003 031f 	and.w	r3, r3, #31
 800067e:	fa06 f303 	lsl.w	r3, r6, r3
 8000682:	4213      	tst	r3, r2
 8000684:	f43f af07 	beq.w	8000496 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000688:	f7ff fdc8 	bl	800021c <HAL_GetTick>
 800068c:	eba0 0008 	sub.w	r0, r0, r8
 8000690:	2802      	cmp	r0, #2
 8000692:	d9eb      	bls.n	800066c <HAL_RCC_OscConfig+0x1f4>
 8000694:	e753      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000696:	696a      	ldr	r2, [r5, #20]
 8000698:	4e43      	ldr	r6, [pc, #268]	; (80007a8 <HAL_RCC_OscConfig+0x330>)
 800069a:	4944      	ldr	r1, [pc, #272]	; (80007ac <HAL_RCC_OscConfig+0x334>)
 800069c:	2401      	movs	r4, #1
 800069e:	b31a      	cbz	r2, 80006e8 <HAL_RCC_OscConfig+0x270>
 80006a0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006a4:	fab3 f383 	clz	r3, r3
 80006a8:	440b      	add	r3, r1
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	2702      	movs	r7, #2
 80006ae:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006b0:	f7ff fdb4 	bl	800021c <HAL_GetTick>
 80006b4:	4680      	mov	r8, r0
 80006b6:	fa97 f3a7 	rbit	r3, r7
 80006ba:	fa97 f3a7 	rbit	r3, r7
 80006be:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006c2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80006c4:	fa97 f3a7 	rbit	r3, r7
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	f003 031f 	and.w	r3, r3, #31
 80006d0:	fa04 f303 	lsl.w	r3, r4, r3
 80006d4:	4213      	tst	r3, r2
 80006d6:	f47f aee2 	bne.w	800049e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006da:	f7ff fd9f 	bl	800021c <HAL_GetTick>
 80006de:	eba0 0008 	sub.w	r0, r0, r8
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d9e7      	bls.n	80006b6 <HAL_RCC_OscConfig+0x23e>
 80006e6:	e72a      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
 80006e8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80006ec:	fab3 f383 	clz	r3, r3
 80006f0:	440b      	add	r3, r1
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	2702      	movs	r7, #2
 80006f6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006f8:	f7ff fd90 	bl	800021c <HAL_GetTick>
 80006fc:	4680      	mov	r8, r0
 80006fe:	fa97 f3a7 	rbit	r3, r7
 8000702:	fa97 f3a7 	rbit	r3, r7
 8000706:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800070a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800070c:	fa97 f3a7 	rbit	r3, r7
 8000710:	fab3 f383 	clz	r3, r3
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	fa04 f303 	lsl.w	r3, r4, r3
 800071c:	4213      	tst	r3, r2
 800071e:	f43f aebe 	beq.w	800049e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000722:	f7ff fd7b 	bl	800021c <HAL_GetTick>
 8000726:	eba0 0008 	sub.w	r0, r0, r8
 800072a:	2802      	cmp	r0, #2
 800072c:	d9e7      	bls.n	80006fe <HAL_RCC_OscConfig+0x286>
 800072e:	e706      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000730:	4c1d      	ldr	r4, [pc, #116]	; (80007a8 <HAL_RCC_OscConfig+0x330>)
 8000732:	69e3      	ldr	r3, [r4, #28]
 8000734:	00d9      	lsls	r1, r3, #3
 8000736:	d434      	bmi.n	80007a2 <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	69e3      	ldr	r3, [r4, #28]
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	61e3      	str	r3, [r4, #28]
 8000740:	69e3      	ldr	r3, [r4, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	9301      	str	r3, [sp, #4]
 8000748:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800074a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800074c:	4f18      	ldr	r7, [pc, #96]	; (80007b0 <HAL_RCC_OscConfig+0x338>)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	05da      	lsls	r2, r3, #23
 8000752:	d52f      	bpl.n	80007b4 <HAL_RCC_OscConfig+0x33c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000754:	68ab      	ldr	r3, [r5, #8]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d13d      	bne.n	80007d6 <HAL_RCC_OscConfig+0x35e>
 800075a:	6a23      	ldr	r3, [r4, #32]
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000762:	f7ff fd5b 	bl	800021c <HAL_GetTick>
 8000766:	2702      	movs	r7, #2
 8000768:	4682      	mov	sl, r0
 800076a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800076c:	f04f 0801 	mov.w	r8, #1
 8000770:	fa97 f3a7 	rbit	r3, r7
 8000774:	fa97 f3a7 	rbit	r3, r7
 8000778:	2b00      	cmp	r3, #0
 800077a:	d06c      	beq.n	8000856 <HAL_RCC_OscConfig+0x3de>
 800077c:	6a22      	ldr	r2, [r4, #32]
 800077e:	fa99 f3a9 	rbit	r3, r9
 8000782:	fab3 f383 	clz	r3, r3
 8000786:	f003 031f 	and.w	r3, r3, #31
 800078a:	fa08 f303 	lsl.w	r3, r8, r3
 800078e:	4213      	tst	r3, r2
 8000790:	d058      	beq.n	8000844 <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 8000792:	2e00      	cmp	r6, #0
 8000794:	f43f ae87 	beq.w	80004a6 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000798:	69e3      	ldr	r3, [r4, #28]
 800079a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800079e:	61e3      	str	r3, [r4, #28]
 80007a0:	e681      	b.n	80004a6 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80007a2:	2600      	movs	r6, #0
 80007a4:	e7d2      	b.n	800074c <HAL_RCC_OscConfig+0x2d4>
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	10908120 	.word	0x10908120
 80007b0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007bc:	f7ff fd2e 	bl	800021c <HAL_GetTick>
 80007c0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	d4c5      	bmi.n	8000754 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007c8:	f7ff fd28 	bl	800021c <HAL_GetTick>
 80007cc:	eba0 0008 	sub.w	r0, r0, r8
 80007d0:	2864      	cmp	r0, #100	; 0x64
 80007d2:	d9f6      	bls.n	80007c2 <HAL_RCC_OscConfig+0x34a>
 80007d4:	e6b3      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d6:	bb3b      	cbnz	r3, 8000828 <HAL_RCC_OscConfig+0x3b0>
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	6223      	str	r3, [r4, #32]
 80007e0:	6a23      	ldr	r3, [r4, #32]
 80007e2:	f023 0304 	bic.w	r3, r3, #4
 80007e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007e8:	f7ff fd18 	bl	800021c <HAL_GetTick>
 80007ec:	2702      	movs	r7, #2
 80007ee:	4682      	mov	sl, r0
 80007f0:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007f2:	f04f 0801 	mov.w	r8, #1
 80007f6:	fa97 f3a7 	rbit	r3, r7
 80007fa:	fa97 f3a7 	rbit	r3, r7
 80007fe:	b373      	cbz	r3, 800085e <HAL_RCC_OscConfig+0x3e6>
 8000800:	6a22      	ldr	r2, [r4, #32]
 8000802:	fa99 f3a9 	rbit	r3, r9
 8000806:	fab3 f383 	clz	r3, r3
 800080a:	f003 031f 	and.w	r3, r3, #31
 800080e:	fa08 f303 	lsl.w	r3, r8, r3
 8000812:	4213      	tst	r3, r2
 8000814:	d0bd      	beq.n	8000792 <HAL_RCC_OscConfig+0x31a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000816:	f7ff fd01 	bl	800021c <HAL_GetTick>
 800081a:	f241 3388 	movw	r3, #5000	; 0x1388
 800081e:	eba0 000a 	sub.w	r0, r0, sl
 8000822:	4298      	cmp	r0, r3
 8000824:	d9e7      	bls.n	80007f6 <HAL_RCC_OscConfig+0x37e>
 8000826:	e68a      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000828:	2b05      	cmp	r3, #5
 800082a:	6a23      	ldr	r3, [r4, #32]
 800082c:	d103      	bne.n	8000836 <HAL_RCC_OscConfig+0x3be>
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6223      	str	r3, [r4, #32]
 8000834:	e791      	b.n	800075a <HAL_RCC_OscConfig+0x2e2>
 8000836:	f023 0301 	bic.w	r3, r3, #1
 800083a:	6223      	str	r3, [r4, #32]
 800083c:	6a23      	ldr	r3, [r4, #32]
 800083e:	f023 0304 	bic.w	r3, r3, #4
 8000842:	e78d      	b.n	8000760 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000844:	f7ff fcea 	bl	800021c <HAL_GetTick>
 8000848:	f241 3388 	movw	r3, #5000	; 0x1388
 800084c:	eba0 000a 	sub.w	r0, r0, sl
 8000850:	4298      	cmp	r0, r3
 8000852:	d98d      	bls.n	8000770 <HAL_RCC_OscConfig+0x2f8>
 8000854:	e673      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
 8000856:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800085a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800085c:	e78f      	b.n	800077e <HAL_RCC_OscConfig+0x306>
 800085e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000862:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000864:	e7cd      	b.n	8000802 <HAL_RCC_OscConfig+0x38a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000866:	4c44      	ldr	r4, [pc, #272]	; (8000978 <HAL_RCC_OscConfig+0x500>)
 8000868:	6863      	ldr	r3, [r4, #4]
 800086a:	f003 030c 	and.w	r3, r3, #12
 800086e:	2b08      	cmp	r3, #8
 8000870:	f43f ae06 	beq.w	8000480 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000874:	2a02      	cmp	r2, #2
 8000876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800087a:	d158      	bne.n	800092e <HAL_RCC_OscConfig+0x4b6>
 800087c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000880:	fab3 f383 	clz	r3, r3
 8000884:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000888:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000892:	f7ff fcc3 	bl	800021c <HAL_GetTick>
 8000896:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800089a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800089c:	2601      	movs	r6, #1
 800089e:	fa97 f3a7 	rbit	r3, r7
 80008a2:	6822      	ldr	r2, [r4, #0]
 80008a4:	fa97 f3a7 	rbit	r3, r7
 80008a8:	fab3 f383 	clz	r3, r3
 80008ac:	f003 031f 	and.w	r3, r3, #31
 80008b0:	fa06 f303 	lsl.w	r3, r6, r3
 80008b4:	4213      	tst	r3, r2
 80008b6:	d133      	bne.n	8000920 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80008bc:	f023 030f 	bic.w	r3, r3, #15
 80008c0:	4313      	orrs	r3, r2
 80008c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008c4:	6862      	ldr	r2, [r4, #4]
 80008c6:	6a2b      	ldr	r3, [r5, #32]
 80008c8:	69e9      	ldr	r1, [r5, #28]
 80008ca:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80008ce:	430b      	orrs	r3, r1
 80008d0:	4313      	orrs	r3, r2
 80008d2:	6063      	str	r3, [r4, #4]
 80008d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008d8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008ee:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80008f0:	f7ff fc94 	bl	800021c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008f4:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80008f6:	4607      	mov	r7, r0
 80008f8:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008fc:	6822      	ldr	r2, [r4, #0]
 80008fe:	fa95 f3a5 	rbit	r3, r5
 8000902:	fab3 f383 	clz	r3, r3
 8000906:	f003 031f 	and.w	r3, r3, #31
 800090a:	fa06 f303 	lsl.w	r3, r6, r3
 800090e:	4213      	tst	r3, r2
 8000910:	f47f adcd 	bne.w	80004ae <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000914:	f7ff fc82 	bl	800021c <HAL_GetTick>
 8000918:	1bc0      	subs	r0, r0, r7
 800091a:	2802      	cmp	r0, #2
 800091c:	d9ec      	bls.n	80008f8 <HAL_RCC_OscConfig+0x480>
 800091e:	e60e      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000920:	f7ff fc7c 	bl	800021c <HAL_GetTick>
 8000924:	eba0 0008 	sub.w	r0, r0, r8
 8000928:	2802      	cmp	r0, #2
 800092a:	d9b8      	bls.n	800089e <HAL_RCC_OscConfig+0x426>
 800092c:	e607      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
 800092e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000932:	fab3 f383 	clz	r3, r3
 8000936:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800093a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000944:	f7ff fc6a 	bl	800021c <HAL_GetTick>
 8000948:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800094c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800094e:	2601      	movs	r6, #1
 8000950:	fa95 f3a5 	rbit	r3, r5
 8000954:	6822      	ldr	r2, [r4, #0]
 8000956:	fa95 f3a5 	rbit	r3, r5
 800095a:	fab3 f383 	clz	r3, r3
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	fa06 f303 	lsl.w	r3, r6, r3
 8000966:	4213      	tst	r3, r2
 8000968:	f43f ada1 	beq.w	80004ae <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800096c:	f7ff fc56 	bl	800021c <HAL_GetTick>
 8000970:	1bc0      	subs	r0, r0, r7
 8000972:	2802      	cmp	r0, #2
 8000974:	d9ec      	bls.n	8000950 <HAL_RCC_OscConfig+0x4d8>
 8000976:	e5e2      	b.n	800053e <HAL_RCC_OscConfig+0xc6>
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800097c:	4911      	ldr	r1, [pc, #68]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x48>)
 800097e:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000980:	f003 020c 	and.w	r2, r3, #12
 8000984:	2a08      	cmp	r2, #8
 8000986:	d11a      	bne.n	80009be <HAL_RCC_GetSysClockFreq+0x42>
 8000988:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800098c:	fa92 f2a2 	rbit	r2, r2
 8000990:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000992:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000996:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000998:	fa90 f0a0 	rbit	r0, r0
 800099c:	fab0 f080 	clz	r0, r0
 80009a0:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80009a8:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009aa:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <HAL_RCC_GetSysClockFreq+0x50>)
 80009b0:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80009b4:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009b8:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80009ba:	4348      	muls	r0, r1
 80009bc:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000
 80009c8:	08002478 	.word	0x08002478
 80009cc:	08002488 	.word	0x08002488
 80009d0:	007a1200 	.word	0x007a1200

080009d4 <HAL_RCC_ClockConfig>:
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80009da:	4604      	mov	r4, r0
 80009dc:	b910      	cbnz	r0, 80009e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80009de:	2001      	movs	r0, #1
 80009e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80009e4:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <HAL_RCC_ClockConfig+0x144>)
 80009e6:	6813      	ldr	r3, [r2, #0]
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d32e      	bcc.n	8000a4e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009f0:	6822      	ldr	r2, [r4, #0]
 80009f2:	0791      	lsls	r1, r2, #30
 80009f4:	d436      	bmi.n	8000a64 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009f6:	07d2      	lsls	r2, r2, #31
 80009f8:	d43c      	bmi.n	8000a74 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009fa:	4a47      	ldr	r2, [pc, #284]	; (8000b18 <HAL_RCC_ClockConfig+0x144>)
 80009fc:	6813      	ldr	r3, [r2, #0]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	429d      	cmp	r5, r3
 8000a04:	d375      	bcc.n	8000af2 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	4d44      	ldr	r5, [pc, #272]	; (8000b1c <HAL_RCC_ClockConfig+0x148>)
 8000a0a:	f012 0f04 	tst.w	r2, #4
 8000a0e:	d17c      	bne.n	8000b0a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a10:	0713      	lsls	r3, r2, #28
 8000a12:	d506      	bpl.n	8000a22 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a14:	686b      	ldr	r3, [r5, #4]
 8000a16:	6922      	ldr	r2, [r4, #16]
 8000a18:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a20:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a22:	f7ff ffab 	bl	800097c <HAL_RCC_GetSysClockFreq>
 8000a26:	686b      	ldr	r3, [r5, #4]
 8000a28:	22f0      	movs	r2, #240	; 0xf0
 8000a2a:	fa92 f2a2 	rbit	r2, r2
 8000a2e:	fab2 f282 	clz	r2, r2
 8000a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a36:	40d3      	lsrs	r3, r2
 8000a38:	4a39      	ldr	r2, [pc, #228]	; (8000b20 <HAL_RCC_ClockConfig+0x14c>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	40d8      	lsrs	r0, r3
 8000a3e:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <HAL_RCC_ClockConfig+0x150>)
 8000a40:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f001 fc26 	bl	8002294 <HAL_InitTick>
  return HAL_OK;
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	f023 0307 	bic.w	r3, r3, #7
 8000a54:	430b      	orrs	r3, r1
 8000a56:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a58:	6813      	ldr	r3, [r2, #0]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d1bd      	bne.n	80009de <HAL_RCC_ClockConfig+0xa>
 8000a62:	e7c5      	b.n	80009f0 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a64:	492d      	ldr	r1, [pc, #180]	; (8000b1c <HAL_RCC_ClockConfig+0x148>)
 8000a66:	68a0      	ldr	r0, [r4, #8]
 8000a68:	684b      	ldr	r3, [r1, #4]
 8000a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a6e:	4303      	orrs	r3, r0
 8000a70:	604b      	str	r3, [r1, #4]
 8000a72:	e7c0      	b.n	80009f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a74:	6862      	ldr	r2, [r4, #4]
 8000a76:	4e29      	ldr	r6, [pc, #164]	; (8000b1c <HAL_RCC_ClockConfig+0x148>)
 8000a78:	2a01      	cmp	r2, #1
 8000a7a:	d127      	bne.n	8000acc <HAL_RCC_ClockConfig+0xf8>
 8000a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a80:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a84:	6831      	ldr	r1, [r6, #0]
 8000a86:	fa93 f3a3 	rbit	r3, r3
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	f003 031f 	and.w	r3, r3, #31
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a98:	d0a1      	beq.n	80009de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a9a:	6873      	ldr	r3, [r6, #4]
 8000a9c:	f023 0303 	bic.w	r3, r3, #3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000aa4:	f7ff fbba 	bl	800021c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000aac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000aae:	6873      	ldr	r3, [r6, #4]
 8000ab0:	6862      	ldr	r2, [r4, #4]
 8000ab2:	f003 030c 	and.w	r3, r3, #12
 8000ab6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000aba:	d09e      	beq.n	80009fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000abc:	f7ff fbae 	bl	800021c <HAL_GetTick>
 8000ac0:	1bc0      	subs	r0, r0, r7
 8000ac2:	4540      	cmp	r0, r8
 8000ac4:	d9f3      	bls.n	8000aae <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000ac6:	2003      	movs	r0, #3
}
 8000ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000acc:	2a02      	cmp	r2, #2
 8000ace:	bf0c      	ite	eq
 8000ad0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000ad4:	2302      	movne	r3, #2
 8000ad6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ada:	6830      	ldr	r0, [r6, #0]
 8000adc:	fa93 f3a3 	rbit	r3, r3
 8000ae0:	fab3 f383 	clz	r3, r3
 8000ae4:	f003 031f 	and.w	r3, r3, #31
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	4203      	tst	r3, r0
 8000af0:	e7d2      	b.n	8000a98 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f023 0307 	bic.w	r3, r3, #7
 8000af8:	432b      	orrs	r3, r5
 8000afa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000afc:	6813      	ldr	r3, [r2, #0]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	429d      	cmp	r5, r3
 8000b04:	f47f af6b 	bne.w	80009de <HAL_RCC_ClockConfig+0xa>
 8000b08:	e77d      	b.n	8000a06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b0a:	686b      	ldr	r3, [r5, #4]
 8000b0c:	68e1      	ldr	r1, [r4, #12]
 8000b0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b12:	430b      	orrs	r3, r1
 8000b14:	606b      	str	r3, [r5, #4]
 8000b16:	e77b      	b.n	8000a10 <HAL_RCC_ClockConfig+0x3c>
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	080024b8 	.word	0x080024b8
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	fa92 f2a2 	rbit	r2, r2
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b3c:	40d3      	lsrs	r3, r2
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b40:	5cd3      	ldrb	r3, [r2, r3]
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b44:	6810      	ldr	r0, [r2, #0]
}    
 8000b46:	40d8      	lsrs	r0, r3
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	080024c8 	.word	0x080024c8
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	fa92 f2a2 	rbit	r2, r2
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b6c:	40d3      	lsrs	r3, r2
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000b74:	6810      	ldr	r0, [r2, #0]
} 
 8000b76:	40d8      	lsrs	r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	080024c8 	.word	0x080024c8
 8000b84:	20000008 	.word	0x20000008

08000b88 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_RCC_GetClockConfig+0x34>)
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	f002 0203 	and.w	r2, r2, #3
 8000b94:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000b9c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000ba4:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	08db      	lsrs	r3, r3, #3
 8000baa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bae:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_RCC_GetClockConfig+0x38>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0307 	and.w	r3, r3, #7
 8000bb8:	600b      	str	r3, [r1, #0]
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bc4:	6803      	ldr	r3, [r0, #0]
{
 8000bc6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bca:	03df      	lsls	r7, r3, #15
{
 8000bcc:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bce:	d523      	bpl.n	8000c18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd0:	4d9b      	ldr	r5, [pc, #620]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000bd2:	69eb      	ldr	r3, [r5, #28]
 8000bd4:	00de      	lsls	r6, r3, #3
 8000bd6:	f100 80d7 	bmi.w	8000d88 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	69eb      	ldr	r3, [r5, #28]
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61eb      	str	r3, [r5, #28]
 8000be2:	69eb      	ldr	r3, [r5, #28]
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bec:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bee:	4f95      	ldr	r7, [pc, #596]	; (8000e44 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	05d8      	lsls	r0, r3, #23
 8000bf4:	f140 80ca 	bpl.w	8000d8c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bf8:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000bfa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000bfe:	f040 80da 	bne.w	8000db6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c02:	6a2b      	ldr	r3, [r5, #32]
 8000c04:	6862      	ldr	r2, [r4, #4]
 8000c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c0e:	b11e      	cbz	r6, 8000c18 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c10:	69eb      	ldr	r3, [r5, #28]
 8000c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c16:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c18:	6820      	ldr	r0, [r4, #0]
 8000c1a:	07c3      	lsls	r3, r0, #31
 8000c1c:	d506      	bpl.n	8000c2c <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c1e:	4a88      	ldr	r2, [pc, #544]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c20:	68a1      	ldr	r1, [r4, #8]
 8000c22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c24:	f023 0303 	bic.w	r3, r3, #3
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c2c:	0787      	lsls	r7, r0, #30
 8000c2e:	d506      	bpl.n	8000c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000c30:	4a83      	ldr	r2, [pc, #524]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c32:	68e1      	ldr	r1, [r4, #12]
 8000c34:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c36:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000c3e:	0746      	lsls	r6, r0, #29
 8000c40:	d506      	bpl.n	8000c50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000c42:	4a7f      	ldr	r2, [pc, #508]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c44:	6921      	ldr	r1, [r4, #16]
 8000c46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c48:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c50:	0685      	lsls	r5, r0, #26
 8000c52:	d506      	bpl.n	8000c62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c54:	4a7a      	ldr	r2, [pc, #488]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c56:	69e1      	ldr	r1, [r4, #28]
 8000c58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c5a:	f023 0310 	bic.w	r3, r3, #16
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c62:	0381      	lsls	r1, r0, #14
 8000c64:	d506      	bpl.n	8000c74 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000c66:	4a76      	ldr	r2, [pc, #472]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c68:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000c6a:	6853      	ldr	r3, [r2, #4]
 8000c6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c70:	430b      	orrs	r3, r1
 8000c72:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000c74:	0642      	lsls	r2, r0, #25
 8000c76:	d506      	bpl.n	8000c86 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000c78:	4a71      	ldr	r2, [pc, #452]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c7a:	6a21      	ldr	r1, [r4, #32]
 8000c7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c7e:	f023 0320 	bic.w	r3, r3, #32
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000c86:	0343      	lsls	r3, r0, #13
 8000c88:	d506      	bpl.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000c8a:	4a6d      	ldr	r2, [pc, #436]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000c98:	0707      	lsls	r7, r0, #28
 8000c9a:	d506      	bpl.n	8000caa <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000c9c:	4a68      	ldr	r2, [pc, #416]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c9e:	6961      	ldr	r1, [r4, #20]
 8000ca0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ca2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ca6:	430b      	orrs	r3, r1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000caa:	06c6      	lsls	r6, r0, #27
 8000cac:	d506      	bpl.n	8000cbc <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000cae:	4a64      	ldr	r2, [pc, #400]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cb0:	69a1      	ldr	r1, [r4, #24]
 8000cb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cb4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000cbc:	0585      	lsls	r5, r0, #22
 8000cbe:	d506      	bpl.n	8000cce <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000cc0:	4a5f      	ldr	r2, [pc, #380]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000cc4:	6853      	ldr	r3, [r2, #4]
 8000cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000cce:	0601      	lsls	r1, r0, #24
 8000cd0:	d506      	bpl.n	8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000cd2:	4a5b      	ldr	r2, [pc, #364]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cd4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000cd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000cd8:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000ce0:	05c2      	lsls	r2, r0, #23
 8000ce2:	d506      	bpl.n	8000cf2 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000ce4:	4a56      	ldr	r2, [pc, #344]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ce6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000cea:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000cee:	430b      	orrs	r3, r1
 8000cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000cf2:	04c3      	lsls	r3, r0, #19
 8000cf4:	d506      	bpl.n	8000d04 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000cf6:	4a52      	ldr	r2, [pc, #328]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000d04:	0487      	lsls	r7, r0, #18
 8000d06:	d506      	bpl.n	8000d16 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000d08:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d0a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d0c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d12:	430b      	orrs	r3, r1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000d16:	02c6      	lsls	r6, r0, #11
 8000d18:	d506      	bpl.n	8000d28 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000d1a:	4a49      	ldr	r2, [pc, #292]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d1c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000d28:	0285      	lsls	r5, r0, #10
 8000d2a:	d506      	bpl.n	8000d3a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000d2c:	4a44      	ldr	r2, [pc, #272]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d2e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000d30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000d36:	430b      	orrs	r3, r1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000d3a:	0241      	lsls	r1, r0, #9
 8000d3c:	d506      	bpl.n	8000d4c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000d3e:	4a40      	ldr	r2, [pc, #256]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d40:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000d42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000d4c:	0202      	lsls	r2, r0, #8
 8000d4e:	d506      	bpl.n	8000d5e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000d50:	4a3b      	ldr	r2, [pc, #236]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d52:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000d5e:	01c3      	lsls	r3, r0, #7
 8000d60:	d506      	bpl.n	8000d70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000d62:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d64:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000d66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000d70:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000d74:	d01c      	beq.n	8000db0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000d76:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d78:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000d7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000d84:	2000      	movs	r0, #0
 8000d86:	e013      	b.n	8000db0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e730      	b.n	8000bee <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d94:	f7ff fa42 	bl	800021c <HAL_GetTick>
 8000d98:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	05d9      	lsls	r1, r3, #23
 8000d9e:	f53f af2b 	bmi.w	8000bf8 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da2:	f7ff fa3b 	bl	800021c <HAL_GetTick>
 8000da6:	eba0 0008 	sub.w	r0, r0, r8
 8000daa:	2864      	cmp	r0, #100	; 0x64
 8000dac:	d9f5      	bls.n	8000d9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000dae:	2003      	movs	r0, #3
}
 8000db0:	b002      	add	sp, #8
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000db6:	6862      	ldr	r2, [r4, #4]
 8000db8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	f43f af20 	beq.w	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dc2:	6a29      	ldr	r1, [r5, #32]
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000dcc:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dd0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000e48 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	4472      	add	r2, lr
 8000dda:	0092      	lsls	r2, r2, #2
 8000ddc:	2701      	movs	r7, #1
 8000dde:	6017      	str	r7, [r2, #0]
 8000de0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	4473      	add	r3, lr
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000df0:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000df2:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000df4:	f57f af05 	bpl.w	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000df8:	f7ff fa10 	bl	800021c <HAL_GetTick>
 8000dfc:	f04f 0802 	mov.w	r8, #2
 8000e00:	4682      	mov	sl, r0
 8000e02:	46c1      	mov	r9, r8
 8000e04:	fa98 f3a8 	rbit	r3, r8
 8000e08:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0c:	b1a3      	cbz	r3, 8000e38 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000e0e:	6a2a      	ldr	r2, [r5, #32]
 8000e10:	fa99 f3a9 	rbit	r3, r9
 8000e14:	fab3 f383 	clz	r3, r3
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	fa07 f303 	lsl.w	r3, r7, r3
 8000e20:	4213      	tst	r3, r2
 8000e22:	f47f aeee 	bne.w	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f7ff f9f9 	bl	800021c <HAL_GetTick>
 8000e2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e2e:	eba0 000a 	sub.w	r0, r0, sl
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d9e6      	bls.n	8000e04 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000e36:	e7ba      	b.n	8000dae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000e38:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e3e:	e7e7      	b.n	8000e10 <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40007000 	.word	0x40007000
 8000e48:	10908100 	.word	0x10908100

08000e4c <HAL_TIM_Base_MspInit>:
 8000e4c:	4770      	bx	lr

08000e4e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	f042 0201 	orr.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000e60:	2000      	movs	r0, #0
 8000e62:	4770      	bx	lr

08000e64 <HAL_TIM_OC_DelayElapsedCallback>:
 8000e64:	4770      	bx	lr

08000e66 <HAL_TIM_IC_CaptureCallback>:
 8000e66:	4770      	bx	lr

08000e68 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e68:	4770      	bx	lr

08000e6a <HAL_TIM_TriggerCallback>:
 8000e6a:	4770      	bx	lr

08000e6c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e6c:	6803      	ldr	r3, [r0, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	0791      	lsls	r1, r2, #30
{
 8000e72:	b510      	push	{r4, lr}
 8000e74:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e76:	d50f      	bpl.n	8000e98 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	0792      	lsls	r2, r2, #30
 8000e7c:	d50c      	bpl.n	8000e98 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000e7e:	f06f 0202 	mvn.w	r2, #2
 8000e82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e84:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e86:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e88:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e8a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e8c:	f000 8085 	beq.w	8000f9a <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000e90:	f7ff ffe9 	bl	8000e66 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e94:	2300      	movs	r3, #0
 8000e96:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	0752      	lsls	r2, r2, #29
 8000e9e:	d510      	bpl.n	8000ec2 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	0750      	lsls	r0, r2, #29
 8000ea4:	d50d      	bpl.n	8000ec2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000ea6:	f06f 0204 	mvn.w	r2, #4
 8000eaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eac:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eae:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eb0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eb4:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eb8:	d075      	beq.n	8000fa6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000eba:	f7ff ffd4 	bl	8000e66 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	0711      	lsls	r1, r2, #28
 8000ec8:	d50f      	bpl.n	8000eea <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	0712      	lsls	r2, r2, #28
 8000ece:	d50c      	bpl.n	8000eea <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000ed0:	f06f 0208 	mvn.w	r2, #8
 8000ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ed6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ed8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000eda:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000edc:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000ede:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ee0:	d067      	beq.n	8000fb2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ee2:	f7ff ffc0 	bl	8000e66 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	691a      	ldr	r2, [r3, #16]
 8000eee:	06d0      	lsls	r0, r2, #27
 8000ef0:	d510      	bpl.n	8000f14 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000ef2:	68da      	ldr	r2, [r3, #12]
 8000ef4:	06d1      	lsls	r1, r2, #27
 8000ef6:	d50d      	bpl.n	8000f14 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000ef8:	f06f 0210 	mvn.w	r2, #16
 8000efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000efe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f00:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f02:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f06:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000f08:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f0a:	d058      	beq.n	8000fbe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f0c:	f7ff ffab 	bl	8000e66 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f10:	2300      	movs	r3, #0
 8000f12:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f14:	6823      	ldr	r3, [r4, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	07d2      	lsls	r2, r2, #31
 8000f1a:	d508      	bpl.n	8000f2e <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000f1c:	68da      	ldr	r2, [r3, #12]
 8000f1e:	07d0      	lsls	r0, r2, #31
 8000f20:	d505      	bpl.n	8000f2e <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000f22:	f06f 0201 	mvn.w	r2, #1
 8000f26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f001 f959 	bl	80021e0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	0611      	lsls	r1, r2, #24
 8000f34:	d508      	bpl.n	8000f48 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	0612      	lsls	r2, r2, #24
 8000f3a:	d505      	bpl.n	8000f48 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000f42:	4620      	mov	r0, r4
 8000f44:	f000 f8c7 	bl	80010d6 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	691a      	ldr	r2, [r3, #16]
 8000f4c:	05d0      	lsls	r0, r2, #23
 8000f4e:	d508      	bpl.n	8000f62 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	0611      	lsls	r1, r2, #24
 8000f54:	d505      	bpl.n	8000f62 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000f56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000f5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f000 f8bb 	bl	80010d8 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	0652      	lsls	r2, r2, #25
 8000f68:	d508      	bpl.n	8000f7c <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	0650      	lsls	r0, r2, #25
 8000f6e:	d505      	bpl.n	8000f7c <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f76:	4620      	mov	r0, r4
 8000f78:	f7ff ff77 	bl	8000e6a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	0691      	lsls	r1, r2, #26
 8000f82:	d522      	bpl.n	8000fca <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	0692      	lsls	r2, r2, #26
 8000f88:	d51f      	bpl.n	8000fca <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000f8a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000f8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000f90:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000f96:	f000 b89d 	b.w	80010d4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f9a:	f7ff ff63 	bl	8000e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff ff62 	bl	8000e68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fa4:	e776      	b.n	8000e94 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fa6:	f7ff ff5d 	bl	8000e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff ff5c 	bl	8000e68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fb0:	e785      	b.n	8000ebe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fb2:	f7ff ff57 	bl	8000e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f7ff ff56 	bl	8000e68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fbc:	e793      	b.n	8000ee6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fbe:	f7ff ff51 	bl	8000e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff ff50 	bl	8000e68 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fc8:	e7a2      	b.n	8000f10 <HAL_TIM_IRQHandler+0xa4>
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fcc:	4a32      	ldr	r2, [pc, #200]	; (8001098 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8000fce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fd0:	4290      	cmp	r0, r2
 8000fd2:	d012      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fd4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fd8:	d00f      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000fde:	4290      	cmp	r0, r2
 8000fe0:	d00b      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe6:	4290      	cmp	r0, r2
 8000fe8:	d007      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000fea:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d003      	beq.n	8000ffa <TIM_Base_SetConfig+0x2e>
 8000ff2:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	d115      	bne.n	8001026 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ffa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001000:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <TIM_Base_SetConfig+0xcc>)
 8001004:	4290      	cmp	r0, r2
 8001006:	d01d      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 8001008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800100c:	d01a      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 800100e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001012:	4290      	cmp	r0, r2
 8001014:	d016      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 8001016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800101a:	4290      	cmp	r0, r2
 800101c:	d012      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 800101e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001022:	4290      	cmp	r0, r2
 8001024:	d00e      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 8001026:	4a1d      	ldr	r2, [pc, #116]	; (800109c <TIM_Base_SetConfig+0xd0>)
 8001028:	4290      	cmp	r0, r2
 800102a:	d00b      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 800102c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001030:	4290      	cmp	r0, r2
 8001032:	d007      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 8001034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001038:	4290      	cmp	r0, r2
 800103a:	d003      	beq.n	8001044 <TIM_Base_SetConfig+0x78>
 800103c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001040:	4290      	cmp	r0, r2
 8001042:	d103      	bne.n	800104c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001044:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800104a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800104c:	694a      	ldr	r2, [r1, #20]
 800104e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001052:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001054:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001056:	688b      	ldr	r3, [r1, #8]
 8001058:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800105a:	680b      	ldr	r3, [r1, #0]
 800105c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <TIM_Base_SetConfig+0xcc>)
 8001060:	4298      	cmp	r0, r3
 8001062:	d013      	beq.n	800108c <TIM_Base_SetConfig+0xc0>
 8001064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001068:	4298      	cmp	r0, r3
 800106a:	d00f      	beq.n	800108c <TIM_Base_SetConfig+0xc0>
 800106c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001070:	4298      	cmp	r0, r3
 8001072:	d00b      	beq.n	800108c <TIM_Base_SetConfig+0xc0>
 8001074:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001078:	4298      	cmp	r0, r3
 800107a:	d007      	beq.n	800108c <TIM_Base_SetConfig+0xc0>
 800107c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001080:	4298      	cmp	r0, r3
 8001082:	d003      	beq.n	800108c <TIM_Base_SetConfig+0xc0>
 8001084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001088:	4298      	cmp	r0, r3
 800108a:	d101      	bne.n	8001090 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800108c:	690b      	ldr	r3, [r1, #16]
 800108e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001090:	2301      	movs	r3, #1
 8001092:	6143      	str	r3, [r0, #20]
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00
 800109c:	40014000 	.word	0x40014000

080010a0 <HAL_TIM_Base_Init>:
{ 
 80010a0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80010a2:	4604      	mov	r4, r0
 80010a4:	b1a0      	cbz	r0, 80010d0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ae:	b91b      	cbnz	r3, 80010b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010b4:	f7ff feca 	bl	8000e4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80010be:	6820      	ldr	r0, [r4, #0]
 80010c0:	1d21      	adds	r1, r4, #4
 80010c2:	f7ff ff83 	bl	8000fcc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010c6:	2301      	movs	r3, #1
 80010c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010cc:	2000      	movs	r0, #0
 80010ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010d0:	2001      	movs	r0, #1
}
 80010d2:	bd10      	pop	{r4, pc}

080010d4 <HAL_TIMEx_CommutationCallback>:
 80010d4:	4770      	bx	lr

080010d6 <HAL_TIMEx_BreakCallback>:
 80010d6:	4770      	bx	lr

080010d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80010d8:	4770      	bx	lr
	...

080010dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010e0:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010e2:	6921      	ldr	r1, [r4, #16]
 80010e4:	68a2      	ldr	r2, [r4, #8]
 80010e6:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010e8:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010ea:	430a      	orrs	r2, r1
 80010ec:	6961      	ldr	r1, [r4, #20]
 80010ee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010f0:	4977      	ldr	r1, [pc, #476]	; (80012d0 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80010f2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80010f4:	4001      	ands	r1, r0
 80010f6:	430a      	orrs	r2, r1
 80010f8:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010fa:	686a      	ldr	r2, [r5, #4]
 80010fc:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80010fe:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001100:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001104:	430a      	orrs	r2, r1
 8001106:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001108:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800110a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800110c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001110:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001112:	430a      	orrs	r2, r1
 8001114:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001116:	4a6f      	ldr	r2, [pc, #444]	; (80012d4 <UART_SetConfig+0x1f8>)
 8001118:	4295      	cmp	r5, r2
 800111a:	d112      	bne.n	8001142 <UART_SetConfig+0x66>
 800111c:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8001120:	496d      	ldr	r1, [pc, #436]	; (80012d8 <UART_SetConfig+0x1fc>)
 8001122:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001124:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800112c:	5c8a      	ldrb	r2, [r1, r2]
 800112e:	d066      	beq.n	80011fe <UART_SetConfig+0x122>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 8001130:	2a08      	cmp	r2, #8
 8001132:	d819      	bhi.n	8001168 <UART_SetConfig+0x8c>
 8001134:	e8df f002 	tbb	[pc, r2]
 8001138:	189e92c2 	.word	0x189e92c2
 800113c:	181818a9 	.word	0x181818a9
 8001140:	ac          	.byte	0xac
 8001141:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001142:	4a66      	ldr	r2, [pc, #408]	; (80012dc <UART_SetConfig+0x200>)
 8001144:	4295      	cmp	r5, r2
 8001146:	d124      	bne.n	8001192 <UART_SetConfig+0xb6>
 8001148:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800114c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800114e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001152:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001156:	f000 80a0 	beq.w	800129a <UART_SetConfig+0x1be>
 800115a:	d807      	bhi.n	800116c <UART_SetConfig+0x90>
 800115c:	2a00      	cmp	r2, #0
 800115e:	f000 80aa 	beq.w	80012b6 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001166:	d076      	beq.n	8001256 <UART_SetConfig+0x17a>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001168:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 800116a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800116c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001170:	f000 8099 	beq.w	80012a6 <UART_SetConfig+0x1ca>
 8001174:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8001178:	d1f3      	bne.n	8001162 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800117a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800117e:	d179      	bne.n	8001274 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001180:	6860      	ldr	r0, [r4, #4]
 8001182:	0843      	lsrs	r3, r0, #1
 8001184:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001188:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800118c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001190:	e054      	b.n	800123c <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001192:	4a53      	ldr	r2, [pc, #332]	; (80012e0 <UART_SetConfig+0x204>)
 8001194:	4295      	cmp	r5, r2
 8001196:	d10e      	bne.n	80011b6 <UART_SetConfig+0xda>
 8001198:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800119c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800119e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80011a2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80011a6:	d078      	beq.n	800129a <UART_SetConfig+0x1be>
 80011a8:	d9d8      	bls.n	800115c <UART_SetConfig+0x80>
 80011aa:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80011ae:	d07a      	beq.n	80012a6 <UART_SetConfig+0x1ca>
 80011b0:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80011b4:	e7e0      	b.n	8001178 <UART_SetConfig+0x9c>
 80011b6:	4a4b      	ldr	r2, [pc, #300]	; (80012e4 <UART_SetConfig+0x208>)
 80011b8:	4295      	cmp	r5, r2
 80011ba:	d10e      	bne.n	80011da <UART_SetConfig+0xfe>
 80011bc:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80011c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011c2:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80011c6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80011ca:	d066      	beq.n	800129a <UART_SetConfig+0x1be>
 80011cc:	d9c6      	bls.n	800115c <UART_SetConfig+0x80>
 80011ce:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80011d2:	d068      	beq.n	80012a6 <UART_SetConfig+0x1ca>
 80011d4:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80011d8:	e7ce      	b.n	8001178 <UART_SetConfig+0x9c>
 80011da:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <UART_SetConfig+0x20c>)
 80011dc:	4295      	cmp	r5, r2
 80011de:	d1c0      	bne.n	8001162 <UART_SetConfig+0x86>
 80011e0:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80011e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011e6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80011ea:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80011ee:	d054      	beq.n	800129a <UART_SetConfig+0x1be>
 80011f0:	d9b4      	bls.n	800115c <UART_SetConfig+0x80>
 80011f2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80011f6:	d056      	beq.n	80012a6 <UART_SetConfig+0x1ca>
 80011f8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80011fc:	e7bc      	b.n	8001178 <UART_SetConfig+0x9c>
    switch (clocksource)
 80011fe:	2a08      	cmp	r2, #8
 8001200:	d829      	bhi.n	8001256 <UART_SetConfig+0x17a>
 8001202:	a301      	add	r3, pc, #4	; (adr r3, 8001208 <UART_SetConfig+0x12c>)
 8001204:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001208:	0800122d 	.word	0x0800122d
 800120c:	08001251 	.word	0x08001251
 8001210:	08001181 	.word	0x08001181
 8001214:	08001257 	.word	0x08001257
 8001218:	080012a1 	.word	0x080012a1
 800121c:	08001257 	.word	0x08001257
 8001220:	08001257 	.word	0x08001257
 8001224:	08001257 	.word	0x08001257
 8001228:	080012ad 	.word	0x080012ad
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800122c:	f7ff fc7c 	bl	8000b28 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001230:	6861      	ldr	r1, [r4, #4]
 8001232:	084a      	lsrs	r2, r1, #1
 8001234:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001238:	fbb3 f3f1 	udiv	r3, r3, r1
 800123c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800123e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001240:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8001244:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001246:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800124a:	4313      	orrs	r3, r2
 800124c:	60cb      	str	r3, [r1, #12]
 800124e:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001250:	f7ff fc82 	bl	8000b58 <HAL_RCC_GetPCLK2Freq>
 8001254:	e7ec      	b.n	8001230 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8001256:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001258:	2300      	movs	r3, #0
 800125a:	e7f1      	b.n	8001240 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800125c:	f7ff fc7c 	bl	8000b58 <HAL_RCC_GetPCLK2Freq>
 8001260:	6863      	ldr	r3, [r4, #4]
 8001262:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001266:	fbb0 f0f3 	udiv	r0, r0, r3
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <UART_SetConfig+0x1f8>)
 800126c:	b280      	uxth	r0, r0
 800126e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001270:	2000      	movs	r0, #0
        break;
 8001272:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001274:	6862      	ldr	r2, [r4, #4]
 8001276:	0853      	lsrs	r3, r2, #1
 8001278:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800127c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001280:	fbb3 f3f2 	udiv	r3, r3, r2
 8001284:	b29b      	uxth	r3, r3
 8001286:	60eb      	str	r3, [r5, #12]
 8001288:	e7f2      	b.n	8001270 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800128a:	f7ff fb77 	bl	800097c <HAL_RCC_GetSysClockFreq>
 800128e:	e017      	b.n	80012c0 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001290:	6862      	ldr	r2, [r4, #4]
 8001292:	0853      	lsrs	r3, r2, #1
 8001294:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001298:	e7f2      	b.n	8001280 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800129a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800129e:	d1f4      	bne.n	800128a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012a0:	f7ff fb6c 	bl	800097c <HAL_RCC_GetSysClockFreq>
 80012a4:	e7c4      	b.n	8001230 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012aa:	d1f1      	bne.n	8001290 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80012ac:	6860      	ldr	r0, [r4, #4]
 80012ae:	0843      	lsrs	r3, r0, #1
 80012b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012b4:	e76a      	b.n	800118c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ba:	d0b7      	beq.n	800122c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80012bc:	f7ff fc34 	bl	8000b28 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80012c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80012ca:	b280      	uxth	r0, r0
 80012cc:	60e8      	str	r0, [r5, #12]
 80012ce:	e7cf      	b.n	8001270 <UART_SetConfig+0x194>
 80012d0:	efff69f3 	.word	0xefff69f3
 80012d4:	40013800 	.word	0x40013800
 80012d8:	08002498 	.word	0x08002498
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40004800 	.word	0x40004800
 80012e4:	40004c00 	.word	0x40004c00
 80012e8:	40005000 	.word	0x40005000

080012ec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012ee:	07da      	lsls	r2, r3, #31
{
 80012f0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80012f2:	d506      	bpl.n	8001302 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80012f4:	6801      	ldr	r1, [r0, #0]
 80012f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80012f8:	684a      	ldr	r2, [r1, #4]
 80012fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80012fe:	4322      	orrs	r2, r4
 8001300:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001302:	079c      	lsls	r4, r3, #30
 8001304:	d506      	bpl.n	8001314 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001306:	6801      	ldr	r1, [r0, #0]
 8001308:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001310:	4322      	orrs	r2, r4
 8001312:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d506      	bpl.n	8001326 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001318:	6801      	ldr	r1, [r0, #0]
 800131a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800131c:	684a      	ldr	r2, [r1, #4]
 800131e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001322:	4322      	orrs	r2, r4
 8001324:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001326:	071a      	lsls	r2, r3, #28
 8001328:	d506      	bpl.n	8001338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800132a:	6801      	ldr	r1, [r0, #0]
 800132c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800132e:	684a      	ldr	r2, [r1, #4]
 8001330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001334:	4322      	orrs	r2, r4
 8001336:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001338:	06dc      	lsls	r4, r3, #27
 800133a:	d506      	bpl.n	800134a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800133c:	6801      	ldr	r1, [r0, #0]
 800133e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001340:	688a      	ldr	r2, [r1, #8]
 8001342:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001346:	4322      	orrs	r2, r4
 8001348:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800134a:	0699      	lsls	r1, r3, #26
 800134c:	d506      	bpl.n	800135c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800134e:	6801      	ldr	r1, [r0, #0]
 8001350:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001352:	688a      	ldr	r2, [r1, #8]
 8001354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001358:	4322      	orrs	r2, r4
 800135a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800135c:	065a      	lsls	r2, r3, #25
 800135e:	d50f      	bpl.n	8001380 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001360:	6801      	ldr	r1, [r0, #0]
 8001362:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001364:	684a      	ldr	r2, [r1, #4]
 8001366:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800136a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800136c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001370:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001372:	d105      	bne.n	8001380 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001374:	684a      	ldr	r2, [r1, #4]
 8001376:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001378:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800137c:	4322      	orrs	r2, r4
 800137e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001380:	061b      	lsls	r3, r3, #24
 8001382:	d506      	bpl.n	8001392 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001384:	6802      	ldr	r2, [r0, #0]
 8001386:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001388:	6853      	ldr	r3, [r2, #4]
 800138a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800138e:	430b      	orrs	r3, r1
 8001390:	6053      	str	r3, [r2, #4]
 8001392:	bd10      	pop	{r4, pc}

08001394 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001398:	9d06      	ldr	r5, [sp, #24]
 800139a:	4604      	mov	r4, r0
 800139c:	460f      	mov	r7, r1
 800139e:	4616      	mov	r6, r2
 80013a0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80013a2:	6821      	ldr	r1, [r4, #0]
 80013a4:	69ca      	ldr	r2, [r1, #28]
 80013a6:	ea37 0302 	bics.w	r3, r7, r2
 80013aa:	bf0c      	ite	eq
 80013ac:	2201      	moveq	r2, #1
 80013ae:	2200      	movne	r2, #0
 80013b0:	42b2      	cmp	r2, r6
 80013b2:	d002      	beq.n	80013ba <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80013b4:	2000      	movs	r0, #0
}
 80013b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80013ba:	1c6b      	adds	r3, r5, #1
 80013bc:	d0f2      	beq.n	80013a4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013be:	b99d      	cbnz	r5, 80013e8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80013c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80013d2:	2320      	movs	r3, #32
 80013d4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80013d8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80013dc:	2300      	movs	r3, #0
 80013de:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80013e2:	2003      	movs	r0, #3
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80013e8:	f7fe ff18 	bl	800021c <HAL_GetTick>
 80013ec:	eba0 0008 	sub.w	r0, r0, r8
 80013f0:	4285      	cmp	r5, r0
 80013f2:	d2d6      	bcs.n	80013a2 <UART_WaitOnFlagUntilTimeout+0xe>
 80013f4:	e7e4      	b.n	80013c0 <UART_WaitOnFlagUntilTimeout+0x2c>

080013f6 <UART_CheckIdleState>:
{
 80013f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80013f8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013fa:	2600      	movs	r6, #0
 80013fc:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80013fe:	f7fe ff0d 	bl	800021c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001408:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800140a:	d417      	bmi.n	800143c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	075b      	lsls	r3, r3, #29
 8001412:	d50a      	bpl.n	800142a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2200      	movs	r2, #0
 800141c:	462b      	mov	r3, r5
 800141e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff ffb6 	bl	8001394 <UART_WaitOnFlagUntilTimeout>
 8001428:	b9a0      	cbnz	r0, 8001454 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800142a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800142c:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800142e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001432:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001436:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800143a:	e00c      	b.n	8001456 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800143c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4632      	mov	r2, r6
 8001444:	4603      	mov	r3, r0
 8001446:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff ffa2 	bl	8001394 <UART_WaitOnFlagUntilTimeout>
 8001450:	2800      	cmp	r0, #0
 8001452:	d0db      	beq.n	800140c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001454:	2003      	movs	r0, #3
}
 8001456:	b002      	add	sp, #8
 8001458:	bd70      	pop	{r4, r5, r6, pc}

0800145a <HAL_UART_Init>:
{
 800145a:	b510      	push	{r4, lr}
  if(huart == NULL)
 800145c:	4604      	mov	r4, r0
 800145e:	b360      	cbz	r0, 80014ba <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001460:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001464:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001468:	b91b      	cbnz	r3, 8001472 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800146a:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800146e:	f000 fee1 	bl	8002234 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001472:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001474:	2324      	movs	r3, #36	; 0x24
 8001476:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff fe2a 	bl	80010dc <UART_SetConfig>
 8001488:	2801      	cmp	r0, #1
 800148a:	d016      	beq.n	80014ba <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800148c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800148e:	b113      	cbz	r3, 8001496 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001490:	4620      	mov	r0, r4
 8001492:	f7ff ff2b 	bl	80012ec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800149e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014a6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80014ae:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80014b6:	f7ff bf9e 	b.w	80013f6 <UART_CheckIdleState>
}
 80014ba:	2001      	movs	r0, #1
 80014bc:	bd10      	pop	{r4, pc}

080014be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80014be:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80014c0:	f000 fbda 	bl	8001c78 <vTaskStartScheduler>
  
  return osOK;
}
 80014c4:	2000      	movs	r0, #0
 80014c6:	bd08      	pop	{r3, pc}

080014c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80014c8:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014ca:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80014ce:	8a02      	ldrh	r2, [r0, #16]
{
 80014d0:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014d2:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80014d6:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80014d8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80014da:	bf14      	ite	ne
 80014dc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80014de:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80014e0:	a803      	add	r0, sp, #12
 80014e2:	9001      	str	r0, [sp, #4]
 80014e4:	9400      	str	r4, [sp, #0]
 80014e6:	4628      	mov	r0, r5
 80014e8:	f000 faf6 	bl	8001ad8 <xTaskCreate>
 80014ec:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80014ee:	bf0c      	ite	eq
 80014f0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80014f2:	2000      	movne	r0, #0
}
 80014f4:	b005      	add	sp, #20
 80014f6:	bd30      	pop	{r4, r5, pc}

080014f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80014f8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80014fa:	2800      	cmp	r0, #0
 80014fc:	bf08      	it	eq
 80014fe:	2001      	moveq	r0, #1
 8001500:	f000 fd08 	bl	8001f14 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001504:	2000      	movs	r0, #0
 8001506:	bd08      	pop	{r3, pc}

08001508 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001508:	f100 0308 	add.w	r3, r0, #8
 800150c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800150e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001512:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001514:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001516:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001518:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800151a:	6003      	str	r3, [r0, #0]
 800151c:	4770      	bx	lr

0800151e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800151e:	2300      	movs	r3, #0
 8001520:	6103      	str	r3, [r0, #16]
 8001522:	4770      	bx	lr

08001524 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001524:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001526:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001530:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001532:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001534:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001536:	3301      	adds	r3, #1
 8001538:	6003      	str	r3, [r0, #0]
 800153a:	4770      	bx	lr

0800153c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800153c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800153e:	1c53      	adds	r3, r2, #1
{
 8001540:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001542:	d10a      	bne.n	800155a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001544:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800154a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800154c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800154e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001550:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001552:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001554:	3301      	adds	r3, #1
 8001556:	6003      	str	r3, [r0, #0]
 8001558:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800155a:	f100 0308 	add.w	r3, r0, #8
 800155e:	685c      	ldr	r4, [r3, #4]
 8001560:	6825      	ldr	r5, [r4, #0]
 8001562:	42aa      	cmp	r2, r5
 8001564:	d3ef      	bcc.n	8001546 <vListInsert+0xa>
 8001566:	4623      	mov	r3, r4
 8001568:	e7f9      	b.n	800155e <vListInsert+0x22>

0800156a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800156a:	6841      	ldr	r1, [r0, #4]
 800156c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800156e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001570:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001572:	6882      	ldr	r2, [r0, #8]
 8001574:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800157a:	bf08      	it	eq
 800157c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800157e:	2200      	movs	r2, #0
 8001580:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	3801      	subs	r0, #1
 8001586:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001588:	4770      	bx	lr
	...

0800158c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <prvTaskExitError+0x2c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	d008      	beq.n	80015a6 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001598:	f383 8811 	msr	BASEPRI, r3
 800159c:	f3bf 8f6f 	isb	sy
 80015a0:	f3bf 8f4f 	dsb	sy
 80015a4:	e7fe      	b.n	80015a4 <prvTaskExitError+0x18>
 80015a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015aa:	f383 8811 	msr	BASEPRI, r3
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f3bf 8f4f 	dsb	sy
 80015b6:	e7fe      	b.n	80015b6 <prvTaskExitError+0x2a>
 80015b8:	20000004 	.word	0x20000004

080015bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <prvPortStartFirstTask+0x1c>)
 80015be:	6800      	ldr	r0, [r0, #0]
 80015c0:	6800      	ldr	r0, [r0, #0]
 80015c2:	f380 8808 	msr	MSP, r0
 80015c6:	b662      	cpsie	i
 80015c8:	b661      	cpsie	f
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	f3bf 8f6f 	isb	sy
 80015d2:	df00      	svc	0
 80015d4:	bf00      	nop
 80015d6:	0000      	.short	0x0000
 80015d8:	e000ed08 	.word	0xe000ed08

080015dc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80015dc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80015ec <vPortEnableVFP+0x10>
 80015e0:	6801      	ldr	r1, [r0, #0]
 80015e2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80015e6:	6001      	str	r1, [r0, #0]
 80015e8:	4770      	bx	lr
 80015ea:	0000      	.short	0x0000
 80015ec:	e000ed88 	.word	0xe000ed88

080015f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80015f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <pxPortInitialiseStack+0x28>)
 80015fa:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80015fe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001602:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001606:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800160a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800160e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001612:	3844      	subs	r0, #68	; 0x44
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	0800158d 	.word	0x0800158d
 800161c:	00000000 	.word	0x00000000

08001620 <SVC_Handler>:
	__asm volatile (
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <pxCurrentTCBConst2>)
 8001622:	6819      	ldr	r1, [r3, #0]
 8001624:	6808      	ldr	r0, [r1, #0]
 8001626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800162a:	f380 8809 	msr	PSP, r0
 800162e:	f3bf 8f6f 	isb	sy
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f380 8811 	msr	BASEPRI, r0
 800163a:	4770      	bx	lr
 800163c:	f3af 8000 	nop.w

08001640 <pxCurrentTCBConst2>:
 8001640:	20000c48 	.word	0x20000c48

08001644 <vPortEnterCritical>:
 8001644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001648:	f383 8811 	msr	BASEPRI, r3
 800164c:	f3bf 8f6f 	isb	sy
 8001650:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001654:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <vPortEnterCritical+0x3c>)
 8001656:	6813      	ldr	r3, [r2, #0]
 8001658:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800165a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800165c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800165e:	d10d      	bne.n	800167c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <vPortEnterCritical+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001668:	d008      	beq.n	800167c <vPortEnterCritical+0x38>
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	f383 8811 	msr	BASEPRI, r3
 8001672:	f3bf 8f6f 	isb	sy
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	e7fe      	b.n	800167a <vPortEnterCritical+0x36>
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000004 	.word	0x20000004
 8001684:	e000ed04 	.word	0xe000ed04

08001688 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <vPortExitCritical+0x24>)
 800168a:	6813      	ldr	r3, [r2, #0]
 800168c:	b943      	cbnz	r3, 80016a0 <vPortExitCritical+0x18>
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	e7fe      	b.n	800169e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80016a0:	3b01      	subs	r3, #1
 80016a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80016a4:	b90b      	cbnz	r3, 80016aa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80016a6:	f383 8811 	msr	BASEPRI, r3
 80016aa:	4770      	bx	lr
 80016ac:	20000004 	.word	0x20000004

080016b0 <PendSV_Handler>:
	__asm volatile
 80016b0:	f3ef 8009 	mrs	r0, PSP
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <pxCurrentTCBConst>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	f01e 0f10 	tst.w	lr, #16
 80016c0:	bf08      	it	eq
 80016c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80016c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ca:	6010      	str	r0, [r2, #0]
 80016cc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80016d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80016d4:	f380 8811 	msr	BASEPRI, r0
 80016d8:	f3bf 8f4f 	dsb	sy
 80016dc:	f3bf 8f6f 	isb	sy
 80016e0:	f000 fc76 	bl	8001fd0 <vTaskSwitchContext>
 80016e4:	f04f 0000 	mov.w	r0, #0
 80016e8:	f380 8811 	msr	BASEPRI, r0
 80016ec:	bc08      	pop	{r3}
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	6808      	ldr	r0, [r1, #0]
 80016f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016f6:	f01e 0f10 	tst.w	lr, #16
 80016fa:	bf08      	it	eq
 80016fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001700:	f380 8809 	msr	PSP, r0
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w

08001710 <pxCurrentTCBConst>:
 8001710:	20000c48 	.word	0x20000c48

08001714 <SysTick_Handler>:
{
 8001714:	b508      	push	{r3, lr}
	__asm volatile
 8001716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800171a:	f383 8811 	msr	BASEPRI, r3
 800171e:	f3bf 8f6f 	isb	sy
 8001722:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001726:	f000 faeb 	bl	8001d00 <xTaskIncrementTick>
 800172a:	b118      	cbz	r0, 8001734 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <SysTick_Handler+0x28>)
 800172e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001732:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001734:	2300      	movs	r3, #0
 8001736:	f383 8811 	msr	BASEPRI, r3
 800173a:	bd08      	pop	{r3, pc}
 800173c:	e000ed04 	.word	0xe000ed04

08001740 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <vPortSetupTimerInterrupt+0x1c>)
 8001742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fbb3 f3f2 	udiv	r3, r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <vPortSetupTimerInterrupt+0x20>)
 800174e:	3b01      	subs	r3, #1
 8001750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <vPortSetupTimerInterrupt+0x24>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	e000e014 	.word	0xe000e014
 8001764:	e000e010 	.word	0xe000e010

08001768 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <xPortStartScheduler+0xc8>)
 800176a:	4a32      	ldr	r2, [pc, #200]	; (8001834 <xPortStartScheduler+0xcc>)
{
 800176c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	4291      	cmp	r1, r2
 8001772:	d108      	bne.n	8001786 <xPortStartScheduler+0x1e>
	__asm volatile
 8001774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001778:	f383 8811 	msr	BASEPRI, r3
 800177c:	f3bf 8f6f 	isb	sy
 8001780:	f3bf 8f4f 	dsb	sy
 8001784:	e7fe      	b.n	8001784 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <xPortStartScheduler+0xd0>)
 800178a:	429a      	cmp	r2, r3
 800178c:	d108      	bne.n	80017a0 <xPortStartScheduler+0x38>
 800178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001792:	f383 8811 	msr	BASEPRI, r3
 8001796:	f3bf 8f6f 	isb	sy
 800179a:	f3bf 8f4f 	dsb	sy
 800179e:	e7fe      	b.n	800179e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <xPortStartScheduler+0xd4>)
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80017ac:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80017b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80017ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017be:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80017c0:	4b20      	ldr	r3, [pc, #128]	; (8001844 <xPortStartScheduler+0xdc>)
 80017c2:	2207      	movs	r2, #7
 80017c4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80017c6:	2100      	movs	r1, #0
 80017c8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80017cc:	0600      	lsls	r0, r0, #24
 80017ce:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 80017d2:	d423      	bmi.n	800181c <xPortStartScheduler+0xb4>
 80017d4:	b101      	cbz	r1, 80017d8 <xPortStartScheduler+0x70>
 80017d6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80017dc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80017e0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80017e2:	9b01      	ldr	r3, [sp, #4]
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <xPortStartScheduler+0xd4>)
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80017ea:	4b17      	ldr	r3, [pc, #92]	; (8001848 <xPortStartScheduler+0xe0>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80017f2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80017fa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80017fc:	f7ff ffa0 	bl	8001740 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <xPortStartScheduler+0xe4>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001806:	f7ff fee9 	bl	80015dc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <xPortStartScheduler+0xe8>)
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001812:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001814:	f7ff fed2 	bl	80015bc <prvPortStartFirstTask>
	prvTaskExitError();
 8001818:	f7ff feb8 	bl	800158c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800181c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001820:	0052      	lsls	r2, r2, #1
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f88d 2003 	strb.w	r2, [sp, #3]
 8001828:	2101      	movs	r1, #1
 800182a:	4622      	mov	r2, r4
 800182c:	e7cc      	b.n	80017c8 <xPortStartScheduler+0x60>
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00
 8001834:	410fc271 	.word	0x410fc271
 8001838:	410fc270 	.word	0x410fc270
 800183c:	e000e400 	.word	0xe000e400
 8001840:	20000028 	.word	0x20000028
 8001844:	2000002c 	.word	0x2000002c
 8001848:	e000ed20 	.word	0xe000ed20
 800184c:	20000004 	.word	0x20000004
 8001850:	e000ef34 	.word	0xe000ef34

08001854 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001854:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <prvInsertBlockIntoFreeList+0x40>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4282      	cmp	r2, r0
 800185c:	d318      	bcc.n	8001890 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800185e:	685c      	ldr	r4, [r3, #4]
 8001860:	1919      	adds	r1, r3, r4
 8001862:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001864:	bf01      	itttt	eq
 8001866:	6841      	ldreq	r1, [r0, #4]
 8001868:	4618      	moveq	r0, r3
 800186a:	1909      	addeq	r1, r1, r4
 800186c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800186e:	6844      	ldr	r4, [r0, #4]
 8001870:	1901      	adds	r1, r0, r4
 8001872:	428a      	cmp	r2, r1
 8001874:	d107      	bne.n	8001886 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <prvInsertBlockIntoFreeList+0x44>)
 8001878:	6809      	ldr	r1, [r1, #0]
 800187a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800187c:	bf1f      	itttt	ne
 800187e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001880:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001882:	1909      	addne	r1, r1, r4
 8001884:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001886:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001888:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800188a:	bf18      	it	ne
 800188c:	6018      	strne	r0, [r3, #0]
 800188e:	bd10      	pop	{r4, pc}
 8001890:	4613      	mov	r3, r2
 8001892:	e7e1      	b.n	8001858 <prvInsertBlockIntoFreeList+0x4>
 8001894:	20000c40 	.word	0x20000c40
 8001898:	20000030 	.word	0x20000030

0800189c <pvPortMalloc>:
{
 800189c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018a0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80018a2:	f000 fa25 	bl	8001cf0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80018a6:	493e      	ldr	r1, [pc, #248]	; (80019a0 <pvPortMalloc+0x104>)
 80018a8:	4d3e      	ldr	r5, [pc, #248]	; (80019a4 <pvPortMalloc+0x108>)
 80018aa:	680b      	ldr	r3, [r1, #0]
 80018ac:	bb0b      	cbnz	r3, 80018f2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80018b0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80018b2:	bf1f      	itttt	ne
 80018b4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018b6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80018ba:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 80018be:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018c0:	bf14      	ite	ne
 80018c2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80018c4:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80018c8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80018ca:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018cc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80018d0:	4e36      	ldr	r6, [pc, #216]	; (80019ac <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80018d2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80018d4:	2000      	movs	r0, #0
 80018d6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80018d8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80018da:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80018dc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80018de:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80018e0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80018e4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018e6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <pvPortMalloc+0x118>)
 80018ea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80018ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80018f0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80018f2:	682f      	ldr	r7, [r5, #0]
 80018f4:	4227      	tst	r7, r4
 80018f6:	d116      	bne.n	8001926 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	d041      	beq.n	8001980 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80018fc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001900:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001902:	bf1c      	itt	ne
 8001904:	f023 0307 	bicne.w	r3, r3, #7
 8001908:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800190a:	b163      	cbz	r3, 8001926 <pvPortMalloc+0x8a>
 800190c:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <pvPortMalloc+0x118>)
 800190e:	6816      	ldr	r6, [r2, #0]
 8001910:	42b3      	cmp	r3, r6
 8001912:	4690      	mov	r8, r2
 8001914:	d807      	bhi.n	8001926 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <pvPortMalloc+0x110>)
 8001918:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800191a:	6868      	ldr	r0, [r5, #4]
 800191c:	4283      	cmp	r3, r0
 800191e:	d804      	bhi.n	800192a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001920:	6809      	ldr	r1, [r1, #0]
 8001922:	428d      	cmp	r5, r1
 8001924:	d107      	bne.n	8001936 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001926:	2400      	movs	r4, #0
 8001928:	e02a      	b.n	8001980 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800192a:	682c      	ldr	r4, [r5, #0]
 800192c:	2c00      	cmp	r4, #0
 800192e:	d0f7      	beq.n	8001920 <pvPortMalloc+0x84>
 8001930:	462a      	mov	r2, r5
 8001932:	4625      	mov	r5, r4
 8001934:	e7f1      	b.n	800191a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001936:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001938:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800193a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800193c:	1ac2      	subs	r2, r0, r3
 800193e:	2a10      	cmp	r2, #16
 8001940:	d90f      	bls.n	8001962 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001942:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001944:	0741      	lsls	r1, r0, #29
 8001946:	d008      	beq.n	800195a <pvPortMalloc+0xbe>
 8001948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	e7fe      	b.n	8001958 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800195a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800195c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800195e:	f7ff ff79 	bl	8001854 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001962:	4913      	ldr	r1, [pc, #76]	; (80019b0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001964:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001966:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001968:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800196a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800196c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800196e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001972:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001976:	bf38      	it	cc
 8001978:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800197a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800197c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800197e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001980:	f000 fa50 	bl	8001e24 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001984:	0763      	lsls	r3, r4, #29
 8001986:	d008      	beq.n	800199a <pvPortMalloc+0xfe>
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	e7fe      	b.n	8001998 <pvPortMalloc+0xfc>
}
 800199a:	4620      	mov	r0, r4
 800199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019a0:	20000030 	.word	0x20000030
 80019a4:	20000c34 	.word	0x20000c34
 80019a8:	20000034 	.word	0x20000034
 80019ac:	20000c40 	.word	0x20000c40
 80019b0:	20000c3c 	.word	0x20000c3c
 80019b4:	20000c38 	.word	0x20000c38

080019b8 <vPortFree>:
{
 80019b8:	b510      	push	{r4, lr}
	if( pv != NULL )
 80019ba:	4604      	mov	r4, r0
 80019bc:	b370      	cbz	r0, 8001a1c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <vPortFree+0x68>)
 80019c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4213      	tst	r3, r2
 80019c8:	d108      	bne.n	80019dc <vPortFree+0x24>
 80019ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ce:	f383 8811 	msr	BASEPRI, r3
 80019d2:	f3bf 8f6f 	isb	sy
 80019d6:	f3bf 8f4f 	dsb	sy
 80019da:	e7fe      	b.n	80019da <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80019dc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80019e0:	b141      	cbz	r1, 80019f4 <vPortFree+0x3c>
 80019e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e6:	f383 8811 	msr	BASEPRI, r3
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	e7fe      	b.n	80019f2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019f4:	ea23 0302 	bic.w	r3, r3, r2
 80019f8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80019fc:	f000 f978 	bl	8001cf0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a00:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <vPortFree+0x6c>)
 8001a02:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001a06:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a08:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a0c:	440b      	add	r3, r1
 8001a0e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a10:	f7ff ff20 	bl	8001854 <prvInsertBlockIntoFreeList>
}
 8001a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001a18:	f000 ba04 	b.w	8001e24 <xTaskResumeAll>
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000c34 	.word	0x20000c34
 8001a24:	20000c38 	.word	0x20000c38

08001a28 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <prvResetNextTaskUnblockTime+0x1c>)
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <prvResetNextTaskUnblockTime+0x20>)
 8001a30:	b919      	cbnz	r1, 8001a3a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a3e:	68d2      	ldr	r2, [r2, #12]
 8001a40:	6852      	ldr	r2, [r2, #4]
 8001a42:	e7f8      	b.n	8001a36 <prvResetNextTaskUnblockTime+0xe>
 8001a44:	20000c4c 	.word	0x20000c4c
 8001a48:	20000d24 	.word	0x20000d24

08001a4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a50:	4e1b      	ldr	r6, [pc, #108]	; (8001ac0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001a52:	681d      	ldr	r5, [r3, #0]
{
 8001a54:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a56:	6830      	ldr	r0, [r6, #0]
 8001a58:	3004      	adds	r0, #4
{
 8001a5a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a5c:	f7ff fd85 	bl	800156a <uxListRemove>
 8001a60:	4633      	mov	r3, r6
 8001a62:	b940      	cbnz	r0, 8001a76 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001a64:	6831      	ldr	r1, [r6, #0]
 8001a66:	4e17      	ldr	r6, [pc, #92]	; (8001ac4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001a68:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001a6a:	6832      	ldr	r2, [r6, #0]
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	4088      	lsls	r0, r1
 8001a70:	ea22 0200 	bic.w	r2, r2, r0
 8001a74:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a76:	1c62      	adds	r2, r4, #1
 8001a78:	d107      	bne.n	8001a8a <prvAddCurrentTaskToDelayedList+0x3e>
 8001a7a:	b137      	cbz	r7, 8001a8a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001a80:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a86:	f7ff bd4d 	b.w	8001524 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001a8a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a8c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001a8e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a90:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001a92:	d907      	bls.n	8001aa4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <prvAddCurrentTaskToDelayedList+0x80>)
 8001a96:	6810      	ldr	r0, [r2, #0]
 8001a98:	6819      	ldr	r1, [r3, #0]
}
 8001a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a9e:	3104      	adds	r1, #4
 8001aa0:	f7ff bd4c 	b.w	800153c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001aa6:	6810      	ldr	r0, [r2, #0]
 8001aa8:	6819      	ldr	r1, [r3, #0]
 8001aaa:	3104      	adds	r1, #4
 8001aac:	f7ff fd46 	bl	800153c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001ab6:	bf38      	it	cc
 8001ab8:	601c      	strcc	r4, [r3, #0]
 8001aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001abc:	20000d6c 	.word	0x20000d6c
 8001ac0:	20000c48 	.word	0x20000c48
 8001ac4:	20000cf4 	.word	0x20000cf4
 8001ac8:	20000d44 	.word	0x20000d44
 8001acc:	20000c50 	.word	0x20000c50
 8001ad0:	20000c4c 	.word	0x20000c4c
 8001ad4:	20000d24 	.word	0x20000d24

08001ad8 <xTaskCreate>:
	{
 8001ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001adc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001ae0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ae2:	4650      	mov	r0, sl
	{
 8001ae4:	460f      	mov	r7, r1
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aea:	f7ff fed7 	bl	800189c <pvPortMalloc>
			if( pxStack != NULL )
 8001aee:	4605      	mov	r5, r0
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f000 8096 	beq.w	8001c22 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001af6:	2054      	movs	r0, #84	; 0x54
 8001af8:	f7ff fed0 	bl	800189c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001afc:	4604      	mov	r4, r0
 8001afe:	2800      	cmp	r0, #0
 8001b00:	f000 808c 	beq.w	8001c1c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b04:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001b08:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b0a:	4455      	add	r5, sl
 8001b0c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001b0e:	f025 0a07 	bic.w	sl, r5, #7
 8001b12:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001b16:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b18:	7859      	ldrb	r1, [r3, #1]
 8001b1a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001b1e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001b22:	b109      	cbz	r1, 8001b28 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b24:	42bb      	cmp	r3, r7
 8001b26:	d1f7      	bne.n	8001b18 <xTaskCreate+0x40>
 8001b28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001b2a:	2d06      	cmp	r5, #6
 8001b2c:	bf28      	it	cs
 8001b2e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b30:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b34:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001b36:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001b38:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b3a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b3c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001b40:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b44:	f7ff fceb 	bl	800151e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b48:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b4c:	f104 0018 	add.w	r0, r4, #24
 8001b50:	f7ff fce5 	bl	800151e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001b54:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b58:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b5a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b5c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b5e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b62:	464a      	mov	r2, r9
 8001b64:	4641      	mov	r1, r8
 8001b66:	4650      	mov	r0, sl
 8001b68:	f7ff fd42 	bl	80015f0 <pxPortInitialiseStack>
 8001b6c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001b6e:	b106      	cbz	r6, 8001b72 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b70:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001b72:	f7ff fd67 	bl	8001644 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001b76:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001b78:	4e32      	ldr	r6, [pc, #200]	; (8001c44 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001c70 <xTaskCreate+0x198>
 8001b80:	3201      	adds	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001b84:	6835      	ldr	r5, [r6, #0]
 8001b86:	2d00      	cmp	r5, #0
 8001b88:	d14e      	bne.n	8001c28 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001b8a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d11d      	bne.n	8001bce <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b92:	eb08 0005 	add.w	r0, r8, r5
 8001b96:	3514      	adds	r5, #20
 8001b98:	f7ff fcb6 	bl	8001508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b9c:	2d8c      	cmp	r5, #140	; 0x8c
 8001b9e:	d1f8      	bne.n	8001b92 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001ba0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001c74 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001ba4:	4d28      	ldr	r5, [pc, #160]	; (8001c48 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001ba6:	4648      	mov	r0, r9
 8001ba8:	f7ff fcae 	bl	8001508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001bac:	4628      	mov	r0, r5
 8001bae:	f7ff fcab 	bl	8001508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001bb2:	4826      	ldr	r0, [pc, #152]	; (8001c4c <xTaskCreate+0x174>)
 8001bb4:	f7ff fca8 	bl	8001508 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001bb8:	4825      	ldr	r0, [pc, #148]	; (8001c50 <xTaskCreate+0x178>)
 8001bba:	f7ff fca5 	bl	8001508 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001bbe:	4825      	ldr	r0, [pc, #148]	; (8001c54 <xTaskCreate+0x17c>)
 8001bc0:	f7ff fca2 	bl	8001508 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <xTaskCreate+0x180>)
 8001bc6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <xTaskCreate+0x184>)
 8001bcc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001bce:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001bd0:	4924      	ldr	r1, [pc, #144]	; (8001c64 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001bd2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001bd4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001bda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bdc:	2501      	movs	r5, #1
 8001bde:	fa05 f302 	lsl.w	r3, r5, r2
 8001be2:	4303      	orrs	r3, r0
 8001be4:	2014      	movs	r0, #20
 8001be6:	600b      	str	r3, [r1, #0]
 8001be8:	fb00 8002 	mla	r0, r0, r2, r8
 8001bec:	4639      	mov	r1, r7
 8001bee:	f7ff fc99 	bl	8001524 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001bf2:	f7ff fd49 	bl	8001688 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <xTaskCreate+0x190>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b163      	cbz	r3, 8001c16 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bfc:	6833      	ldr	r3, [r6, #0]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d207      	bcs.n	8001c16 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <xTaskCreate+0x194>)
 8001c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	f3bf 8f4f 	dsb	sy
 8001c12:	f3bf 8f6f 	isb	sy
	}
 8001c16:	4628      	mov	r0, r5
 8001c18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f7ff fecb 	bl	80019b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001c26:	e7f6      	b.n	8001c16 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <xTaskCreate+0x190>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ce      	bne.n	8001bce <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c30:	6833      	ldr	r3, [r6, #0]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c36:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001c38:	bf98      	it	ls
 8001c3a:	6034      	strls	r4, [r6, #0]
 8001c3c:	e7c7      	b.n	8001bce <xTaskCreate+0xf6>
 8001c3e:	bf00      	nop
 8001c40:	20000ce0 	.word	0x20000ce0
 8001c44:	20000c48 	.word	0x20000c48
 8001c48:	20000d0c 	.word	0x20000d0c
 8001c4c:	20000d2c 	.word	0x20000d2c
 8001c50:	20000d58 	.word	0x20000d58
 8001c54:	20000d44 	.word	0x20000d44
 8001c58:	20000c4c 	.word	0x20000c4c
 8001c5c:	20000c50 	.word	0x20000c50
 8001c60:	20000cf0 	.word	0x20000cf0
 8001c64:	20000cf4 	.word	0x20000cf4
 8001c68:	20000d40 	.word	0x20000d40
 8001c6c:	e000ed04 	.word	0xe000ed04
 8001c70:	20000c54 	.word	0x20000c54
 8001c74:	20000cf8 	.word	0x20000cf8

08001c78 <vTaskStartScheduler>:
{
 8001c78:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <vTaskStartScheduler+0x60>)
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2400      	movs	r4, #0
 8001c80:	9400      	str	r4, [sp, #0]
 8001c82:	4623      	mov	r3, r4
 8001c84:	2280      	movs	r2, #128	; 0x80
 8001c86:	4915      	ldr	r1, [pc, #84]	; (8001cdc <vTaskStartScheduler+0x64>)
 8001c88:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <vTaskStartScheduler+0x68>)
 8001c8a:	f7ff ff25 	bl	8001ad8 <xTaskCreate>
	if( xReturn == pdPASS )
 8001c8e:	2801      	cmp	r0, #1
 8001c90:	d114      	bne.n	8001cbc <vTaskStartScheduler+0x44>
 8001c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c96:	f383 8811 	msr	BASEPRI, r3
 8001c9a:	f3bf 8f6f 	isb	sy
 8001c9e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <vTaskStartScheduler+0x6c>)
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <vTaskStartScheduler+0x70>)
 8001cac:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <vTaskStartScheduler+0x74>)
 8001cb0:	601c      	str	r4, [r3, #0]
}
 8001cb2:	b002      	add	sp, #8
 8001cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001cb8:	f7ff bd56 	b.w	8001768 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cbc:	3001      	adds	r0, #1
 8001cbe:	d108      	bne.n	8001cd2 <vTaskStartScheduler+0x5a>
 8001cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	e7fe      	b.n	8001cd0 <vTaskStartScheduler+0x58>
}
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd10      	pop	{r4, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000d20 	.word	0x20000d20
 8001cdc:	0800249c 	.word	0x0800249c
 8001ce0:	08001f5d 	.word	0x08001f5d
 8001ce4:	20000d24 	.word	0x20000d24
 8001ce8:	20000d40 	.word	0x20000d40
 8001cec:	20000d6c 	.word	0x20000d6c

08001cf0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001cf0:	4a02      	ldr	r2, [pc, #8]	; (8001cfc <vTaskSuspendAll+0xc>)
 8001cf2:	6813      	ldr	r3, [r2, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000cec 	.word	0x20000cec

08001d00 <xTaskIncrementTick>:
{
 8001d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d04:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <xTaskIncrementTick+0xf8>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d153      	bne.n	8001db4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001d0c:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <xTaskIncrementTick+0xfc>)
 8001d0e:	681c      	ldr	r4, [r3, #0]
 8001d10:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001d12:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001d14:	b9bc      	cbnz	r4, 8001d46 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001d16:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <xTaskIncrementTick+0x100>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	b142      	cbz	r2, 8001d30 <xTaskIncrementTick+0x30>
 8001d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	e7fe      	b.n	8001d2e <xTaskIncrementTick+0x2e>
 8001d30:	4a34      	ldr	r2, [pc, #208]	; (8001e04 <xTaskIncrementTick+0x104>)
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	6810      	ldr	r0, [r2, #0]
 8001d36:	6018      	str	r0, [r3, #0]
 8001d38:	6011      	str	r1, [r2, #0]
 8001d3a:	4a33      	ldr	r2, [pc, #204]	; (8001e08 <xTaskIncrementTick+0x108>)
 8001d3c:	6813      	ldr	r3, [r2, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	f7ff fe71 	bl	8001a28 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d46:	4d31      	ldr	r5, [pc, #196]	; (8001e0c <xTaskIncrementTick+0x10c>)
 8001d48:	4f31      	ldr	r7, [pc, #196]	; (8001e10 <xTaskIncrementTick+0x110>)
 8001d4a:	682b      	ldr	r3, [r5, #0]
 8001d4c:	429c      	cmp	r4, r3
 8001d4e:	f04f 0b00 	mov.w	fp, #0
 8001d52:	d33e      	bcc.n	8001dd2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d54:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001e00 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001d58:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001e20 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d5c:	f8d8 2000 	ldr.w	r2, [r8]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	bb72      	cbnz	r2, 8001dc2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d68:	602a      	str	r2, [r5, #0]
					break;
 8001d6a:	e032      	b.n	8001dd2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d6c:	f106 0a04 	add.w	sl, r6, #4
 8001d70:	4650      	mov	r0, sl
 8001d72:	f7ff fbfa 	bl	800156a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d76:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001d78:	b119      	cbz	r1, 8001d82 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d7a:	f106 0018 	add.w	r0, r6, #24
 8001d7e:	f7ff fbf4 	bl	800156a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d82:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001d84:	f8d9 3000 	ldr.w	r3, [r9]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	fa02 f100 	lsl.w	r1, r2, r0
 8001d8e:	4319      	orrs	r1, r3
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <xTaskIncrementTick+0x114>)
 8001d92:	f8c9 1000 	str.w	r1, [r9]
 8001d96:	f04f 0e14 	mov.w	lr, #20
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	fb0e 3000 	mla	r0, lr, r0, r3
 8001da0:	f7ff fbc0 	bl	8001524 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001da8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001daa:	4291      	cmp	r1, r2
 8001dac:	bf28      	it	cs
 8001dae:	f04f 0b01 	movcs.w	fp, #1
 8001db2:	e7d3      	b.n	8001d5c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <xTaskIncrementTick+0x118>)
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001dbc:	f04f 0b00 	mov.w	fp, #0
 8001dc0:	e011      	b.n	8001de6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8001dc6:	68d2      	ldr	r2, [r2, #12]
 8001dc8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001dca:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001dcc:	428c      	cmp	r4, r1
 8001dce:	d2cd      	bcs.n	8001d6c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001dd0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <xTaskIncrementTick+0x114>)
 8001dd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dd8:	2214      	movs	r2, #20
 8001dda:	434a      	muls	r2, r1
 8001ddc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001dde:	2a02      	cmp	r2, #2
 8001de0:	bf28      	it	cs
 8001de2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001de6:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <xTaskIncrementTick+0x11c>)
 8001de8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	bf18      	it	ne
 8001dee:	f04f 0b01 	movne.w	fp, #1
}
 8001df2:	4658      	mov	r0, fp
 8001df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001df8:	20000cec 	.word	0x20000cec
 8001dfc:	20000d6c 	.word	0x20000d6c
 8001e00:	20000c4c 	.word	0x20000c4c
 8001e04:	20000c50 	.word	0x20000c50
 8001e08:	20000d28 	.word	0x20000d28
 8001e0c:	20000d24 	.word	0x20000d24
 8001e10:	20000c48 	.word	0x20000c48
 8001e14:	20000c54 	.word	0x20000c54
 8001e18:	20000ce8 	.word	0x20000ce8
 8001e1c:	20000d70 	.word	0x20000d70
 8001e20:	20000cf4 	.word	0x20000cf4

08001e24 <xTaskResumeAll>:
{
 8001e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001e28:	4c31      	ldr	r4, [pc, #196]	; (8001ef0 <xTaskResumeAll+0xcc>)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	b943      	cbnz	r3, 8001e40 <xTaskResumeAll+0x1c>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	e7fe      	b.n	8001e3e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001e40:	f7ff fc00 	bl	8001644 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e4a:	6824      	ldr	r4, [r4, #0]
 8001e4c:	b12c      	cbz	r4, 8001e5a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001e4e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001e50:	f7ff fc1a 	bl	8001688 <vPortExitCritical>
}
 8001e54:	4620      	mov	r0, r4
 8001e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <xTaskResumeAll+0xd0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f5      	beq.n	8001e4e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e62:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001f0c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001e66:	4f24      	ldr	r7, [pc, #144]	; (8001ef8 <xTaskResumeAll+0xd4>)
 8001e68:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001f10 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e6c:	f8d9 3000 	ldr.w	r3, [r9]
 8001e70:	b9e3      	cbnz	r3, 8001eac <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001e72:	b10c      	cbz	r4, 8001e78 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001e74:	f7ff fdd8 	bl	8001a28 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001e78:	4d20      	ldr	r5, [pc, #128]	; (8001efc <xTaskResumeAll+0xd8>)
 8001e7a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001e7c:	b144      	cbz	r4, 8001e90 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001e7e:	4e20      	ldr	r6, [pc, #128]	; (8001f00 <xTaskResumeAll+0xdc>)
 8001e80:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001e82:	f7ff ff3d 	bl	8001d00 <xTaskIncrementTick>
 8001e86:	b100      	cbz	r0, 8001e8a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001e88:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001e8a:	3c01      	subs	r4, #1
 8001e8c:	d1f9      	bne.n	8001e82 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001e8e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <xTaskResumeAll+0xdc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0da      	beq.n	8001e4e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <xTaskResumeAll+0xe0>)
 8001e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	f3bf 8f4f 	dsb	sy
 8001ea4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001ea8:	2401      	movs	r4, #1
 8001eaa:	e7d1      	b.n	8001e50 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001eac:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001eb0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001eb2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001eb4:	f104 0018 	add.w	r0, r4, #24
 8001eb8:	f7ff fb57 	bl	800156a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f7ff fb54 	bl	800156a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ec2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	2501      	movs	r5, #1
 8001ec8:	fa05 f302 	lsl.w	r3, r5, r2
 8001ecc:	2014      	movs	r0, #20
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	fb00 8002 	mla	r0, r0, r2, r8
 8001ed4:	4631      	mov	r1, r6
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	f7ff fb24 	bl	8001524 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <xTaskResumeAll+0xe4>)
 8001ede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001ee6:	bf24      	itt	cs
 8001ee8:	4b05      	ldrcs	r3, [pc, #20]	; (8001f00 <xTaskResumeAll+0xdc>)
 8001eea:	601d      	strcs	r5, [r3, #0]
 8001eec:	e7be      	b.n	8001e6c <xTaskResumeAll+0x48>
 8001eee:	bf00      	nop
 8001ef0:	20000cec 	.word	0x20000cec
 8001ef4:	20000ce0 	.word	0x20000ce0
 8001ef8:	20000cf4 	.word	0x20000cf4
 8001efc:	20000ce8 	.word	0x20000ce8
 8001f00:	20000d70 	.word	0x20000d70
 8001f04:	e000ed04 	.word	0xe000ed04
 8001f08:	20000c48 	.word	0x20000c48
 8001f0c:	20000d2c 	.word	0x20000d2c
 8001f10:	20000c54 	.word	0x20000c54

08001f14 <vTaskDelay>:
	{
 8001f14:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001f16:	b940      	cbnz	r0, 8001f2a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <vTaskDelay+0x40>)
 8001f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <vTaskDelay+0x44>)
 8001f2c:	6819      	ldr	r1, [r3, #0]
 8001f2e:	b141      	cbz	r1, 8001f42 <vTaskDelay+0x2e>
 8001f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	e7fe      	b.n	8001f40 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001f42:	f7ff fed5 	bl	8001cf0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f46:	f7ff fd81 	bl	8001a4c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001f4a:	f7ff ff6b 	bl	8001e24 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d0e2      	beq.n	8001f18 <vTaskDelay+0x4>
 8001f52:	bd08      	pop	{r3, pc}
 8001f54:	e000ed04 	.word	0xe000ed04
 8001f58:	20000cec 	.word	0x20000cec

08001f5c <prvIdleTask>:
{
 8001f5c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001f5e:	4e17      	ldr	r6, [pc, #92]	; (8001fbc <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f60:	4c17      	ldr	r4, [pc, #92]	; (8001fc0 <prvIdleTask+0x64>)
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	b963      	cbnz	r3, 8001f80 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <prvIdleTask+0x68>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d9f8      	bls.n	8001f60 <prvIdleTask+0x4>
				taskYIELD();
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <prvIdleTask+0x6c>)
 8001f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	e7ef      	b.n	8001f60 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001f80:	f7ff feb6 	bl	8001cf0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001f84:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001f86:	f7ff ff4d 	bl	8001e24 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001f8a:	2d00      	cmp	r5, #0
 8001f8c:	d0e9      	beq.n	8001f62 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001f8e:	f7ff fb59 	bl	8001644 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001f92:	68f3      	ldr	r3, [r6, #12]
 8001f94:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f96:	1d28      	adds	r0, r5, #4
 8001f98:	f7ff fae7 	bl	800156a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <prvIdleTask+0x70>)
 8001f9e:	6813      	ldr	r3, [r2, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001faa:	f7ff fb6d 	bl	8001688 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001fae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001fb0:	f7ff fd02 	bl	80019b8 <vPortFree>
			vPortFree( pxTCB );
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	f7ff fcff 	bl	80019b8 <vPortFree>
 8001fba:	e7d2      	b.n	8001f62 <prvIdleTask+0x6>
 8001fbc:	20000d58 	.word	0x20000d58
 8001fc0:	20000ce4 	.word	0x20000ce4
 8001fc4:	20000c54 	.word	0x20000c54
 8001fc8:	e000ed04 	.word	0xe000ed04
 8001fcc:	20000ce0 	.word	0x20000ce0

08001fd0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <vTaskSwitchContext+0x60>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <vTaskSwitchContext+0x64>)
{
 8001fd6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fd8:	b112      	cbz	r2, 8001fe0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001fda:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001fe0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <vTaskSwitchContext+0x68>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	f1c3 031f 	rsb	r3, r3, #31
 8001ff0:	2214      	movs	r2, #20
 8001ff2:	4912      	ldr	r1, [pc, #72]	; (800203c <vTaskSwitchContext+0x6c>)
 8001ff4:	435a      	muls	r2, r3
 8001ff6:	1888      	adds	r0, r1, r2
 8001ff8:	588c      	ldr	r4, [r1, r2]
 8001ffa:	b944      	cbnz	r4, 800200e <vTaskSwitchContext+0x3e>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	e7fe      	b.n	800200c <vTaskSwitchContext+0x3c>
 800200e:	6844      	ldr	r4, [r0, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	6864      	ldr	r4, [r4, #4]
 8002014:	6044      	str	r4, [r0, #4]
 8002016:	440a      	add	r2, r1
 8002018:	4294      	cmp	r4, r2
 800201a:	bf04      	itt	eq
 800201c:	6862      	ldreq	r2, [r4, #4]
 800201e:	6042      	streq	r2, [r0, #4]
 8002020:	2214      	movs	r2, #20
 8002022:	fb02 1303 	mla	r3, r2, r3, r1
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <vTaskSwitchContext+0x70>)
 800202c:	e7d6      	b.n	8001fdc <vTaskSwitchContext+0xc>
 800202e:	bf00      	nop
 8002030:	20000cec 	.word	0x20000cec
 8002034:	20000d70 	.word	0x20000d70
 8002038:	20000cf4 	.word	0x20000cf4
 800203c:	20000c54 	.word	0x20000c54
 8002040:	20000c48 	.word	0x20000c48

08002044 <StartDefaultTask>:
enum Dir{Forw,Backw};
int16_t speed;
bool errorMot = false;

void StartDefaultTask(void const * argument)
{
 8002044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_WritePin(PWMA_PORT,PWMA_PIN,GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	2108      	movs	r1, #8
 800204a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204e:	f7fe fa0d 	bl	800046c <HAL_GPIO_WritePin>
    osDelay(500);
 8002052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002056:	f7ff fa4f 	bl	80014f8 <osDelay>
 800205a:	e7f4      	b.n	8002046 <StartDefaultTask+0x2>

0800205c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800205c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800205e:	2001      	movs	r0, #1
 8002060:	f7ff fa4a 	bl	80014f8 <osDelay>
 8002064:	e7fb      	b.n	800205e <StartTask02+0x2>

08002066 <SystemClock_Config>:
{
 8002066:	b530      	push	{r4, r5, lr}
 8002068:	b0a7      	sub	sp, #156	; 0x9c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800206a:	2228      	movs	r2, #40	; 0x28
 800206c:	2100      	movs	r1, #0
 800206e:	a806      	add	r0, sp, #24
 8002070:	f000 f9da 	bl	8002428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002074:	2214      	movs	r2, #20
 8002076:	2100      	movs	r1, #0
 8002078:	a801      	add	r0, sp, #4
 800207a:	f000 f9d5 	bl	8002428 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800207e:	2258      	movs	r2, #88	; 0x58
 8002080:	2100      	movs	r1, #0
 8002082:	a810      	add	r0, sp, #64	; 0x40
 8002084:	f000 f9d0 	bl	8002428 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002088:	2301      	movs	r3, #1
 800208a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800208c:	2310      	movs	r3, #16
 800208e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002094:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002096:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002098:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800209a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800209e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020a0:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a2:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a4:	f7fe f9e8 	bl	8000478 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020aa:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ac:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020ae:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020b6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ba:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020bc:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020be:	f7fe fc89 	bl	80009d4 <HAL_RCC_ClockConfig>
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c2:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80020c4:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020c6:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c8:	f7fe fd7c 	bl	8000bc4 <HAL_RCCEx_PeriphCLKConfig>
}
 80020cc:	b027      	add	sp, #156	; 0x9c
 80020ce:	bd30      	pop	{r4, r5, pc}

080020d0 <main>:
{
 80020d0:	b500      	push	{lr}
 80020d2:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80020d4:	f7fe f884 	bl	80001e0 <HAL_Init>
  SystemClock_Config();
 80020d8:	f7ff ffc5 	bl	8002066 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	2214      	movs	r2, #20
 80020de:	2100      	movs	r1, #0
 80020e0:	a809      	add	r0, sp, #36	; 0x24
 80020e2:	f000 f9a1 	bl	8002428 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <main+0xf0>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020e8:	4c36      	ldr	r4, [pc, #216]	; (80021c4 <main+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	695a      	ldr	r2, [r3, #20]
 80020f4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020fc:	695a      	ldr	r2, [r3, #20]
 80020fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800210a:	9201      	str	r2, [sp, #4]
 800210c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002114:	615a      	str	r2, [r3, #20]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800211c:	9202      	str	r2, [sp, #8]
 800211e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002126:	615a      	str	r2, [r3, #20]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002130:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002132:	2120      	movs	r1, #32
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002138:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800213a:	f7fe f997 	bl	800046c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800213e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002144:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002146:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002148:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <main+0xf8>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800214a:	4820      	ldr	r0, [pc, #128]	; (80021cc <main+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800214c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002150:	f7fe f8bc 	bl	80002cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002154:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002156:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = LD2_Pin;
 8002158:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800215a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800215e:	2301      	movs	r3, #1
 8002160:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002166:	f7fe f8b1 	bl	80002cc <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800216a:	4819      	ldr	r0, [pc, #100]	; (80021d0 <main+0x100>)
  huart2.Init.BaudRate = 38400;
 800216c:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <main+0x104>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8002170:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002174:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002178:	230c      	movs	r3, #12
 800217a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800217c:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800217e:	6105      	str	r5, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002180:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002182:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002184:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002186:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002188:	f7ff f967 	bl	800145a <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800218c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218e:	ae04      	add	r6, sp, #16
 8002190:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002192:	f854 3b04 	ldr.w	r3, [r4], #4
 8002196:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002198:	4629      	mov	r1, r5
 800219a:	a804      	add	r0, sp, #16
 800219c:	f7ff f994 	bl	80014c8 <osThreadCreate>
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <main+0x108>)
 80021a2:	6018      	str	r0, [r3, #0]
  osThreadDef(Protection, StartTask02, osPriorityIdle, 0, 128);
 80021a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a6:	ae09      	add	r6, sp, #36	; 0x24
 80021a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	6033      	str	r3, [r6, #0]
  ProtectionHandle = osThreadCreate(osThread(Protection), NULL);
 80021ae:	4629      	mov	r1, r5
 80021b0:	a809      	add	r0, sp, #36	; 0x24
 80021b2:	f7ff f989 	bl	80014c8 <osThreadCreate>
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <main+0x10c>)
 80021b8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80021ba:	f7ff f980 	bl	80014be <osKernelStart>
 80021be:	e7fe      	b.n	80021be <main+0xee>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08002450 	.word	0x08002450
 80021c8:	10210000 	.word	0x10210000
 80021cc:	48000800 	.word	0x48000800
 80021d0:	20000d80 	.word	0x20000d80
 80021d4:	40004400 	.word	0x40004400
 80021d8:	20000d78 	.word	0x20000d78
 80021dc:	20000df0 	.word	0x20000df0

080021e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80021e8:	f7fe b80c 	b.w	8000204 <HAL_IncTick>
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40012c00 	.word	0x40012c00

080021f4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <HAL_MspInit+0x3c>)
{
 80021f6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	619a      	str	r2, [r3, #24]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	f002 0201 	and.w	r2, r2, #1
 8002206:	9200      	str	r2, [sp, #0]
 8002208:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002210:	61da      	str	r2, [r3, #28]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	210f      	movs	r1, #15
 800221e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002224:	f7fe f812 	bl	800024c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002228:	b003      	add	sp, #12
 800222a:	f85d fb04 	ldr.w	pc, [sp], #4
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000

08002234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002234:	b510      	push	{r4, lr}
 8002236:	4604      	mov	r4, r0
 8002238:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223a:	2214      	movs	r2, #20
 800223c:	2100      	movs	r1, #0
 800223e:	a803      	add	r0, sp, #12
 8002240:	f000 f8f2 	bl	8002428 <memset>
  if(huart->Instance==USART2)
 8002244:	6822      	ldr	r2, [r4, #0]
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_UART_MspInit+0x5c>)
 8002248:	429a      	cmp	r2, r3
 800224a:	d11e      	bne.n	800228a <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800224c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002258:	61da      	str	r2, [r3, #28]
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002260:	9201      	str	r2, [sp, #4]
 8002262:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800226a:	615a      	str	r2, [r3, #20]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	9302      	str	r3, [sp, #8]
 8002274:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002276:	230c      	movs	r3, #12
 8002278:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002282:	2307      	movs	r3, #7
 8002284:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f7fe f821 	bl	80002cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800228a:	b008      	add	sp, #32
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	40004400 	.word	0x40004400

08002294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002294:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8002296:	4601      	mov	r1, r0
{
 8002298:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800229a:	2200      	movs	r2, #0
 800229c:	2019      	movs	r0, #25
 800229e:	f7fd ffd5 	bl	800024c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80022a2:	2019      	movs	r0, #25
 80022a4:	f7fe f806 	bl	80002b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022aa:	4c15      	ldr	r4, [pc, #84]	; (8002300 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b2:	619a      	str	r2, [r3, #24]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022bc:	a901      	add	r1, sp, #4
 80022be:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022c0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022c2:	f7fe fc61 	bl	8000b88 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80022c6:	f7fe fc47 	bl	8000b58 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_InitTick+0x70>)
 80022cc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80022ce:	f240 33e7 	movw	r3, #999	; 0x3e7
 80022d2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_InitTick+0x74>)
 80022d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80022da:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 80022dc:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 80022de:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022e0:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 80022e2:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022e6:	f7fe fedb 	bl	80010a0 <HAL_TIM_Base_Init>
 80022ea:	b920      	cbnz	r0, 80022f6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7fe fdae 	bl	8000e4e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80022f2:	b008      	add	sp, #32
 80022f4:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
 80022f8:	e7fb      	b.n	80022f2 <HAL_InitTick+0x5e>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	20000df4 	.word	0x20000df4
 8002304:	40012c00 	.word	0x40012c00
 8002308:	000f4240 	.word	0x000f4240

0800230c <NMI_Handler>:
 800230c:	4770      	bx	lr

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	e7fe      	b.n	800230e <HardFault_Handler>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	e7fe      	b.n	8002310 <MemManage_Handler>

08002312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002312:	e7fe      	b.n	8002312 <BusFault_Handler>

08002314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler>

08002316 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002316:	4770      	bx	lr

08002318 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002318:	4801      	ldr	r0, [pc, #4]	; (8002320 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800231a:	f7fe bda7 	b.w	8000e6c <HAL_TIM_IRQHandler>
 800231e:	bf00      	nop
 8002320:	20000df4 	.word	0x20000df4

08002324 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4915      	ldr	r1, [pc, #84]	; (800237c <SystemInit+0x58>)
 8002326:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800232a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <SystemInit+0x5c>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800233c:	6858      	ldr	r0, [r3, #4]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <SystemInit+0x60>)
 8002340:	4002      	ands	r2, r0
 8002342:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800234a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800234e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002356:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800235e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002362:	f022 020f 	bic.w	r2, r2, #15
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002368:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800236a:	4a07      	ldr	r2, [pc, #28]	; (8002388 <SystemInit+0x64>)
 800236c:	4002      	ands	r2, r0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002378:	608b      	str	r3, [r1, #8]
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00
 8002380:	40021000 	.word	0x40021000
 8002384:	f87fc00c 	.word	0xf87fc00c
 8002388:	ff00fccc 	.word	0xff00fccc

0800238c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002390:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002392:	e003      	b.n	800239c <LoopCopyDataInit>

08002394 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002396:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002398:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800239a:	3104      	adds	r1, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800239c:	480b      	ldr	r0, [pc, #44]	; (80023cc <LoopForever+0xa>)
	ldr	r3, =_edata
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023a4:	d3f6      	bcc.n	8002394 <CopyDataInit>
	ldr	r2, =_sbss
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80023a8:	e002      	b.n	80023b0 <LoopFillZerobss>

080023aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023aa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023ac:	f842 3b04 	str.w	r3, [r2], #4

080023b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <LoopForever+0x16>)
	cmp	r2, r3
 80023b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023b4:	d3f9      	bcc.n	80023aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023b6:	f7ff ffb5 	bl	8002324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ba:	f000 f811 	bl	80023e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023be:	f7ff fe87 	bl	80020d0 <main>

080023c2 <LoopForever>:

LoopForever:
    b LoopForever
 80023c2:	e7fe      	b.n	80023c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023c4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80023c8:	080024d8 	.word	0x080024d8
	ldr	r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023d0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80023d4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80023d8:	20000e34 	.word	0x20000e34

080023dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC1_2_IRQHandler>
	...

080023e0 <__libc_init_array>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	4e0d      	ldr	r6, [pc, #52]	; (8002418 <__libc_init_array+0x38>)
 80023e4:	4c0d      	ldr	r4, [pc, #52]	; (800241c <__libc_init_array+0x3c>)
 80023e6:	1ba4      	subs	r4, r4, r6
 80023e8:	10a4      	asrs	r4, r4, #2
 80023ea:	2500      	movs	r5, #0
 80023ec:	42a5      	cmp	r5, r4
 80023ee:	d109      	bne.n	8002404 <__libc_init_array+0x24>
 80023f0:	4e0b      	ldr	r6, [pc, #44]	; (8002420 <__libc_init_array+0x40>)
 80023f2:	4c0c      	ldr	r4, [pc, #48]	; (8002424 <__libc_init_array+0x44>)
 80023f4:	f000 f820 	bl	8002438 <_init>
 80023f8:	1ba4      	subs	r4, r4, r6
 80023fa:	10a4      	asrs	r4, r4, #2
 80023fc:	2500      	movs	r5, #0
 80023fe:	42a5      	cmp	r5, r4
 8002400:	d105      	bne.n	800240e <__libc_init_array+0x2e>
 8002402:	bd70      	pop	{r4, r5, r6, pc}
 8002404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002408:	4798      	blx	r3
 800240a:	3501      	adds	r5, #1
 800240c:	e7ee      	b.n	80023ec <__libc_init_array+0xc>
 800240e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002412:	4798      	blx	r3
 8002414:	3501      	adds	r5, #1
 8002416:	e7f2      	b.n	80023fe <__libc_init_array+0x1e>
 8002418:	080024d0 	.word	0x080024d0
 800241c:	080024d0 	.word	0x080024d0
 8002420:	080024d0 	.word	0x080024d0
 8002424:	080024d4 	.word	0x080024d4

08002428 <memset>:
 8002428:	4402      	add	r2, r0
 800242a:	4603      	mov	r3, r0
 800242c:	4293      	cmp	r3, r2
 800242e:	d100      	bne.n	8002432 <memset+0xa>
 8002430:	4770      	bx	lr
 8002432:	f803 1b01 	strb.w	r1, [r3], #1
 8002436:	e7f9      	b.n	800242c <memset+0x4>

08002438 <_init>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr

08002444 <_fini>:
 8002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002446:	bf00      	nop
 8002448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800244a:	bc08      	pop	{r3}
 800244c:	469e      	mov	lr, r3
 800244e:	4770      	bx	lr
