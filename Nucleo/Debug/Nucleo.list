
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005aa0  08005aa0  00015aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08005aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  8 .bss          00001b44  20000018  20000018  00020018  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001b5c  20001b5c  00020018  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018184  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002df7  00000000  00000000  000381c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001078  00000000  00000000  0003afc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f50  00000000  00000000  0003c038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007f3a  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000563b  00000000  00000000  00044ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004a4fd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004484  00000000  00000000  0004a57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005964 	.word	0x08005964

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08005964 	.word	0x08005964

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x28>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x28>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f8d2 	bl	80006aa <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f005 f912 	bl	8005730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f005 f812 	bl	8005534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40022000 	.word	0x40022000

0800051c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <HAL_IncTick+0x20>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	461a      	mov	r2, r3
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_IncTick+0x24>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4413      	add	r3, r2
 800052c:	4a04      	ldr	r2, [pc, #16]	; (8000540 <HAL_IncTick+0x24>)
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000
 8000540:	200019f0 	.word	0x200019f0

08000544 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  return uwTick;  
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_GetTick+0x14>)
 800054a:	681b      	ldr	r3, [r3, #0]
}
 800054c:	4618      	mov	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200019f0 	.word	0x200019f0

0800055c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f003 0307 	and.w	r3, r3, #7
 800056a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <NVIC_SetPriorityGrouping+0x44>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000572:	68ba      	ldr	r2, [r7, #8]
 8000574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000578:	4013      	ands	r3, r2
 800057a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <NVIC_SetPriorityGrouping+0x44>)
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	60d3      	str	r3, [r2, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <NVIC_GetPriorityGrouping+0x18>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	0a1b      	lsrs	r3, r3, #8
 80005ae:	f003 0307 	and.w	r3, r3, #7
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005ca:	4909      	ldr	r1, [pc, #36]	; (80005f0 <NVIC_EnableIRQ+0x30>)
 80005cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d0:	095b      	lsrs	r3, r3, #5
 80005d2:	79fa      	ldrb	r2, [r7, #7]
 80005d4:	f002 021f 	and.w	r2, r2, #31
 80005d8:	2001      	movs	r0, #1
 80005da:	fa00 f202 	lsl.w	r2, r0, r2
 80005de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e100 	.word	0xe000e100

080005f4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	6039      	str	r1, [r7, #0]
 80005fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	da0b      	bge.n	8000620 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	490d      	ldr	r1, [pc, #52]	; (8000640 <NVIC_SetPriority+0x4c>)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 030f 	and.w	r3, r3, #15
 8000610:	3b04      	subs	r3, #4
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	0112      	lsls	r2, r2, #4
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800061e:	e009      	b.n	8000634 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <NVIC_SetPriority+0x50>)
 8000622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00
 8000644:	e000e100 	.word	0xe000e100

08000648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000648:	b480      	push	{r7}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f1c3 0307 	rsb	r3, r3, #7
 8000662:	2b04      	cmp	r3, #4
 8000664:	bf28      	it	cs
 8000666:	2304      	movcs	r3, #4
 8000668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3304      	adds	r3, #4
 800066e:	2b06      	cmp	r3, #6
 8000670:	d902      	bls.n	8000678 <NVIC_EncodePriority+0x30>
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3b03      	subs	r3, #3
 8000676:	e000      	b.n	800067a <NVIC_EncodePriority+0x32>
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	2201      	movs	r2, #1
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	fa02 f303 	lsl.w	r3, r2, r3
 8000684:	1e5a      	subs	r2, r3, #1
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	401a      	ands	r2, r3
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800068e:	2101      	movs	r1, #1
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	fa01 f303 	lsl.w	r3, r1, r3
 8000696:	1e59      	subs	r1, r3, #1
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	4313      	orrs	r3, r2
         );
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3724      	adds	r7, #36	; 0x24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff52 	bl	800055c <NVIC_SetPriorityGrouping>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
 80006cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006d2:	f7ff ff67 	bl	80005a4 <NVIC_GetPriorityGrouping>
 80006d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	68b9      	ldr	r1, [r7, #8]
 80006dc:	6978      	ldr	r0, [r7, #20]
 80006de:	f7ff ffb3 	bl	8000648 <NVIC_EncodePriority>
 80006e2:	4602      	mov	r2, r0
 80006e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff82 	bl	80005f4 <NVIC_SetPriority>
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff5a 	bl	80005c0 <NVIC_EnableIRQ>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000714:	b480      	push	{r7}
 8000716:	b087      	sub	sp, #28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800072a:	e160      	b.n	80009ee <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	2101      	movs	r1, #1
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	4013      	ands	r3, r2
 800073a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	f000 8152 	beq.w	80009e8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d003      	beq.n	8000754 <HAL_GPIO_Init+0x40>
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b12      	cmp	r3, #18
 8000752:	d123      	bne.n	800079c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	08da      	lsrs	r2, r3, #3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3208      	adds	r2, #8
 800075c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000760:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	220f      	movs	r2, #15
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	43db      	mvns	r3, r3
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4013      	ands	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	691a      	ldr	r2, [r3, #16]
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4313      	orrs	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	08da      	lsrs	r2, r3, #3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3208      	adds	r2, #8
 8000796:	6939      	ldr	r1, [r7, #16]
 8000798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	2203      	movs	r2, #3
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	43db      	mvns	r3, r3
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	f003 0203 	and.w	r2, r3, #3
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d00b      	beq.n	80007f0 <HAL_GPIO_Init+0xdc>
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d007      	beq.n	80007f0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e4:	2b11      	cmp	r3, #17
 80007e6:	d003      	beq.n	80007f0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	2b12      	cmp	r3, #18
 80007ee:	d130      	bne.n	8000852 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2203      	movs	r2, #3
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	4013      	ands	r3, r2
 8000806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	68da      	ldr	r2, [r3, #12]
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	4313      	orrs	r3, r2
 8000818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000826:	2201      	movs	r2, #1
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	693a      	ldr	r2, [r7, #16]
 8000832:	4013      	ands	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	091b      	lsrs	r3, r3, #4
 800083c:	f003 0201 	and.w	r2, r3, #1
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	4313      	orrs	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	2203      	movs	r2, #3
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	4313      	orrs	r3, r2
 800087a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 80ac 	beq.w	80009e8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000890:	4a5e      	ldr	r2, [pc, #376]	; (8000a0c <HAL_GPIO_Init+0x2f8>)
 8000892:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <HAL_GPIO_Init+0x2f8>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <HAL_GPIO_Init+0x2f8>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80008a8:	4a59      	ldr	r2, [pc, #356]	; (8000a10 <HAL_GPIO_Init+0x2fc>)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	089b      	lsrs	r3, r3, #2
 80008ae:	3302      	adds	r3, #2
 80008b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f003 0303 	and.w	r3, r3, #3
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	220f      	movs	r2, #15
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008d2:	d025      	beq.n	8000920 <HAL_GPIO_Init+0x20c>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a4f      	ldr	r2, [pc, #316]	; (8000a14 <HAL_GPIO_Init+0x300>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d01f      	beq.n	800091c <HAL_GPIO_Init+0x208>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <HAL_GPIO_Init+0x304>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d019      	beq.n	8000918 <HAL_GPIO_Init+0x204>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a4d      	ldr	r2, [pc, #308]	; (8000a1c <HAL_GPIO_Init+0x308>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d013      	beq.n	8000914 <HAL_GPIO_Init+0x200>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a4c      	ldr	r2, [pc, #304]	; (8000a20 <HAL_GPIO_Init+0x30c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d00d      	beq.n	8000910 <HAL_GPIO_Init+0x1fc>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a4b      	ldr	r2, [pc, #300]	; (8000a24 <HAL_GPIO_Init+0x310>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d007      	beq.n	800090c <HAL_GPIO_Init+0x1f8>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a4a      	ldr	r2, [pc, #296]	; (8000a28 <HAL_GPIO_Init+0x314>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d101      	bne.n	8000908 <HAL_GPIO_Init+0x1f4>
 8000904:	2306      	movs	r3, #6
 8000906:	e00c      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 8000908:	2307      	movs	r3, #7
 800090a:	e00a      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 800090c:	2305      	movs	r3, #5
 800090e:	e008      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 8000910:	2304      	movs	r3, #4
 8000912:	e006      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 8000914:	2303      	movs	r3, #3
 8000916:	e004      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 8000918:	2302      	movs	r3, #2
 800091a:	e002      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <HAL_GPIO_Init+0x20e>
 8000920:	2300      	movs	r3, #0
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	f002 0203 	and.w	r2, r2, #3
 8000928:	0092      	lsls	r2, r2, #2
 800092a:	4093      	lsls	r3, r2
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4313      	orrs	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000932:	4937      	ldr	r1, [pc, #220]	; (8000a10 <HAL_GPIO_Init+0x2fc>)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	3302      	adds	r3, #2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000940:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <HAL_GPIO_Init+0x318>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	43db      	mvns	r3, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d003      	beq.n	8000964 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000964:	4a31      	ldr	r2, [pc, #196]	; (8000a2c <HAL_GPIO_Init+0x318>)
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800096a:	4b30      	ldr	r3, [pc, #192]	; (8000a2c <HAL_GPIO_Init+0x318>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d003      	beq.n	800098e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <HAL_GPIO_Init+0x318>)
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <HAL_GPIO_Init+0x318>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	43db      	mvns	r3, r3
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009b8:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <HAL_GPIO_Init+0x318>)
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_GPIO_Init+0x318>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_GPIO_Init+0x318>)
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	fa22 f303 	lsr.w	r3, r2, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f47f ae97 	bne.w	800072c <HAL_GPIO_Init+0x18>
  }
}
 80009fe:	bf00      	nop
 8000a00:	371c      	adds	r7, #28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000
 8000a14:	48000400 	.word	0x48000400
 8000a18:	48000800 	.word	0x48000800
 8000a1c:	48000c00 	.word	0x48000c00
 8000a20:	48001000 	.word	0x48001000
 8000a24:	48001400 	.word	0x48001400
 8000a28:	48001800 	.word	0x48001800
 8000a2c:	40010400 	.word	0x40010400

08000a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	691a      	ldr	r2, [r3, #16]
 8000a40:	887b      	ldrh	r3, [r7, #2]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d002      	beq.n	8000a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e001      	b.n	8000a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	807b      	strh	r3, [r7, #2]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a70:	787b      	ldrb	r3, [r7, #1]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a76:	887a      	ldrh	r2, [r7, #2]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a7c:	e002      	b.n	8000a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a7e:	887a      	ldrh	r2, [r7, #2]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	f000 beda 	b.w	800185e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 8164 	beq.w	8000d82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000aba:	4bb0      	ldr	r3, [pc, #704]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 030c 	and.w	r3, r3, #12
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d00c      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ac6:	4bad      	ldr	r3, [pc, #692]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 030c 	and.w	r3, r3, #12
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	d15a      	bne.n	8000b88 <HAL_RCC_OscConfig+0xf8>
 8000ad2:	4baa      	ldr	r3, [pc, #680]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ade:	d153      	bne.n	8000b88 <HAL_RCC_OscConfig+0xf8>
 8000ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ae4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000aec:	fa93 f3a3 	rbit	r3, r3
 8000af0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000af4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af8:	fab3 f383 	clz	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	095b      	lsrs	r3, r3, #5
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x82>
 8000b0c:	4b9b      	ldr	r3, [pc, #620]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	e015      	b.n	8000b3e <HAL_RCC_OscConfig+0xae>
 8000b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b2a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b2e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000b32:	fa93 f3a3 	rbit	r3, r3
 8000b36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b3a:	4b90      	ldr	r3, [pc, #576]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b42:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000b46:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000b4a:	fa92 f2a2 	rbit	r2, r2
 8000b4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000b52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	b252      	sxtb	r2, r2
 8000b5c:	f042 0220 	orr.w	r2, r2, #32
 8000b60:	b252      	sxtb	r2, r2
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	f002 021f 	and.w	r2, r2, #31
 8000b68:	2101      	movs	r1, #1
 8000b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 8105 	beq.w	8000d80 <HAL_RCC_OscConfig+0x2f0>
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 80ff 	bne.w	8000d80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f000 be6b 	b.w	800185e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d106      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x112>
 8000b94:	4a79      	ldr	r2, [pc, #484]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000b96:	4b79      	ldr	r3, [pc, #484]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e030      	b.n	8000c04 <HAL_RCC_OscConfig+0x174>
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10c      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x136>
 8000bac:	4a73      	ldr	r2, [pc, #460]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bae:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4a70      	ldr	r2, [pc, #448]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bba:	4b70      	ldr	r3, [pc, #448]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e01e      	b.n	8000c04 <HAL_RCC_OscConfig+0x174>
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x15c>
 8000bd2:	4a6a      	ldr	r2, [pc, #424]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4a67      	ldr	r2, [pc, #412]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000be0:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e00b      	b.n	8000c04 <HAL_RCC_OscConfig+0x174>
 8000bec:	4a63      	ldr	r2, [pc, #396]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bee:	4b63      	ldr	r3, [pc, #396]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4a60      	ldr	r2, [pc, #384]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bfa:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c02:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d05a      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fc99 	bl	8000544 <HAL_GetTick>
 8000c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	e00a      	b.n	8000c2e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fc94 	bl	8000544 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b64      	cmp	r3, #100	; 0x64
 8000c26:	d902      	bls.n	8000c2e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	f000 be18 	b.w	800185e <HAL_RCC_OscConfig+0xdce>
 8000c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c32:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c36:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000c42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	fab3 f383 	clz	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	095b      	lsrs	r3, r3, #5
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d102      	bne.n	8000c60 <HAL_RCC_OscConfig+0x1d0>
 8000c5a:	4b48      	ldr	r3, [pc, #288]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	e015      	b.n	8000c8c <HAL_RCC_OscConfig+0x1fc>
 8000c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c64:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c78:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000c7c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000c80:	fa93 f3a3 	rbit	r3, r3
 8000c84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000c88:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c90:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000c94:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000c98:	fa92 f2a2 	rbit	r2, r2
 8000c9c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000ca0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ca4:	fab2 f282 	clz	r2, r2
 8000ca8:	b252      	sxtb	r2, r2
 8000caa:	f042 0220 	orr.w	r2, r2, #32
 8000cae:	b252      	sxtb	r2, r2
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	f002 021f 	and.w	r2, r2, #31
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0aa      	beq.n	8000c18 <HAL_RCC_OscConfig+0x188>
 8000cc2:	e05e      	b.n	8000d82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fc3e 	bl	8000544 <HAL_GetTick>
 8000cc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ccc:	e00a      	b.n	8000ce4 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cce:	f7ff fc39 	bl	8000544 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d902      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	f000 bdbd 	b.w	800185e <HAL_RCC_OscConfig+0xdce>
 8000ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000cf0:	fa93 f3a3 	rbit	r3, r3
 8000cf4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000cf8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d102      	bne.n	8000d16 <HAL_RCC_OscConfig+0x286>
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x2b2>
 8000d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000d36:	fa93 f3a3 	rbit	r3, r3
 8000d3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_RCC_OscConfig+0x2ec>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000d4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000d4e:	fa92 f2a2 	rbit	r2, r2
 8000d52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000d56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b252      	sxtb	r2, r2
 8000d60:	f042 0220 	orr.w	r2, r2, #32
 8000d64:	b252      	sxtb	r2, r2
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	f002 021f 	and.w	r2, r2, #31
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1aa      	bne.n	8000cce <HAL_RCC_OscConfig+0x23e>
 8000d78:	e003      	b.n	8000d82 <HAL_RCC_OscConfig+0x2f2>
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 8171 	beq.w	8001074 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d92:	4bd0      	ldr	r3, [pc, #832]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00c      	beq.n	8000db8 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d9e:	4bcd      	ldr	r3, [pc, #820]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d16e      	bne.n	8000e88 <HAL_RCC_OscConfig+0x3f8>
 8000daa:	4bca      	ldr	r3, [pc, #808]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db6:	d167      	bne.n	8000e88 <HAL_RCC_OscConfig+0x3f8>
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000dca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dce:	fab3 f383 	clz	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d102      	bne.n	8000de8 <HAL_RCC_OscConfig+0x358>
 8000de2:	4bbc      	ldr	r3, [pc, #752]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	e013      	b.n	8000e10 <HAL_RCC_OscConfig+0x380>
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e04:	fa93 f3a3 	rbit	r3, r3
 8000e08:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e0c:	4bb1      	ldr	r3, [pc, #708]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	2202      	movs	r2, #2
 8000e12:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000e16:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000e1a:	fa92 f2a2 	rbit	r2, r2
 8000e1e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000e22:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e26:	fab2 f282 	clz	r2, r2
 8000e2a:	b252      	sxtb	r2, r2
 8000e2c:	f042 0220 	orr.w	r2, r2, #32
 8000e30:	b252      	sxtb	r2, r2
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	f002 021f 	and.w	r2, r2, #31
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_RCC_OscConfig+0x3c4>
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f000 bd05 	b.w	800185e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e54:	489f      	ldr	r0, [pc, #636]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000e56:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6919      	ldr	r1, [r3, #16]
 8000e64:	23f8      	movs	r3, #248	; 0xf8
 8000e66:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000e76:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e86:	e0f5      	b.n	8001074 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8085 	beq.w	8000f9e <HAL_RCC_OscConfig+0x50e>
 8000e94:	2301      	movs	r3, #1
 8000e96:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000ea6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2301      	movs	r3, #1
 8000ebc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fb41 	bl	8000544 <HAL_GetTick>
 8000ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec6:	e00a      	b.n	8000ede <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fb3c 	bl	8000544 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d902      	bls.n	8000ede <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f000 bcc0 	b.w	800185e <HAL_RCC_OscConfig+0xdce>
 8000ede:	2302      	movs	r3, #2
 8000ee0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000ef0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_OscConfig+0x47e>
 8000f08:	4b72      	ldr	r3, [pc, #456]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	e013      	b.n	8000f36 <HAL_RCC_OscConfig+0x4a6>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000f18:	fa93 f3a3 	rbit	r3, r3
 8000f1c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000f32:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	2202      	movs	r2, #2
 8000f38:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000f3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000f40:	fa92 f2a2 	rbit	r2, r2
 8000f44:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000f48:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000f4c:	fab2 f282 	clz	r2, r2
 8000f50:	b252      	sxtb	r2, r2
 8000f52:	f042 0220 	orr.w	r2, r2, #32
 8000f56:	b252      	sxtb	r2, r2
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	f002 021f 	and.w	r2, r2, #31
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0ae      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6a:	485a      	ldr	r0, [pc, #360]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6919      	ldr	r1, [r3, #16]
 8000f7a:	23f8      	movs	r3, #248	; 0xf8
 8000f7c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000f8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000f90:	fab3 f383 	clz	r3, r3
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	6003      	str	r3, [r0, #0]
 8000f9c:	e06a      	b.n	8001074 <HAL_RCC_OscConfig+0x5e4>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000fb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fabc 	bl	8000544 <HAL_GetTick>
 8000fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd0:	e00a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fab7 	bl	8000544 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d902      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	f000 bc3b 	b.w	800185e <HAL_RCC_OscConfig+0xdce>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ff2:	fa93 f3a3 	rbit	r3, r3
 8000ff6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000ffa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	fab3 f383 	clz	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	095b      	lsrs	r3, r3, #5
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d102      	bne.n	8001018 <HAL_RCC_OscConfig+0x588>
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	e013      	b.n	8001040 <HAL_RCC_OscConfig+0x5b0>
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001030:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HAL_RCC_OscConfig+0x644>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	2202      	movs	r2, #2
 8001042:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001046:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800104a:	fa92 f2a2 	rbit	r2, r2
 800104e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001056:	fab2 f282 	clz	r2, r2
 800105a:	b252      	sxtb	r2, r2
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	b252      	sxtb	r2, r2
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f002 021f 	and.w	r2, r2, #31
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ae      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80d7 	beq.w	8001232 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d066      	beq.n	800115c <HAL_RCC_OscConfig+0x6cc>
 800108e:	2301      	movs	r3, #1
 8001090:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001094:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001098:	fa93 f3a3 	rbit	r3, r3
 800109c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80010a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a4:	fab3 f383 	clz	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_RCC_OscConfig+0x648>)
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	461a      	mov	r2, r3
 80010b2:	2301      	movs	r3, #1
 80010b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fa45 	bl	8000544 <HAL_GetTick>
 80010ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	e00d      	b.n	80010dc <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010c0:	f7ff fa40 	bl	8000544 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d905      	bls.n	80010dc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e3c4      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 80010d4:	40021000 	.word	0x40021000
 80010d8:	10908120 	.word	0x10908120
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80010f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80010f8:	fa93 f2a3 	rbit	r2, r3
 80010fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001106:	2202      	movs	r2, #2
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	fa93 f2a3 	rbit	r2, r3
 8001114:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001118:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	4ba5      	ldr	r3, [pc, #660]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 800111c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001122:	2102      	movs	r1, #2
 8001124:	6019      	str	r1, [r3, #0]
 8001126:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	fa93 f1a3 	rbit	r1, r3
 8001130:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001134:	6019      	str	r1, [r3, #0]
  return(result);
 8001136:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b25b      	sxtb	r3, r3
 8001142:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001146:	b25b      	sxtb	r3, r3
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0b2      	beq.n	80010c0 <HAL_RCC_OscConfig+0x630>
 800115a:	e06a      	b.n	8001232 <HAL_RCC_OscConfig+0x7a2>
 800115c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	fa93 f2a3 	rbit	r2, r3
 800116e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001172:	601a      	str	r2, [r3, #0]
  return(result);
 8001174:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001178:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	fab3 f383 	clz	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	4b8c      	ldr	r3, [pc, #560]	; (80013b4 <HAL_RCC_OscConfig+0x924>)
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	461a      	mov	r2, r3
 8001188:	2300      	movs	r3, #0
 800118a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff f9da 	bl	8000544 <HAL_GetTick>
 8001190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	e009      	b.n	80011aa <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff f9d5 	bl	8000544 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e359      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 80011aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011ae:	2202      	movs	r2, #2
 80011b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	fa93 f2a3 	rbit	r2, r3
 80011bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011c6:	2202      	movs	r2, #2
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	fa93 f2a3 	rbit	r2, r3
 80011d4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011de:	2202      	movs	r2, #2
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	fa93 f2a3 	rbit	r2, r3
 80011ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80011f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f2:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80011f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011fa:	2102      	movs	r1, #2
 80011fc:	6019      	str	r1, [r3, #0]
 80011fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fa93 f1a3 	rbit	r1, r3
 8001208:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800120c:	6019      	str	r1, [r3, #0]
  return(result);
 800120e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b25b      	sxtb	r3, r3
 800121a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800121e:	b25b      	sxtb	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 031f 	and.w	r3, r3, #31
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1b1      	bne.n	8001196 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 8159 	beq.w	80014f4 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d112      	bne.n	800127a <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	4a56      	ldr	r2, [pc, #344]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001256:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	61d3      	str	r3, [r2, #28]
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001274:	2301      	movs	r3, #1
 8001276:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <HAL_RCC_OscConfig+0x928>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11a      	bne.n	80012bc <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_RCC_OscConfig+0x928>)
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_RCC_OscConfig+0x928>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff f957 	bl	8000544 <HAL_GetTick>
 8001296:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	e009      	b.n	80012b0 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129c:	f7ff f952 	bl	8000544 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b64      	cmp	r3, #100	; 0x64
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e2d6      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b0:	4b41      	ldr	r3, [pc, #260]	; (80013b8 <HAL_RCC_OscConfig+0x928>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0ef      	beq.n	800129c <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d106      	bne.n	80012d4 <HAL_RCC_OscConfig+0x844>
 80012c6:	4a3a      	ldr	r2, [pc, #232]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6213      	str	r3, [r2, #32]
 80012d2:	e02f      	b.n	8001334 <HAL_RCC_OscConfig+0x8a4>
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x868>
 80012de:	4a34      	ldr	r2, [pc, #208]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6213      	str	r3, [r2, #32]
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	6213      	str	r3, [r2, #32]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0x8a4>
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x88c>
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6213      	str	r3, [r2, #32]
 800130e:	4a28      	ldr	r2, [pc, #160]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001310:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6213      	str	r3, [r2, #32]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0x8a4>
 800131c:	4a24      	ldr	r2, [pc, #144]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	6213      	str	r3, [r2, #32]
 8001328:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	f023 0304 	bic.w	r3, r3, #4
 8001332:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06b      	beq.n	8001416 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff f901 	bl	8000544 <HAL_GetTick>
 8001342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001348:	f7ff f8fc 	bl	8000544 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f241 3288 	movw	r2, #5000	; 0x1388
 8001358:	4293      	cmp	r3, r2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e27e      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 8001360:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	fa93 f2a3 	rbit	r2, r3
 8001372:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800137c:	2202      	movs	r2, #2
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	fa93 f2a3 	rbit	r2, r3
 800138a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800138e:	601a      	str	r2, [r3, #0]
  return(result);
 8001390:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001394:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	095b      	lsrs	r3, r3, #5
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d108      	bne.n	80013bc <HAL_RCC_OscConfig+0x92c>
 80013aa:	4b01      	ldr	r3, [pc, #4]	; (80013b0 <HAL_RCC_OscConfig+0x920>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	e013      	b.n	80013d8 <HAL_RCC_OscConfig+0x948>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	10908120 	.word	0x10908120
 80013b8:	40007000 	.word	0x40007000
 80013bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013c0:	2202      	movs	r2, #2
 80013c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	fa93 f2a3 	rbit	r2, r3
 80013ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	4bc0      	ldr	r3, [pc, #768]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013dc:	2102      	movs	r1, #2
 80013de:	6011      	str	r1, [r2, #0]
 80013e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	fa92 f1a2 	rbit	r1, r2
 80013ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013ee:	6011      	str	r1, [r2, #0]
  return(result);
 80013f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	fab2 f282 	clz	r2, r2
 80013fa:	b252      	sxtb	r2, r2
 80013fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001400:	b252      	sxtb	r2, r2
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	f002 021f 	and.w	r2, r2, #31
 8001408:	2101      	movs	r1, #1
 800140a:	fa01 f202 	lsl.w	r2, r1, r2
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d099      	beq.n	8001348 <HAL_RCC_OscConfig+0x8b8>
 8001414:	e064      	b.n	80014e0 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff f895 	bl	8000544 <HAL_GetTick>
 800141a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff f890 	bl	8000544 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e212      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 8001438:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001454:	2202      	movs	r2, #2
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001466:	601a      	str	r2, [r3, #0]
  return(result);
 8001468:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800146c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	fab3 f383 	clz	r3, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	095b      	lsrs	r3, r3, #5
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d102      	bne.n	8001488 <HAL_RCC_OscConfig+0x9f8>
 8001482:	4b95      	ldr	r3, [pc, #596]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	e00d      	b.n	80014a4 <HAL_RCC_OscConfig+0xa14>
 8001488:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	4b8d      	ldr	r3, [pc, #564]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014a8:	2102      	movs	r1, #2
 80014aa:	6011      	str	r1, [r2, #0]
 80014ac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	fa92 f1a2 	rbit	r1, r2
 80014b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014ba:	6011      	str	r1, [r2, #0]
  return(result);
 80014bc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	fab2 f282 	clz	r2, r2
 80014c6:	b252      	sxtb	r2, r2
 80014c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014cc:	b252      	sxtb	r2, r2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f002 021f 	and.w	r2, r2, #31
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f202 	lsl.w	r2, r1, r2
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d19f      	bne.n	8001420 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e8:	4a7b      	ldr	r2, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80014ea:	4b7b      	ldr	r3, [pc, #492]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 81ae 	beq.w	800185c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001500:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	f000 81a5 	beq.w	8001858 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b02      	cmp	r3, #2
 8001516:	f040 811d 	bne.w	8001754 <HAL_RCC_OscConfig+0xcc4>
 800151a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800151e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001532:	601a      	str	r2, [r3, #0]
  return(result);
 8001534:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001538:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001542:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	461a      	mov	r2, r3
 800154a:	2300      	movs	r3, #0
 800154c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7fe fff9 	bl	8000544 <HAL_GetTick>
 8001552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001556:	e009      	b.n	800156c <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001558:	f7fe fff4 	bl	8000544 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e178      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 800156c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001584:	601a      	str	r2, [r3, #0]
  return(result);
 8001586:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800158a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	fab3 f383 	clz	r3, r3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d102      	bne.n	80015a6 <HAL_RCC_OscConfig+0xb16>
 80015a0:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e01b      	b.n	80015de <HAL_RCC_OscConfig+0xb4e>
 80015a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015e6:	6011      	str	r1, [r2, #0]
 80015e8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	fa92 f1a2 	rbit	r1, r2
 80015f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015f6:	6011      	str	r1, [r2, #0]
  return(result);
 80015f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	fab2 f282 	clz	r2, r2
 8001602:	b252      	sxtb	r2, r2
 8001604:	f042 0220 	orr.w	r2, r2, #32
 8001608:	b252      	sxtb	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f002 021f 	and.w	r2, r2, #31
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d19d      	bne.n	8001558 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161c:	492e      	ldr	r1, [pc, #184]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f023 020f 	bic.w	r2, r3, #15
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	4313      	orrs	r3, r2
 800162e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001630:	4829      	ldr	r0, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a19      	ldr	r1, [r3, #32]
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	430b      	orrs	r3, r1
 8001648:	4313      	orrs	r3, r2
 800164a:	6043      	str	r3, [r0, #4]
 800164c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001664:	601a      	str	r2, [r3, #0]
  return(result);
 8001666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800166a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	461a      	mov	r2, r3
 800167c:	2301      	movs	r3, #1
 800167e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7fe ff60 	bl	8000544 <HAL_GetTick>
 8001684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001688:	e009      	b.n	800169e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7fe ff5b 	bl	8000544 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0df      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 800169e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	fa93 f2a3 	rbit	r2, r3
 80016b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016b6:	601a      	str	r2, [r3, #0]
  return(result);
 80016b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d104      	bne.n	80016dc <HAL_RCC_OscConfig+0xc4c>
 80016d2:	4b01      	ldr	r3, [pc, #4]	; (80016d8 <HAL_RCC_OscConfig+0xc48>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xc84>
 80016d8:	40021000 	.word	0x40021000
 80016dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fa93 f2a3 	rbit	r2, r3
 800170a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_RCC_OscConfig+0xdd8>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800171c:	6011      	str	r1, [r2, #0]
 800171e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	fa92 f1a2 	rbit	r1, r2
 8001728:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800172c:	6011      	str	r1, [r2, #0]
  return(result);
 800172e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	b252      	sxtb	r2, r2
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	b252      	sxtb	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f002 021f 	and.w	r2, r2, #31
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f202 	lsl.w	r2, r1, r2
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d09b      	beq.n	800168a <HAL_RCC_OscConfig+0xbfa>
 8001752:	e083      	b.n	800185c <HAL_RCC_OscConfig+0xdcc>
 8001754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800175c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	fa93 f2a3 	rbit	r2, r3
 8001768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800176c:	601a      	str	r2, [r3, #0]
  return(result);
 800176e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001772:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800177c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	461a      	mov	r2, r3
 8001784:	2300      	movs	r3, #0
 8001786:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7fe fedc 	bl	8000544 <HAL_GetTick>
 800178c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001792:	f7fe fed7 	bl	8000544 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e05b      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
 80017a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f2a3 	rbit	r2, r3
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	601a      	str	r2, [r3, #0]
  return(result);
 80017c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	095b      	lsrs	r3, r3, #5
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0xd50>
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <HAL_RCC_OscConfig+0xdd8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e01b      	b.n	8001818 <HAL_RCC_OscConfig+0xd88>
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 031c 	add.w	r3, r7, #28
 80017fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_RCC_OscConfig+0xdd8>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	f107 0214 	add.w	r2, r7, #20
 800181c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001820:	6011      	str	r1, [r2, #0]
 8001822:	f107 0214 	add.w	r2, r7, #20
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	fa92 f1a2 	rbit	r1, r2
 800182c:	f107 0210 	add.w	r2, r7, #16
 8001830:	6011      	str	r1, [r2, #0]
  return(result);
 8001832:	f107 0210 	add.w	r2, r7, #16
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	fab2 f282 	clz	r2, r2
 800183c:	b252      	sxtb	r2, r2
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	b252      	sxtb	r2, r2
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	f002 021f 	and.w	r2, r2, #31
 800184a:	2101      	movs	r1, #1
 800184c:	fa01 f202 	lsl.w	r2, r1, r2
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d19d      	bne.n	8001792 <HAL_RCC_OscConfig+0xd02>
 8001856:	e001      	b.n	800185c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b09e      	sub	sp, #120	; 0x78
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e164      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0207 	and.w	r2, r3, #7
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d210      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	498f      	ldr	r1, [pc, #572]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001894:	4b8e      	ldr	r3, [pc, #568]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0207 	bic.w	r2, r3, #7
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b8b      	ldr	r3, [pc, #556]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0207 	and.w	r2, r3, #7
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e14c      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4984      	ldr	r1, [pc, #528]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80df 	beq.w	8001a9e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d13d      	bne.n	8001964 <HAL_RCC_ClockConfig+0xf8>
 80018e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80018f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d102      	bne.n	8001912 <HAL_RCC_ClockConfig+0xa6>
 800190c:	4b71      	ldr	r3, [pc, #452]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	e00f      	b.n	8001932 <HAL_RCC_ClockConfig+0xc6>
 8001912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001916:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	667b      	str	r3, [r7, #100]	; 0x64
 8001920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001924:	663b      	str	r3, [r7, #96]	; 0x60
 8001926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800192e:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001936:	65ba      	str	r2, [r7, #88]	; 0x58
 8001938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001940:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b252      	sxtb	r2, r2
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	b252      	sxtb	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f002 021f 	and.w	r2, r2, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d17d      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0f4      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d13d      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x17c>
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800197a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d102      	bne.n	8001996 <HAL_RCC_ClockConfig+0x12a>
 8001990:	4b50      	ldr	r3, [pc, #320]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	e00f      	b.n	80019b6 <HAL_RCC_ClockConfig+0x14a>
 8001996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	647b      	str	r3, [r7, #68]	; 0x44
 80019a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019a8:	643b      	str	r3, [r7, #64]	; 0x40
 80019aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ac:	fa93 f3a3 	rbit	r3, r3
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80019bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019be:	fa92 f2a2 	rbit	r2, r2
 80019c2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80019c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019c6:	fab2 f282 	clz	r2, r2
 80019ca:	b252      	sxtb	r2, r2
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	b252      	sxtb	r2, r2
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d13b      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b2      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	fab3 f383 	clz	r3, r3
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	095b      	lsrs	r3, r3, #5
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d102      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x1a4>
 8001a0a:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	e00d      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1c0>
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	fa93 f3a3 	rbit	r3, r3
 8001a26:	61fb      	str	r3, [r7, #28]
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	61ba      	str	r2, [r7, #24]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	617a      	str	r2, [r7, #20]
  return(result);
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	fab2 f282 	clz	r2, r2
 8001a3e:	b252      	sxtb	r2, r2
 8001a40:	f042 0220 	orr.w	r2, r2, #32
 8001a44:	b252      	sxtb	r2, r2
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e078      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5c:	491d      	ldr	r1, [pc, #116]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6e:	f7fe fd69 	bl	8000544 <HAL_GetTick>
 8001a72:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a76:	f7fe fd65 	bl	8000544 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e060      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_RCC_ClockConfig+0x268>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 020c 	and.w	r2, r3, #12
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d1eb      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0207 	and.w	r2, r3, #7
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d915      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 0207 	bic.w	r2, r3, #7
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_RCC_ClockConfig+0x264>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0207 	and.w	r2, r3, #7
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d006      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e03f      	b.n	8001b4e <HAL_RCC_ClockConfig+0x2e2>
 8001ace:	bf00      	nop
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	491c      	ldr	r1, [pc, #112]	; (8001b58 <HAL_RCC_ClockConfig+0x2ec>)
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <HAL_RCC_ClockConfig+0x2ec>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4915      	ldr	r1, [pc, #84]	; (8001b58 <HAL_RCC_ClockConfig+0x2ec>)
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <HAL_RCC_ClockConfig+0x2ec>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b16:	f000 f825 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_RCC_ClockConfig+0x2ec>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b24:	23f0      	movs	r3, #240	; 0xf0
 8001b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_RCC_ClockConfig+0x2f0>)
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_RCC_ClockConfig+0x2f4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f003 fdf2 	bl	8005730 <HAL_InitTick>
  
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3778      	adds	r7, #120	; 0x78
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08005a80 	.word	0x08005a80
 8001b60:	20000010 	.word	0x20000010

08001b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b08b      	sub	sp, #44	; 0x2c
 8001b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d002      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x30>
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x36>
 8001b92:	e03f      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b96:	623b      	str	r3, [r7, #32]
      break;
 8001b98:	e03f      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ba0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001ba4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	607b      	str	r3, [r7, #4]
  return(result);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	4a1d      	ldr	r2, [pc, #116]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001bba:	5cd3      	ldrb	r3, [r2, r3]
 8001bbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 8001bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	fb02 f303 	mul.w	r3, r2, r3
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	e007      	b.n	8001c0e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	fb02 f303 	mul.w	r3, r2, r3
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	623b      	str	r3, [r7, #32]
      break;
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c16:	623b      	str	r3, [r7, #32]
      break;
 8001c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	372c      	adds	r7, #44	; 0x2c
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	007a1200 	.word	0x007a1200
 8001c30:	08005a60 	.word	0x08005a60
 8001c34:	08005a70 	.word	0x08005a70

08001c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000010 	.word	0x20000010

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001c56:	f7ff ffef 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c64:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001c68:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	603b      	str	r3, [r7, #0]
  return(result);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08005a90 	.word	0x08005a90

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001c9a:	f7ff ffcd 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001ca8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cac:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	fa93 f3a3 	rbit	r3, r3
 8001cb4:	603b      	str	r3, [r7, #0]
  return(result);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001cc2:	5cd3      	ldrb	r3, [r2, r3]
 8001cc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08005a90 	.word	0x08005a90

08001cd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCC_GetClockConfig+0x60>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0207 	and.w	r2, r3, #7
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40022000 	.word	0x40022000

08001d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b092      	sub	sp, #72	; 0x48
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80d6 	beq.w	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10e      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	61d3      	str	r3, [r2, #28]
 8001d78:	4b47      	ldr	r3, [pc, #284]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d118      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d96:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fbcf 	bl	8000544 <HAL_GetTick>
 8001da6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e008      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001daa:	f7fe fbcb 	bl	8000544 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b64      	cmp	r3, #100	; 0x64
 8001db6:	d901      	bls.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1d4      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	4b37      	ldr	r3, [pc, #220]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 8083 	beq.w	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d07b      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b25      	ldr	r3, [pc, #148]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2301      	movs	r3, #1
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d04c      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe fb7d 	bl	8000544 <HAL_GetTick>
 8001e4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe fb79 	bl	8000544 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e180      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001e64:	2302      	movs	r3, #2
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	61fb      	str	r3, [r7, #28]
  return(result);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001e92:	4b01      	ldr	r3, [pc, #4]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	e00d      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	10908100 	.word	0x10908100
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	613a      	str	r2, [r7, #16]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	fa92 f2a2 	rbit	r2, r2
 8001ebe:	60fa      	str	r2, [r7, #12]
  return(result);
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b252      	sxtb	r2, r2
 8001ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ecc:	b252      	sxtb	r2, r2
 8001ece:	b2d2      	uxtb	r2, r2
 8001ed0:	f002 021f 	and.w	r2, r2, #31
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0b6      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ee0:	4990      	ldr	r1, [pc, #576]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee2:	4b90      	ldr	r3, [pc, #576]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ef2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4a8a      	ldr	r2, [pc, #552]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001efc:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d008      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f12:	4984      	ldr	r1, [pc, #528]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f14:	4b83      	ldr	r3, [pc, #524]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	f023 0203 	bic.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f30:	497c      	ldr	r1, [pc, #496]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f32:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f4e:	4975      	ldr	r1, [pc, #468]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f50:	4b74      	ldr	r3, [pc, #464]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f6c:	496d      	ldr	r1, [pc, #436]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f023 0210 	bic.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001f8a:	4966      	ldr	r1, [pc, #408]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f8c:	4b65      	ldr	r3, [pc, #404]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d008      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fa8:	495e      	ldr	r1, [pc, #376]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001faa:	4b5e      	ldr	r3, [pc, #376]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f023 0220 	bic.w	r2, r3, #32
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fc6:	4957      	ldr	r1, [pc, #348]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fe4:	494f      	ldr	r1, [pc, #316]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002002:	4948      	ldr	r1, [pc, #288]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002020:	4940      	ldr	r1, [pc, #256]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002022:	4b40      	ldr	r3, [pc, #256]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800203e:	4939      	ldr	r1, [pc, #228]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002040:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	4313      	orrs	r3, r2
 800204e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800205c:	4931      	ldr	r1, [pc, #196]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	4313      	orrs	r3, r2
 800206c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d008      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800207a:	492a      	ldr	r1, [pc, #168]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207c:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	4313      	orrs	r3, r2
 800208a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002098:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4313      	orrs	r3, r2
 80020a8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80020b6:	491b      	ldr	r1, [pc, #108]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	4313      	orrs	r3, r2
 80020c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80020d4:	4913      	ldr	r1, [pc, #76]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	4313      	orrs	r3, r2
 80020e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80020f2:	490c      	ldr	r1, [pc, #48]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	4313      	orrs	r3, r2
 8002102:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002110:	4904      	ldr	r1, [pc, #16]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	4313      	orrs	r3, r2
 8002120:	630b      	str	r3, [r1, #48]	; 0x30
 8002122:	e001      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002124:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4313      	orrs	r3, r2
 8002144:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002152:	4907      	ldr	r1, [pc, #28]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002160:	4313      	orrs	r3, r2
 8002162:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3748      	adds	r7, #72	; 0x48
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e01d      	b.n	80021c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f003 fa12 	bl	80055c4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	4619      	mov	r1, r3
 80021b2:	4610      	mov	r0, r2
 80021b4:	f000 fa2e 	bl	8002614 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	f042 0201 	orr.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	f241 1311 	movw	r3, #4369	; 0x1111
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10f      	bne.n	8002240 <HAL_TIM_Base_Stop+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	f240 4344 	movw	r3, #1092	; 0x444
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_TIM_Base_Stop+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	68d2      	ldr	r2, [r2, #12]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	f042 0201 	orr.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e01d      	b.n	80022da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f003 f966 	bl	8005584 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3304      	adds	r3, #4
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f000 f9a2 	bl	8002614 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fc74 	bl	8002be4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a1a      	ldr	r2, [pc, #104]	; (800236c <HAL_TIM_PWM_Start+0x88>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d018      	beq.n	8002338 <HAL_TIM_PWM_Start+0x54>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a19      	ldr	r2, [pc, #100]	; (8002370 <HAL_TIM_PWM_Start+0x8c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d013      	beq.n	8002338 <HAL_TIM_PWM_Start+0x54>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_TIM_PWM_Start+0x90>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00e      	beq.n	8002338 <HAL_TIM_PWM_Start+0x54>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_PWM_Start+0x94>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_TIM_PWM_Start+0x54>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <HAL_TIM_PWM_Start+0x98>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d004      	beq.n	8002338 <HAL_TIM_PWM_Start+0x54>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_TIM_PWM_Start+0x9c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_TIM_PWM_Start+0x58>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_TIM_PWM_Start+0x5a>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800234c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	f042 0201 	orr.w	r2, r2, #1
 8002360:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
} 
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40013400 	.word	0x40013400
 8002374:	40014000 	.word	0x40014000
 8002378:	40014400 	.word	0x40014400
 800237c:	40014800 	.word	0x40014800
 8002380:	40015000 	.word	0x40015000

08002384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b02      	cmp	r3, #2
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0202 	mvn.w	r2, #2
 80023b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f905 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f8f7 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f908 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d122      	bne.n	8002434 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d11b      	bne.n	8002434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0204 	mvn.w	r2, #4
 8002404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2202      	movs	r2, #2
 800240a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8db 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 8002420:	e005      	b.n	800242e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f8cd 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f8de 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d122      	bne.n	8002488 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	2b08      	cmp	r3, #8
 800244e:	d11b      	bne.n	8002488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0208 	mvn.w	r2, #8
 8002458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2204      	movs	r2, #4
 800245e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f8b1 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f8a3 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f8b4 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b10      	cmp	r3, #16
 8002494:	d122      	bne.n	80024dc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d11b      	bne.n	80024dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0210 	mvn.w	r2, #16
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2208      	movs	r2, #8
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f887 	bl	80025d6 <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f879 	bl	80025c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f88a 	bl	80025ea <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f06f 0201 	mvn.w	r2, #1
 8002500:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f002 fffc 	bl	8005500 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d10e      	bne.n	8002534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d107      	bne.n	8002534 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800252c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fcfa 	bl	8002f28 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002542:	d10e      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d107      	bne.n	8002562 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800255a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fced 	bl	8002f3c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d10e      	bne.n	800258e <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d107      	bne.n	800258e <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002586:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f838 	bl	80025fe <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d10e      	bne.n	80025ba <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	d107      	bne.n	80025ba <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0220 	mvn.w	r2, #32
 80025b2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fcad 	bl	8002f14 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a42      	ldr	r2, [pc, #264]	; (8002734 <TIM_Base_SetConfig+0x120>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <TIM_Base_SetConfig+0x44>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d00f      	beq.n	8002658 <TIM_Base_SetConfig+0x44>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3f      	ldr	r2, [pc, #252]	; (8002738 <TIM_Base_SetConfig+0x124>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00b      	beq.n	8002658 <TIM_Base_SetConfig+0x44>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3e      	ldr	r2, [pc, #248]	; (800273c <TIM_Base_SetConfig+0x128>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x44>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3d      	ldr	r2, [pc, #244]	; (8002740 <TIM_Base_SetConfig+0x12c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x44>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3c      	ldr	r2, [pc, #240]	; (8002744 <TIM_Base_SetConfig+0x130>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a31      	ldr	r2, [pc, #196]	; (8002734 <TIM_Base_SetConfig+0x120>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d01b      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2e      	ldr	r2, [pc, #184]	; (8002738 <TIM_Base_SetConfig+0x124>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d017      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2d      	ldr	r2, [pc, #180]	; (800273c <TIM_Base_SetConfig+0x128>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2c      	ldr	r2, [pc, #176]	; (8002740 <TIM_Base_SetConfig+0x12c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00f      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <TIM_Base_SetConfig+0x134>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2b      	ldr	r2, [pc, #172]	; (800274c <TIM_Base_SetConfig+0x138>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <TIM_Base_SetConfig+0x13c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_Base_SetConfig+0x9e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a25      	ldr	r2, [pc, #148]	; (8002744 <TIM_Base_SetConfig+0x130>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d108      	bne.n	80026c4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a12      	ldr	r2, [pc, #72]	; (8002734 <TIM_Base_SetConfig+0x120>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <TIM_Base_SetConfig+0x104>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <TIM_Base_SetConfig+0x12c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d00f      	beq.n	8002718 <TIM_Base_SetConfig+0x104>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a13      	ldr	r2, [pc, #76]	; (8002748 <TIM_Base_SetConfig+0x134>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0x104>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <TIM_Base_SetConfig+0x138>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x104>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <TIM_Base_SetConfig+0x13c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x104>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <TIM_Base_SetConfig+0x130>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	615a      	str	r2, [r3, #20]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40012c00 	.word	0x40012c00
 8002738:	40000400 	.word	0x40000400
 800273c:	40000800 	.word	0x40000800
 8002740:	40013400 	.word	0x40013400
 8002744:	40015000 	.word	0x40015000
 8002748:	40014000 	.word	0x40014000
 800274c:	40014400 	.word	0x40014400
 8002750:	40014800 	.word	0x40014800

08002754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f023 0201 	bic.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f023 0302 	bic.w	r3, r3, #2
 80027ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <TIM_OC1_SetConfig+0x128>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <TIM_OC1_SetConfig+0x94>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a2f      	ldr	r2, [pc, #188]	; (8002880 <TIM_OC1_SetConfig+0x12c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00f      	beq.n	80027e8 <TIM_OC1_SetConfig+0x94>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2e      	ldr	r2, [pc, #184]	; (8002884 <TIM_OC1_SetConfig+0x130>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <TIM_OC1_SetConfig+0x94>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <TIM_OC1_SetConfig+0x134>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <TIM_OC1_SetConfig+0x94>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a2c      	ldr	r2, [pc, #176]	; (800288c <TIM_OC1_SetConfig+0x138>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_OC1_SetConfig+0x94>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a2b      	ldr	r2, [pc, #172]	; (8002890 <TIM_OC1_SetConfig+0x13c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d10c      	bne.n	8002802 <TIM_OC1_SetConfig+0xae>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f023 0308 	bic.w	r3, r3, #8
 80027ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_OC1_SetConfig+0x128>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d013      	beq.n	8002832 <TIM_OC1_SetConfig+0xde>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <TIM_OC1_SetConfig+0x12c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00f      	beq.n	8002832 <TIM_OC1_SetConfig+0xde>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1b      	ldr	r2, [pc, #108]	; (8002884 <TIM_OC1_SetConfig+0x130>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00b      	beq.n	8002832 <TIM_OC1_SetConfig+0xde>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1a      	ldr	r2, [pc, #104]	; (8002888 <TIM_OC1_SetConfig+0x134>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <TIM_OC1_SetConfig+0xde>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <TIM_OC1_SetConfig+0x138>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d003      	beq.n	8002832 <TIM_OC1_SetConfig+0xde>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <TIM_OC1_SetConfig+0x13c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d111      	bne.n	8002856 <TIM_OC1_SetConfig+0x102>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	621a      	str	r2, [r3, #32]
} 
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40013400 	.word	0x40013400
 8002884:	40014000 	.word	0x40014000
 8002888:	40014400 	.word	0x40014400
 800288c:	40014800 	.word	0x40014800
 8002890:	40015000 	.word	0x40015000

08002894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0210 	bic.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028da:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0320 	bic.w	r3, r3, #32
 80028ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <TIM_OC2_SetConfig+0x11c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_OC2_SetConfig+0x80>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <TIM_OC2_SetConfig+0x120>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_OC2_SetConfig+0x80>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <TIM_OC2_SetConfig+0x124>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10d      	bne.n	8002930 <TIM_OC2_SetConfig+0x9c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292e:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <TIM_OC2_SetConfig+0x11c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <TIM_OC2_SetConfig+0xcc>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <TIM_OC2_SetConfig+0x120>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00f      	beq.n	8002960 <TIM_OC2_SetConfig+0xcc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <TIM_OC2_SetConfig+0x128>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00b      	beq.n	8002960 <TIM_OC2_SetConfig+0xcc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <TIM_OC2_SetConfig+0x12c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_OC2_SetConfig+0xcc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a1c      	ldr	r2, [pc, #112]	; (80029c4 <TIM_OC2_SetConfig+0x130>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC2_SetConfig+0xcc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <TIM_OC2_SetConfig+0x124>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d113      	bne.n	8002988 <TIM_OC2_SetConfig+0xf4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002966:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800296e:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40013400 	.word	0x40013400
 80029b8:	40015000 	.word	0x40015000
 80029bc:	40014000 	.word	0x40014000
 80029c0:	40014400 	.word	0x40014400
 80029c4:	40014800 	.word	0x40014800

080029c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0303 	bic.w	r3, r3, #3
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <TIM_OC3_SetConfig+0x118>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <TIM_OC3_SetConfig+0x7e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <TIM_OC3_SetConfig+0x11c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d003      	beq.n	8002a46 <TIM_OC3_SetConfig+0x7e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <TIM_OC3_SetConfig+0x120>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d10d      	bne.n	8002a62 <TIM_OC3_SetConfig+0x9a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a60:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1e      	ldr	r2, [pc, #120]	; (8002ae0 <TIM_OC3_SetConfig+0x118>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <TIM_OC3_SetConfig+0xca>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <TIM_OC3_SetConfig+0x11c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00f      	beq.n	8002a92 <TIM_OC3_SetConfig+0xca>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <TIM_OC3_SetConfig+0x124>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00b      	beq.n	8002a92 <TIM_OC3_SetConfig+0xca>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <TIM_OC3_SetConfig+0x128>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <TIM_OC3_SetConfig+0xca>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <TIM_OC3_SetConfig+0x12c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d003      	beq.n	8002a92 <TIM_OC3_SetConfig+0xca>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a16      	ldr	r2, [pc, #88]	; (8002ae8 <TIM_OC3_SetConfig+0x120>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d113      	bne.n	8002aba <TIM_OC3_SetConfig+0xf2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aa0:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	621a      	str	r2, [r3, #32]
}
 8002ad4:	bf00      	nop
 8002ad6:	371c      	adds	r7, #28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40013400 	.word	0x40013400
 8002ae8:	40015000 	.word	0x40015000
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b36:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b52:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	031b      	lsls	r3, r3, #12
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <TIM_OC4_SetConfig+0xd4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <TIM_OC4_SetConfig+0x98>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <TIM_OC4_SetConfig+0xd8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00f      	beq.n	8002b90 <TIM_OC4_SetConfig+0x98>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <TIM_OC4_SetConfig+0xdc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <TIM_OC4_SetConfig+0x98>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a17      	ldr	r2, [pc, #92]	; (8002bd8 <TIM_OC4_SetConfig+0xe0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_OC4_SetConfig+0x98>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <TIM_OC4_SetConfig+0xe4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_OC4_SetConfig+0x98>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a15      	ldr	r2, [pc, #84]	; (8002be0 <TIM_OC4_SetConfig+0xe8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d109      	bne.n	8002ba4 <TIM_OC4_SetConfig+0xac>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b96:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	019b      	lsls	r3, r3, #6
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40013400 	.word	0x40013400
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40014400 	.word	0x40014400
 8002bdc:	40014800 	.word	0x40014800
 8002be0:	40015000 	.word	0x40015000

08002be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	401a      	ands	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e105      	b.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2202      	movs	r2, #2
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b14      	cmp	r3, #20
 8002c5a:	f200 80f0 	bhi.w	8002e3e <HAL_TIM_PWM_ConfigChannel+0x212>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002cb9 	.word	0x08002cb9
 8002c68:	08002e3f 	.word	0x08002e3f
 8002c6c:	08002e3f 	.word	0x08002e3f
 8002c70:	08002e3f 	.word	0x08002e3f
 8002c74:	08002cf9 	.word	0x08002cf9
 8002c78:	08002e3f 	.word	0x08002e3f
 8002c7c:	08002e3f 	.word	0x08002e3f
 8002c80:	08002e3f 	.word	0x08002e3f
 8002c84:	08002d3b 	.word	0x08002d3b
 8002c88:	08002e3f 	.word	0x08002e3f
 8002c8c:	08002e3f 	.word	0x08002e3f
 8002c90:	08002e3f 	.word	0x08002e3f
 8002c94:	08002d7b 	.word	0x08002d7b
 8002c98:	08002e3f 	.word	0x08002e3f
 8002c9c:	08002e3f 	.word	0x08002e3f
 8002ca0:	08002e3f 	.word	0x08002e3f
 8002ca4:	08002dbd 	.word	0x08002dbd
 8002ca8:	08002e3f 	.word	0x08002e3f
 8002cac:	08002e3f 	.word	0x08002e3f
 8002cb0:	08002e3f 	.word	0x08002e3f
 8002cb4:	08002dfd 	.word	0x08002dfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fd48 	bl	8002754 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	6992      	ldr	r2, [r2, #24]
 8002cce:	f042 0208 	orr.w	r2, r2, #8
 8002cd2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	6992      	ldr	r2, [r2, #24]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	6991      	ldr	r1, [r2, #24]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	6912      	ldr	r2, [r2, #16]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	619a      	str	r2, [r3, #24]
    }
    break;
 8002cf6:	e0a3      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fdc8 	bl	8002894 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	6992      	ldr	r2, [r2, #24]
 8002d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d12:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	6992      	ldr	r2, [r2, #24]
 8002d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	6991      	ldr	r1, [r2, #24]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	6912      	ldr	r2, [r2, #16]
 8002d32:	0212      	lsls	r2, r2, #8
 8002d34:	430a      	orrs	r2, r1
 8002d36:	619a      	str	r2, [r3, #24]
    }
    break;
 8002d38:	e082      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff fe41 	bl	80029c8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	69d2      	ldr	r2, [r2, #28]
 8002d50:	f042 0208 	orr.w	r2, r2, #8
 8002d54:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	69d2      	ldr	r2, [r2, #28]
 8002d60:	f022 0204 	bic.w	r2, r2, #4
 8002d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	69d1      	ldr	r1, [r2, #28]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	6912      	ldr	r2, [r2, #16]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	61da      	str	r2, [r3, #28]
    }
    break;
 8002d78:	e062      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff feb9 	bl	8002af8 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	69d2      	ldr	r2, [r2, #28]
 8002d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d94:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	69d2      	ldr	r2, [r2, #28]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	69d1      	ldr	r1, [r2, #28]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	6912      	ldr	r2, [r2, #16]
 8002db4:	0212      	lsls	r2, r2, #8
 8002db6:	430a      	orrs	r2, r1
 8002db8:	61da      	str	r2, [r3, #28]
    }
    break;
 8002dba:	e041      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 f8c4 	bl	8002f50 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002dd2:	f042 0208 	orr.w	r2, r2, #8
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002de2:	f022 0204 	bic.w	r2, r2, #4
 8002de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	6912      	ldr	r2, [r2, #16]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002dfa:	e021      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 f914 	bl	8003030 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	6912      	ldr	r2, [r2, #16]
 8002e36:	0212      	lsls	r2, r2, #8
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002e3c:	e000      	b.n	8002e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8002e3e:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop

08002e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e042      	b.n	8002efa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d004      	beq.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002eb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
} 
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40012c00 	.word	0x40012c00
 8002f0c:	40013400 	.word	0x40013400
 8002f10:	40015000 	.word	0x40015000

08002f14 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <TIM_OC5_SetConfig+0xc8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <TIM_OC5_SetConfig+0x8e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	; (800301c <TIM_OC5_SetConfig+0xcc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00f      	beq.n	8002fde <TIM_OC5_SetConfig+0x8e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a17      	ldr	r2, [pc, #92]	; (8003020 <TIM_OC5_SetConfig+0xd0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_OC5_SetConfig+0x8e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a16      	ldr	r2, [pc, #88]	; (8003024 <TIM_OC5_SetConfig+0xd4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_OC5_SetConfig+0x8e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a15      	ldr	r2, [pc, #84]	; (8003028 <TIM_OC5_SetConfig+0xd8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_OC5_SetConfig+0x8e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <TIM_OC5_SetConfig+0xdc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d109      	bne.n	8002ff2 <TIM_OC5_SetConfig+0xa2>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40013400 	.word	0x40013400
 8003020:	40014000 	.word	0x40014000
 8003024:	40014400 	.word	0x40014400
 8003028:	40014800 	.word	0x40014800
 800302c:	40015000 	.word	0x40015000

08003030 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003082:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	051b      	lsls	r3, r3, #20
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a1a      	ldr	r2, [pc, #104]	; (80030fc <TIM_OC6_SetConfig+0xcc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <TIM_OC6_SetConfig+0x90>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <TIM_OC6_SetConfig+0xd0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00f      	beq.n	80030c0 <TIM_OC6_SetConfig+0x90>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a18      	ldr	r2, [pc, #96]	; (8003104 <TIM_OC6_SetConfig+0xd4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d00b      	beq.n	80030c0 <TIM_OC6_SetConfig+0x90>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <TIM_OC6_SetConfig+0xd8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <TIM_OC6_SetConfig+0x90>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a16      	ldr	r2, [pc, #88]	; (800310c <TIM_OC6_SetConfig+0xdc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_OC6_SetConfig+0x90>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <TIM_OC6_SetConfig+0xe0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d109      	bne.n	80030d4 <TIM_OC6_SetConfig+0xa4>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	029b      	lsls	r3, r3, #10
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
} 
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40013400 	.word	0x40013400
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40015000 	.word	0x40015000

08003114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e043      	b.n	80031ae <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f002 fab6 	bl	80056ac <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f82d 	bl	80031b8 <UART_SetConfig>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e022      	b.n	80031ae <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fa1f 	bl	80035b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	6852      	ldr	r2, [r2, #4]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	6892      	ldr	r2, [r2, #8]
 8003190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003194:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 faa6 	bl	80036f8 <UART_CheckIdleState>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80031c4:	2310      	movs	r3, #16
 80031c6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	4ba6      	ldr	r3, [pc, #664]	; (8003490 <UART_SetConfig+0x2d8>)
 80031f8:	400b      	ands	r3, r1
 80031fa:	68f9      	ldr	r1, [r7, #12]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	6852      	ldr	r2, [r2, #4]
 800320a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68d2      	ldr	r2, [r2, #12]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a96      	ldr	r2, [pc, #600]	; (8003494 <UART_SetConfig+0x2dc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d121      	bne.n	8003284 <UART_SetConfig+0xcc>
 8003240:	4b95      	ldr	r3, [pc, #596]	; (8003498 <UART_SetConfig+0x2e0>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d817      	bhi.n	800327c <UART_SetConfig+0xc4>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <UART_SetConfig+0x9c>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	08003265 	.word	0x08003265
 8003258:	08003271 	.word	0x08003271
 800325c:	08003277 	.word	0x08003277
 8003260:	0800326b 	.word	0x0800326b
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
 8003268:	e0b2      	b.n	80033d0 <UART_SetConfig+0x218>
 800326a:	2302      	movs	r3, #2
 800326c:	75fb      	strb	r3, [r7, #23]
 800326e:	e0af      	b.n	80033d0 <UART_SetConfig+0x218>
 8003270:	2304      	movs	r3, #4
 8003272:	75fb      	strb	r3, [r7, #23]
 8003274:	e0ac      	b.n	80033d0 <UART_SetConfig+0x218>
 8003276:	2308      	movs	r3, #8
 8003278:	75fb      	strb	r3, [r7, #23]
 800327a:	e0a9      	b.n	80033d0 <UART_SetConfig+0x218>
 800327c:	2310      	movs	r3, #16
 800327e:	75fb      	strb	r3, [r7, #23]
 8003280:	bf00      	nop
 8003282:	e0a5      	b.n	80033d0 <UART_SetConfig+0x218>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a84      	ldr	r2, [pc, #528]	; (800349c <UART_SetConfig+0x2e4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d123      	bne.n	80032d6 <UART_SetConfig+0x11e>
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <UART_SetConfig+0x2e0>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d012      	beq.n	80032c2 <UART_SetConfig+0x10a>
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d802      	bhi.n	80032a8 <UART_SetConfig+0xf0>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <UART_SetConfig+0xfe>
 80032a6:	e012      	b.n	80032ce <UART_SetConfig+0x116>
 80032a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ac:	d00c      	beq.n	80032c8 <UART_SetConfig+0x110>
 80032ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b2:	d003      	beq.n	80032bc <UART_SetConfig+0x104>
 80032b4:	e00b      	b.n	80032ce <UART_SetConfig+0x116>
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
 80032ba:	e089      	b.n	80033d0 <UART_SetConfig+0x218>
 80032bc:	2302      	movs	r3, #2
 80032be:	75fb      	strb	r3, [r7, #23]
 80032c0:	e086      	b.n	80033d0 <UART_SetConfig+0x218>
 80032c2:	2304      	movs	r3, #4
 80032c4:	75fb      	strb	r3, [r7, #23]
 80032c6:	e083      	b.n	80033d0 <UART_SetConfig+0x218>
 80032c8:	2308      	movs	r3, #8
 80032ca:	75fb      	strb	r3, [r7, #23]
 80032cc:	e080      	b.n	80033d0 <UART_SetConfig+0x218>
 80032ce:	2310      	movs	r3, #16
 80032d0:	75fb      	strb	r3, [r7, #23]
 80032d2:	bf00      	nop
 80032d4:	e07c      	b.n	80033d0 <UART_SetConfig+0x218>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <UART_SetConfig+0x2e8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d123      	bne.n	8003328 <UART_SetConfig+0x170>
 80032e0:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <UART_SetConfig+0x2e0>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80032e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032ec:	d012      	beq.n	8003314 <UART_SetConfig+0x15c>
 80032ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032f2:	d802      	bhi.n	80032fa <UART_SetConfig+0x142>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d007      	beq.n	8003308 <UART_SetConfig+0x150>
 80032f8:	e012      	b.n	8003320 <UART_SetConfig+0x168>
 80032fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032fe:	d00c      	beq.n	800331a <UART_SetConfig+0x162>
 8003300:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003304:	d003      	beq.n	800330e <UART_SetConfig+0x156>
 8003306:	e00b      	b.n	8003320 <UART_SetConfig+0x168>
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]
 800330c:	e060      	b.n	80033d0 <UART_SetConfig+0x218>
 800330e:	2302      	movs	r3, #2
 8003310:	75fb      	strb	r3, [r7, #23]
 8003312:	e05d      	b.n	80033d0 <UART_SetConfig+0x218>
 8003314:	2304      	movs	r3, #4
 8003316:	75fb      	strb	r3, [r7, #23]
 8003318:	e05a      	b.n	80033d0 <UART_SetConfig+0x218>
 800331a:	2308      	movs	r3, #8
 800331c:	75fb      	strb	r3, [r7, #23]
 800331e:	e057      	b.n	80033d0 <UART_SetConfig+0x218>
 8003320:	2310      	movs	r3, #16
 8003322:	75fb      	strb	r3, [r7, #23]
 8003324:	bf00      	nop
 8003326:	e053      	b.n	80033d0 <UART_SetConfig+0x218>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5d      	ldr	r2, [pc, #372]	; (80034a4 <UART_SetConfig+0x2ec>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d123      	bne.n	800337a <UART_SetConfig+0x1c2>
 8003332:	4b59      	ldr	r3, [pc, #356]	; (8003498 <UART_SetConfig+0x2e0>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d012      	beq.n	8003366 <UART_SetConfig+0x1ae>
 8003340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003344:	d802      	bhi.n	800334c <UART_SetConfig+0x194>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <UART_SetConfig+0x1a2>
 800334a:	e012      	b.n	8003372 <UART_SetConfig+0x1ba>
 800334c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003350:	d00c      	beq.n	800336c <UART_SetConfig+0x1b4>
 8003352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003356:	d003      	beq.n	8003360 <UART_SetConfig+0x1a8>
 8003358:	e00b      	b.n	8003372 <UART_SetConfig+0x1ba>
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]
 800335e:	e037      	b.n	80033d0 <UART_SetConfig+0x218>
 8003360:	2302      	movs	r3, #2
 8003362:	75fb      	strb	r3, [r7, #23]
 8003364:	e034      	b.n	80033d0 <UART_SetConfig+0x218>
 8003366:	2304      	movs	r3, #4
 8003368:	75fb      	strb	r3, [r7, #23]
 800336a:	e031      	b.n	80033d0 <UART_SetConfig+0x218>
 800336c:	2308      	movs	r3, #8
 800336e:	75fb      	strb	r3, [r7, #23]
 8003370:	e02e      	b.n	80033d0 <UART_SetConfig+0x218>
 8003372:	2310      	movs	r3, #16
 8003374:	75fb      	strb	r3, [r7, #23]
 8003376:	bf00      	nop
 8003378:	e02a      	b.n	80033d0 <UART_SetConfig+0x218>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4a      	ldr	r2, [pc, #296]	; (80034a8 <UART_SetConfig+0x2f0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d123      	bne.n	80033cc <UART_SetConfig+0x214>
 8003384:	4b44      	ldr	r3, [pc, #272]	; (8003498 <UART_SetConfig+0x2e0>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800338c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003390:	d012      	beq.n	80033b8 <UART_SetConfig+0x200>
 8003392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003396:	d802      	bhi.n	800339e <UART_SetConfig+0x1e6>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <UART_SetConfig+0x1f4>
 800339c:	e012      	b.n	80033c4 <UART_SetConfig+0x20c>
 800339e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033a2:	d00c      	beq.n	80033be <UART_SetConfig+0x206>
 80033a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a8:	d003      	beq.n	80033b2 <UART_SetConfig+0x1fa>
 80033aa:	e00b      	b.n	80033c4 <UART_SetConfig+0x20c>
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
 80033b0:	e00e      	b.n	80033d0 <UART_SetConfig+0x218>
 80033b2:	2302      	movs	r3, #2
 80033b4:	75fb      	strb	r3, [r7, #23]
 80033b6:	e00b      	b.n	80033d0 <UART_SetConfig+0x218>
 80033b8:	2304      	movs	r3, #4
 80033ba:	75fb      	strb	r3, [r7, #23]
 80033bc:	e008      	b.n	80033d0 <UART_SetConfig+0x218>
 80033be:	2308      	movs	r3, #8
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	e005      	b.n	80033d0 <UART_SetConfig+0x218>
 80033c4:	2310      	movs	r3, #16
 80033c6:	75fb      	strb	r3, [r7, #23]
 80033c8:	bf00      	nop
 80033ca:	e001      	b.n	80033d0 <UART_SetConfig+0x218>
 80033cc:	2310      	movs	r3, #16
 80033ce:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d8:	d17d      	bne.n	80034d6 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d865      	bhi.n	80034ac <UART_SetConfig+0x2f4>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0x230>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	08003429 	.word	0x08003429
 80033f0:	08003445 	.word	0x08003445
 80033f4:	080034ad 	.word	0x080034ad
 80033f8:	0800345f 	.word	0x0800345f
 80033fc:	080034ad 	.word	0x080034ad
 8003400:	080034ad 	.word	0x080034ad
 8003404:	080034ad 	.word	0x080034ad
 8003408:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800340c:	f7fe fc20 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8003410:	4603      	mov	r3, r0
 8003412:	005a      	lsls	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	441a      	add	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	82bb      	strh	r3, [r7, #20]
        break;
 8003426:	e044      	b.n	80034b2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003428:	f7fe fc34 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 800342c:	4603      	mov	r3, r0
 800342e:	005a      	lsls	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	82bb      	strh	r3, [r7, #20]
        break;
 8003442:	e036      	b.n	80034b2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800344e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6852      	ldr	r2, [r2, #4]
 8003456:	fbb3 f3f2 	udiv	r3, r3, r2
 800345a:	82bb      	strh	r3, [r7, #20]
        break;
 800345c:	e029      	b.n	80034b2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800345e:	f7fe fb81 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8003462:	4603      	mov	r3, r0
 8003464:	005a      	lsls	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	441a      	add	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	82bb      	strh	r3, [r7, #20]
        break;
 8003478:	e01b      	b.n	80034b2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	82bb      	strh	r3, [r7, #20]
        break;
 800348e:	e010      	b.n	80034b2 <UART_SetConfig+0x2fa>
 8003490:	efff69f3 	.word	0xefff69f3
 8003494:	40013800 	.word	0x40013800
 8003498:	40021000 	.word	0x40021000
 800349c:	40004400 	.word	0x40004400
 80034a0:	40004800 	.word	0x40004800
 80034a4:	40004c00 	.word	0x40004c00
 80034a8:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	74fb      	strb	r3, [r7, #19]
        break;
 80034b0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80034b2:	8abb      	ldrh	r3, [r7, #20]
 80034b4:	f023 030f 	bic.w	r3, r3, #15
 80034b8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ba:	8abb      	ldrh	r3, [r7, #20]
 80034bc:	105b      	asrs	r3, r3, #1
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	897a      	ldrh	r2, [r7, #10]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	e069      	b.n	80035aa <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d863      	bhi.n	80035a4 <UART_SetConfig+0x3ec>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x32c>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003529 	.word	0x08003529
 80034ec:	08003549 	.word	0x08003549
 80034f0:	080035a5 	.word	0x080035a5
 80034f4:	08003569 	.word	0x08003569
 80034f8:	080035a5 	.word	0x080035a5
 80034fc:	080035a5 	.word	0x080035a5
 8003500:	080035a5 	.word	0x080035a5
 8003504:	08003589 	.word	0x08003589
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681c      	ldr	r4, [r3, #0]
 800350c:	f7fe fba0 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	085b      	lsrs	r3, r3, #1
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	b29b      	uxth	r3, r3
 8003524:	60e3      	str	r3, [r4, #12]
        break;
 8003526:	e040      	b.n	80035aa <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681c      	ldr	r4, [r3, #0]
 800352c:	f7fe fbb2 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	60e3      	str	r3, [r4, #12]
        break;
 8003546:	e030      	b.n	80035aa <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003556:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	6849      	ldr	r1, [r1, #4]
 800355e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003562:	b29b      	uxth	r3, r3
 8003564:	60d3      	str	r3, [r2, #12]
        break;
 8003566:	e020      	b.n	80035aa <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681c      	ldr	r4, [r3, #0]
 800356c:	f7fe fafa 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	60e3      	str	r3, [r4, #12]
        break;
 8003586:	e010      	b.n	80035aa <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6852      	ldr	r2, [r2, #4]
 8003590:	0852      	lsrs	r2, r2, #1
 8003592:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6852      	ldr	r2, [r2, #4]
 800359a:	fbb1 f2f2 	udiv	r2, r1, r2
 800359e:	b292      	uxth	r2, r2
 80035a0:	60da      	str	r2, [r3, #12]
        break;
 80035a2:	e002      	b.n	80035aa <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	74fb      	strb	r3, [r7, #19]
        break;
 80035a8:	bf00      	nop
    }
  }

  return ret;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]

}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	6852      	ldr	r2, [r2, #4]
 80035d2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	6852      	ldr	r2, [r2, #4]
 80035f4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	6852      	ldr	r2, [r2, #4]
 8003616:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	6852      	ldr	r2, [r2, #4]
 8003638:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003684:	430a      	orrs	r2, r1
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01a      	beq.n	80036ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	6852      	ldr	r2, [r2, #4]
 800369e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d10a      	bne.n	80036ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	6852      	ldr	r2, [r2, #4]
 80036be:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800370a:	f7fc ff1b 	bl	8000544 <HAL_GetTick>
 800370e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b08      	cmp	r3, #8
 800371c:	d10e      	bne.n	800373c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f82c 	bl	800378a <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e022      	b.n	8003782 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0304 	and.w	r3, r3, #4
 8003746:	2b04      	cmp	r3, #4
 8003748:	d10e      	bne.n	8003768 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f816 	bl	800378a <UART_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e00c      	b.n	8003782 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379a:	e02c      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a2:	d028      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x30>
 80037aa:	f7fc fecb 	bl	8000544 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	1ad2      	subs	r2, r2, r3
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d91d      	bls.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	401a      	ands	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d0c3      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800381e:	b480      	push	{r7}
 8003820:	b085      	sub	sp, #20
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800382c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003830:	2b84      	cmp	r3, #132	; 0x84
 8003832:	d005      	beq.n	8003840 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003834:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	3303      	adds	r3, #3
 800383e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003852:	f000 fe03 	bl	800445c <vTaskStartScheduler>
  
  return osOK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}

0800385c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685c      	ldr	r4, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003872:	b29e      	uxth	r6, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ffcf 	bl	800381e <makeFreeRtosPriority>
 8003880:	4602      	mov	r2, r0
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	9200      	str	r2, [sp, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	4632      	mov	r2, r6
 800388e:	4629      	mov	r1, r5
 8003890:	4620      	mov	r0, r4
 8003892:	f000 fc85 	bl	80041a0 <xTaskCreate>
 8003896:	4603      	mov	r3, r0
 8003898:	2b01      	cmp	r3, #1
 800389a:	d001      	beq.n	80038a0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080038ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a09      	ldr	r2, [pc, #36]	; (80038dc <osDelay+0x30>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	08db      	lsrs	r3, r3, #3
 80038be:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <osDelay+0x1e>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	e000      	b.n	80038cc <osDelay+0x20>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fd91 	bl	80043f4 <vTaskDelay>
  
  return osOK;
 80038d2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	cccccccd 	.word	0xcccccccd

080038e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f103 0208 	add.w	r2, r3, #8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f103 0208 	add.w	r2, r3, #8
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f103 0208 	add.w	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003998:	d103      	bne.n	80039a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e00c      	b.n	80039bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3308      	adds	r3, #8
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e002      	b.n	80039b0 <vListInsert+0x2e>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d9f6      	bls.n	80039aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6892      	ldr	r2, [r2, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6852      	ldr	r2, [r2, #4]
 8003a14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d103      	bne.n	8003a28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	1e5a      	subs	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3b04      	subs	r3, #4
 8003a58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3b04      	subs	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f023 0201 	bic.w	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3b04      	subs	r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <pxPortInitialiseStack+0x64>)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b14      	subs	r3, #20
 8003a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	3b04      	subs	r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f06f 0202 	mvn.w	r2, #2
 8003a96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3b20      	subs	r3, #32
 8003a9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	08003ab1 	.word	0x08003ab1

08003ab0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <prvTaskExitError+0x38>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003abe:	d009      	beq.n	8003ad4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	e7fe      	b.n	8003ad2 <prvTaskExitError+0x22>
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003ae6:	e7fe      	b.n	8003ae6 <prvTaskExitError+0x36>
 8003ae8:	20000004 	.word	0x20000004
 8003aec:	00000000 	.word	0x00000000

08003af0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003af0:	4b07      	ldr	r3, [pc, #28]	; (8003b10 <pxCurrentTCBConst2>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	6808      	ldr	r0, [r1, #0]
 8003af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afa:	f380 8809 	msr	PSP, r0
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8811 	msr	BASEPRI, r0
 8003b0a:	4770      	bx	lr
 8003b0c:	f3af 8000 	nop.w

08003b10 <pxCurrentTCBConst2>:
 8003b10:	200018b4 	.word	0x200018b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop

08003b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003b18:	4806      	ldr	r0, [pc, #24]	; (8003b34 <prvPortStartFirstTask+0x1c>)
 8003b1a:	6800      	ldr	r0, [r0, #0]
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f380 8808 	msr	MSP, r0
 8003b22:	b662      	cpsie	i
 8003b24:	b661      	cpsie	f
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	df00      	svc	0
 8003b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003b32:	bf00      	nop
 8003b34:	e000ed08 	.word	0xe000ed08

08003b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <xPortStartScheduler+0xf4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a3b      	ldr	r2, [pc, #236]	; (8003c30 <xPortStartScheduler+0xf8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <xPortStartScheduler+0x24>
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	e7fe      	b.n	8003b5a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b5c:	4b33      	ldr	r3, [pc, #204]	; (8003c2c <xPortStartScheduler+0xf4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <xPortStartScheduler+0xfc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d109      	bne.n	8003b7a <xPortStartScheduler+0x42>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e7fe      	b.n	8003b78 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b7a:	4b2f      	ldr	r3, [pc, #188]	; (8003c38 <xPortStartScheduler+0x100>)
 8003b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	22ff      	movs	r2, #255	; 0xff
 8003b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <xPortStartScheduler+0x104>)
 8003ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <xPortStartScheduler+0x108>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ba8:	e009      	b.n	8003bbe <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003baa:	4b25      	ldr	r3, [pc, #148]	; (8003c40 <xPortStartScheduler+0x108>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <xPortStartScheduler+0x108>)
 8003bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc6:	2b80      	cmp	r3, #128	; 0x80
 8003bc8:	d0ef      	beq.n	8003baa <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <xPortStartScheduler+0x108>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <xPortStartScheduler+0x108>)
 8003bd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <xPortStartScheduler+0x108>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <xPortStartScheduler+0x108>)
 8003bde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003be8:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <xPortStartScheduler+0x10c>)
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <xPortStartScheduler+0x10c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bf4:	4a13      	ldr	r2, [pc, #76]	; (8003c44 <xPortStartScheduler+0x10c>)
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <xPortStartScheduler+0x10c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bfe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c00:	f000 f8d2 	bl	8003da8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c04:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <xPortStartScheduler+0x110>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c0a:	f000 f8e9 	bl	8003de0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c0e:	4a0f      	ldr	r2, [pc, #60]	; (8003c4c <xPortStartScheduler+0x114>)
 8003c10:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <xPortStartScheduler+0x114>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c1a:	f7ff ff7d 	bl	8003b18 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003c1e:	f7ff ff47 	bl	8003ab0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	410fc271 	.word	0x410fc271
 8003c34:	410fc270 	.word	0x410fc270
 8003c38:	e000e400 	.word	0xe000e400
 8003c3c:	20000034 	.word	0x20000034
 8003c40:	20000038 	.word	0x20000038
 8003c44:	e000ed20 	.word	0xe000ed20
 8003c48:	20000004 	.word	0x20000004
 8003c4c:	e000ef34 	.word	0xe000ef34

08003c50 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <vPortEnterCritical+0x54>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <vPortEnterCritical+0x54>)
 8003c70:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003c72:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <vPortEnterCritical+0x54>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10e      	bne.n	8003c98 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <vPortEnterCritical+0x58>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d009      	beq.n	8003c98 <vPortEnterCritical+0x48>
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	e7fe      	b.n	8003c96 <vPortEnterCritical+0x46>
	}
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000004 	.word	0x20000004
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <vPortExitCritical+0x4c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d109      	bne.n	8003cce <vPortExitCritical+0x22>
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	e7fe      	b.n	8003ccc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <vPortExitCritical+0x4c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <vPortExitCritical+0x4c>)
 8003cd6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003cd8:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <vPortExitCritical+0x4c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <vPortExitCritical+0x3e>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	00000000 	.word	0x00000000

08003d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d00:	f3ef 8009 	mrs	r0, PSP
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <pxCurrentTCBConst>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	f01e 0f10 	tst.w	lr, #16
 8003d10:	bf08      	it	eq
 8003d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d1a:	6010      	str	r0, [r2, #0]
 8003d1c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003d20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003d24:	f380 8811 	msr	BASEPRI, r0
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f000 fd40 	bl	80047b4 <vTaskSwitchContext>
 8003d34:	f04f 0000 	mov.w	r0, #0
 8003d38:	f380 8811 	msr	BASEPRI, r0
 8003d3c:	bc08      	pop	{r3}
 8003d3e:	6819      	ldr	r1, [r3, #0]
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d46:	f01e 0f10 	tst.w	lr, #16
 8003d4a:	bf08      	it	eq
 8003d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d50:	f380 8809 	msr	PSP, r0
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w

08003d60 <pxCurrentTCBConst>:
 8003d60:	200018b4 	.word	0x200018b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop

08003d68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d80:	f000 fc5c 	bl	800463c <xTaskIncrementTick>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <SysTick_Handler+0x3c>)
 8003d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dac:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <vPortSetupTimerInterrupt+0x28>)
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <vPortSetupTimerInterrupt+0x2c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4909      	ldr	r1, [pc, #36]	; (8003dd8 <vPortSetupTimerInterrupt+0x30>)
 8003db4:	fba1 1303 	umull	r1, r3, r1, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <vPortSetupTimerInterrupt+0x34>)
 8003dc0:	2207      	movs	r2, #7
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	e000e014 	.word	0xe000e014
 8003dd4:	20000010 	.word	0x20000010
 8003dd8:	51eb851f 	.word	0x51eb851f
 8003ddc:	e000e010 	.word	0xe000e010

08003de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003df0 <vPortEnableVFP+0x10>
 8003de4:	6801      	ldr	r1, [r0, #0]
 8003de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dea:	6001      	str	r1, [r0, #0]
 8003dec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003dee:	bf00      	nop
 8003df0:	e000ed88 	.word	0xe000ed88

08003df4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e00:	f000 fb72 	bl	80044e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e04:	4b57      	ldr	r3, [pc, #348]	; (8003f64 <pvPortMalloc+0x170>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e0c:	f000 f90c 	bl	8004028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e10:	4b55      	ldr	r3, [pc, #340]	; (8003f68 <pvPortMalloc+0x174>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f040 808c 	bne.w	8003f36 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01c      	beq.n	8003e5e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003e24:	2208      	movs	r2, #8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d013      	beq.n	8003e5e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f023 0307 	bic.w	r3, r3, #7
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <pvPortMalloc+0x6a>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e7fe      	b.n	8003e5c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d068      	beq.n	8003f36 <pvPortMalloc+0x142>
 8003e64:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <pvPortMalloc+0x178>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d863      	bhi.n	8003f36 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e6e:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <pvPortMalloc+0x17c>)
 8003e70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e72:	4b3f      	ldr	r3, [pc, #252]	; (8003f70 <pvPortMalloc+0x17c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e78:	e004      	b.n	8003e84 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d203      	bcs.n	8003e96 <pvPortMalloc+0xa2>
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f1      	bne.n	8003e7a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e96:	4b33      	ldr	r3, [pc, #204]	; (8003f64 <pvPortMalloc+0x170>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d04a      	beq.n	8003f36 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	4413      	add	r3, r2
 8003ea8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	2308      	movs	r3, #8
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d91e      	bls.n	8003f00 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <pvPortMalloc+0xf4>
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e7fe      	b.n	8003ee6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad2      	subs	r2, r2, r3
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003efa:	69b8      	ldr	r0, [r7, #24]
 8003efc:	f000 f8f6 	bl	80040ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f00:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <pvPortMalloc+0x178>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <pvPortMalloc+0x178>)
 8003f0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f0e:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <pvPortMalloc+0x178>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <pvPortMalloc+0x180>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d203      	bcs.n	8003f22 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <pvPortMalloc+0x178>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <pvPortMalloc+0x180>)
 8003f20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <pvPortMalloc+0x174>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f36:	f000 fae5 	bl	8004504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <pvPortMalloc+0x164>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e7fe      	b.n	8003f56 <pvPortMalloc+0x162>
	return pvReturn;
 8003f58:	69fb      	ldr	r3, [r7, #28]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3728      	adds	r7, #40	; 0x28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200018a4 	.word	0x200018a4
 8003f68:	200018b0 	.word	0x200018b0
 8003f6c:	200018a8 	.word	0x200018a8
 8003f70:	2000189c 	.word	0x2000189c
 8003f74:	200018ac 	.word	0x200018ac

08003f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d046      	beq.n	8004018 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f8a:	2308      	movs	r3, #8
 8003f8c:	425b      	negs	r3, r3
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4413      	add	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <vPortFree+0xa8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <vPortFree+0x42>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e7fe      	b.n	8003fb8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <vPortFree+0x5e>
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	e7fe      	b.n	8003fd4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <vPortFree+0xa8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d115      	bne.n	8004018 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <vPortFree+0xa8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ffc:	f000 fa74 	bl	80044e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <vPortFree+0xac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4413      	add	r3, r2
 800400a:	4a06      	ldr	r2, [pc, #24]	; (8004024 <vPortFree+0xac>)
 800400c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800400e:	6938      	ldr	r0, [r7, #16]
 8004010:	f000 f86c 	bl	80040ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004014:	f000 fa76 	bl	8004504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200018b0 	.word	0x200018b0
 8004024:	200018a8 	.word	0x200018a8

08004028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800402e:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 8004032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004034:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <prvHeapInit+0xac>)
 8004036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	3307      	adds	r3, #7
 8004046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <prvHeapInit+0xac>)
 8004058:	4413      	add	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004060:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <prvHeapInit+0xb0>)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004066:	4b1c      	ldr	r3, [pc, #112]	; (80040d8 <prvHeapInit+0xb0>)
 8004068:	2200      	movs	r2, #0
 800406a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4413      	add	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004074:	2208      	movs	r2, #8
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0307 	bic.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a15      	ldr	r2, [pc, #84]	; (80040dc <prvHeapInit+0xb4>)
 8004088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <prvHeapInit+0xb4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <prvHeapInit+0xb4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	1ad2      	subs	r2, r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040a8:	4b0c      	ldr	r3, [pc, #48]	; (80040dc <prvHeapInit+0xb4>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <prvHeapInit+0xb8>)
 80040b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <prvHeapInit+0xbc>)
 80040be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <prvHeapInit+0xc0>)
 80040c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040c6:	601a      	str	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	2000003c 	.word	0x2000003c
 80040d8:	2000189c 	.word	0x2000189c
 80040dc:	200018a4 	.word	0x200018a4
 80040e0:	200018ac 	.word	0x200018ac
 80040e4:	200018a8 	.word	0x200018a8
 80040e8:	200018b0 	.word	0x200018b0

080040ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040f4:	4b28      	ldr	r3, [pc, #160]	; (8004198 <prvInsertBlockIntoFreeList+0xac>)
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e002      	b.n	8004100 <prvInsertBlockIntoFreeList+0x14>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3f7      	bcc.n	80040fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	d108      	bne.n	800412e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	441a      	add	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	441a      	add	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d118      	bne.n	8004174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <prvInsertBlockIntoFreeList+0xb0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d00d      	beq.n	800416a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	441a      	add	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	e008      	b.n	800417c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <prvInsertBlockIntoFreeList+0xb0>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e003      	b.n	800417c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d002      	beq.n	800418a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000189c 	.word	0x2000189c
 800419c:	200018a4 	.word	0x200018a4

080041a0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	; 0x30
 80041a4:	af04      	add	r7, sp, #16
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fe1d 	bl	8003df4 <pvPortMalloc>
 80041ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80041c2:	2054      	movs	r0, #84	; 0x54
 80041c4:	f7ff fe16 	bl	8003df4 <pvPortMalloc>
 80041c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30
 80041d6:	e005      	b.n	80041e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f7ff fecd 	bl	8003f78 <vPortFree>
 80041de:	e001      	b.n	80041e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d013      	beq.n	8004212 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	2300      	movs	r3, #0
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f80e 	bl	8004222 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004206:	69f8      	ldr	r0, [r7, #28]
 8004208:	f000 f88a 	bl	8004320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800420c:	2301      	movs	r3, #1
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e002      	b.n	8004218 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004216:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004218:	69bb      	ldr	r3, [r7, #24]
	}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800423a:	3b01      	subs	r3, #1
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f023 0307 	bic.w	r3, r3, #7
 8004248:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <prvInitialiseNewTask+0x46>
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e7fe      	b.n	8004266 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e012      	b.n	8004294 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	7819      	ldrb	r1, [r3, #0]
 8004276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	3334      	adds	r3, #52	; 0x34
 800427e:	460a      	mov	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	d9e9      	bls.n	800426e <prvInitialiseNewTask+0x4c>
 800429a:	e000      	b.n	800429e <prvInitialiseNewTask+0x7c>
		{
			break;
 800429c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	2b06      	cmp	r3, #6
 80042aa:	d901      	bls.n	80042b0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042ac:	2306      	movs	r3, #6
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	2200      	movs	r2, #0
 80042c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fb2a 	bl	8003920 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	3318      	adds	r3, #24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff fb25 	bl	8003920 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	f1c3 0207 	rsb	r2, r3, #7
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	2200      	movs	r2, #0
 80042f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	69b8      	ldr	r0, [r7, #24]
 8004300:	f7ff fba2 	bl	8003a48 <pxPortInitialiseStack>
 8004304:	4602      	mov	r2, r0
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004316:	bf00      	nop
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004328:	f7ff fc92 	bl	8003c50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800432c:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <prvAddNewTaskToReadyList+0xb8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3301      	adds	r3, #1
 8004332:	4a29      	ldr	r2, [pc, #164]	; (80043d8 <prvAddNewTaskToReadyList+0xb8>)
 8004334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004336:	4b29      	ldr	r3, [pc, #164]	; (80043dc <prvAddNewTaskToReadyList+0xbc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800433e:	4a27      	ldr	r2, [pc, #156]	; (80043dc <prvAddNewTaskToReadyList+0xbc>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004344:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <prvAddNewTaskToReadyList+0xb8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d110      	bne.n	800436e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800434c:	f000 faa4 	bl	8004898 <prvInitialiseTaskLists>
 8004350:	e00d      	b.n	800436e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <prvAddNewTaskToReadyList+0xc0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <prvAddNewTaskToReadyList+0xbc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d802      	bhi.n	800436e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004368:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <prvAddNewTaskToReadyList+0xbc>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <prvAddNewTaskToReadyList+0xc4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <prvAddNewTaskToReadyList+0xc4>)
 8004376:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2201      	movs	r2, #1
 800437e:	409a      	lsls	r2, r3
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	4a18      	ldr	r2, [pc, #96]	; (80043e8 <prvAddNewTaskToReadyList+0xc8>)
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <prvAddNewTaskToReadyList+0xcc>)
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7ff faca 	bl	800393a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043a6:	f7ff fc81 	bl	8003cac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <prvAddNewTaskToReadyList+0xc0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00e      	beq.n	80043d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <prvAddNewTaskToReadyList+0xbc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d207      	bcs.n	80043d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <prvAddNewTaskToReadyList+0xd0>)
 80043c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200019b4 	.word	0x200019b4
 80043dc:	200018b4 	.word	0x200018b4
 80043e0:	200019c0 	.word	0x200019c0
 80043e4:	200019d0 	.word	0x200019d0
 80043e8:	200019bc 	.word	0x200019bc
 80043ec:	200018b8 	.word	0x200018b8
 80043f0:	e000ed04 	.word	0xe000ed04

080043f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d016      	beq.n	8004434 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <vTaskDelay+0x60>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <vTaskDelay+0x2e>
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	e7fe      	b.n	8004420 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004422:	f000 f861 	bl	80044e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004426:	2100      	movs	r1, #0
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fae7 	bl	80049fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800442e:	f000 f869 	bl	8004504 <xTaskResumeAll>
 8004432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800443a:	4b07      	ldr	r3, [pc, #28]	; (8004458 <vTaskDelay+0x64>)
 800443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200019dc 	.word	0x200019dc
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <vTaskStartScheduler+0x74>)
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2300      	movs	r3, #0
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	4919      	ldr	r1, [pc, #100]	; (80044d4 <vTaskStartScheduler+0x78>)
 8004470:	4819      	ldr	r0, [pc, #100]	; (80044d8 <vTaskStartScheduler+0x7c>)
 8004472:	f7ff fe95 	bl	80041a0 <xTaskCreate>
 8004476:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d115      	bne.n	80044aa <vTaskStartScheduler+0x4e>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <vTaskStartScheduler+0x80>)
 8004492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004496:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004498:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <vTaskStartScheduler+0x84>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <vTaskStartScheduler+0x88>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044a4:	f7ff fb48 	bl	8003b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044a8:	e00d      	b.n	80044c6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b0:	d109      	bne.n	80044c6 <vTaskStartScheduler+0x6a>
 80044b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	e7fe      	b.n	80044c4 <vTaskStartScheduler+0x68>
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200019d8 	.word	0x200019d8
 80044d4:	0800597c 	.word	0x0800597c
 80044d8:	08004869 	.word	0x08004869
 80044dc:	200019d4 	.word	0x200019d4
 80044e0:	200019c0 	.word	0x200019c0
 80044e4:	200019b8 	.word	0x200019b8

080044e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <vTaskSuspendAll+0x18>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	4a03      	ldr	r2, [pc, #12]	; (8004500 <vTaskSuspendAll+0x18>)
 80044f4:	6013      	str	r3, [r2, #0]
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	200019dc 	.word	0x200019dc

08004504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004512:	4b41      	ldr	r3, [pc, #260]	; (8004618 <xTaskResumeAll+0x114>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <xTaskResumeAll+0x2a>
 800451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	e7fe      	b.n	800452c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800452e:	f7ff fb8f 	bl	8003c50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004532:	4b39      	ldr	r3, [pc, #228]	; (8004618 <xTaskResumeAll+0x114>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3b01      	subs	r3, #1
 8004538:	4a37      	ldr	r2, [pc, #220]	; (8004618 <xTaskResumeAll+0x114>)
 800453a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <xTaskResumeAll+0x114>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d161      	bne.n	8004608 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004544:	4b35      	ldr	r3, [pc, #212]	; (800461c <xTaskResumeAll+0x118>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d05d      	beq.n	8004608 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800454c:	e02e      	b.n	80045ac <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800454e:	4b34      	ldr	r3, [pc, #208]	; (8004620 <xTaskResumeAll+0x11c>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3318      	adds	r3, #24
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fa4a 	bl	80039f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3304      	adds	r3, #4
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fa45 	bl	80039f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	2201      	movs	r2, #1
 8004570:	409a      	lsls	r2, r3
 8004572:	4b2c      	ldr	r3, [pc, #176]	; (8004624 <xTaskResumeAll+0x120>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	4a2a      	ldr	r2, [pc, #168]	; (8004624 <xTaskResumeAll+0x120>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <xTaskResumeAll+0x124>)
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff f9d1 	bl	800393a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <xTaskResumeAll+0x128>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <xTaskResumeAll+0x12c>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <xTaskResumeAll+0x11c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1cc      	bne.n	800454e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ba:	f000 f9f9 	bl	80049b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <xTaskResumeAll+0x130>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045ca:	f000 f837 	bl	800463c <xTaskIncrementTick>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <xTaskResumeAll+0x12c>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3b01      	subs	r3, #1
 80045de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f1      	bne.n	80045ca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <xTaskResumeAll+0x130>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <xTaskResumeAll+0x12c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <xTaskResumeAll+0x134>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004608:	f7ff fb50 	bl	8003cac <vPortExitCritical>

	return xAlreadyYielded;
 800460c:	68bb      	ldr	r3, [r7, #8]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200019dc 	.word	0x200019dc
 800461c:	200019b4 	.word	0x200019b4
 8004620:	20001974 	.word	0x20001974
 8004624:	200019bc 	.word	0x200019bc
 8004628:	200018b8 	.word	0x200018b8
 800462c:	200018b4 	.word	0x200018b4
 8004630:	200019c8 	.word	0x200019c8
 8004634:	200019c4 	.word	0x200019c4
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004646:	4b50      	ldr	r3, [pc, #320]	; (8004788 <xTaskIncrementTick+0x14c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 808c 	bne.w	8004768 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004650:	4b4e      	ldr	r3, [pc, #312]	; (800478c <xTaskIncrementTick+0x150>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004658:	4a4c      	ldr	r2, [pc, #304]	; (800478c <xTaskIncrementTick+0x150>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11f      	bne.n	80046a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004664:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <xTaskIncrementTick+0x154>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <xTaskIncrementTick+0x46>
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	e7fe      	b.n	8004680 <xTaskIncrementTick+0x44>
 8004682:	4b43      	ldr	r3, [pc, #268]	; (8004790 <xTaskIncrementTick+0x154>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <xTaskIncrementTick+0x158>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a40      	ldr	r2, [pc, #256]	; (8004790 <xTaskIncrementTick+0x154>)
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	4a40      	ldr	r2, [pc, #256]	; (8004794 <xTaskIncrementTick+0x158>)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <xTaskIncrementTick+0x15c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3301      	adds	r3, #1
 800469c:	4a3e      	ldr	r2, [pc, #248]	; (8004798 <xTaskIncrementTick+0x15c>)
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	f000 f986 	bl	80049b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046a4:	4b3d      	ldr	r3, [pc, #244]	; (800479c <xTaskIncrementTick+0x160>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d34d      	bcc.n	800474a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ae:	4b38      	ldr	r3, [pc, #224]	; (8004790 <xTaskIncrementTick+0x154>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <xTaskIncrementTick+0x80>
 80046b8:	2301      	movs	r3, #1
 80046ba:	e000      	b.n	80046be <xTaskIncrementTick+0x82>
 80046bc:	2300      	movs	r3, #0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <xTaskIncrementTick+0x160>)
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046c8:	601a      	str	r2, [r3, #0]
					break;
 80046ca:	e03e      	b.n	800474a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046cc:	4b30      	ldr	r3, [pc, #192]	; (8004790 <xTaskIncrementTick+0x154>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d203      	bcs.n	80046ec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046e4:	4a2d      	ldr	r2, [pc, #180]	; (800479c <xTaskIncrementTick+0x160>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6013      	str	r3, [r2, #0]
						break;
 80046ea:	e02e      	b.n	800474a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff f97f 	bl	80039f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	3318      	adds	r3, #24
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff f976 	bl	80039f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <xTaskIncrementTick+0x164>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <xTaskIncrementTick+0x164>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a1f      	ldr	r2, [pc, #124]	; (80047a4 <xTaskIncrementTick+0x168>)
 8004728:	441a      	add	r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7ff f902 	bl	800393a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <xTaskIncrementTick+0x16c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d3b4      	bcc.n	80046ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004744:	2301      	movs	r3, #1
 8004746:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004748:	e7b1      	b.n	80046ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <xTaskIncrementTick+0x16c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4914      	ldr	r1, [pc, #80]	; (80047a4 <xTaskIncrementTick+0x168>)
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d907      	bls.n	8004772 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e004      	b.n	8004772 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <xTaskIncrementTick+0x170>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <xTaskIncrementTick+0x170>)
 8004770:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <xTaskIncrementTick+0x174>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800477e:	697b      	ldr	r3, [r7, #20]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	200019dc 	.word	0x200019dc
 800478c:	200019b8 	.word	0x200019b8
 8004790:	2000196c 	.word	0x2000196c
 8004794:	20001970 	.word	0x20001970
 8004798:	200019cc 	.word	0x200019cc
 800479c:	200019d4 	.word	0x200019d4
 80047a0:	200019bc 	.word	0x200019bc
 80047a4:	200018b8 	.word	0x200018b8
 80047a8:	200018b4 	.word	0x200018b4
 80047ac:	200019c4 	.word	0x200019c4
 80047b0:	200019c8 	.word	0x200019c8

080047b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ba:	4b26      	ldr	r3, [pc, #152]	; (8004854 <vTaskSwitchContext+0xa0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047c2:	4b25      	ldr	r3, [pc, #148]	; (8004858 <vTaskSwitchContext+0xa4>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047c8:	e03e      	b.n	8004848 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <vTaskSwitchContext+0xa4>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047d0:	4b22      	ldr	r3, [pc, #136]	; (800485c <vTaskSwitchContext+0xa8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	f1c3 031f 	rsb	r3, r3, #31
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	491e      	ldr	r1, [pc, #120]	; (8004860 <vTaskSwitchContext+0xac>)
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <vTaskSwitchContext+0x5a>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	e7fe      	b.n	800480c <vTaskSwitchContext+0x58>
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4a11      	ldr	r2, [pc, #68]	; (8004860 <vTaskSwitchContext+0xac>)
 800481a:	4413      	add	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3308      	adds	r3, #8
 8004830:	429a      	cmp	r2, r3
 8004832:	d104      	bne.n	800483e <vTaskSwitchContext+0x8a>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a07      	ldr	r2, [pc, #28]	; (8004864 <vTaskSwitchContext+0xb0>)
 8004846:	6013      	str	r3, [r2, #0]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	200019dc 	.word	0x200019dc
 8004858:	200019c8 	.word	0x200019c8
 800485c:	200019bc 	.word	0x200019bc
 8004860:	200018b8 	.word	0x200018b8
 8004864:	200018b4 	.word	0x200018b4

08004868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004870:	f000 f852 	bl	8004918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <prvIdleTask+0x28>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d9f9      	bls.n	8004870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <prvIdleTask+0x2c>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800488c:	e7f0      	b.n	8004870 <prvIdleTask+0x8>
 800488e:	bf00      	nop
 8004890:	200018b8 	.word	0x200018b8
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	e00c      	b.n	80048be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <prvInitialiseTaskLists+0x60>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff f814 	bl	80038e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3301      	adds	r3, #1
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d9ef      	bls.n	80048a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c4:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x64>)
 80048c6:	f7ff f80b 	bl	80038e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ca:	480d      	ldr	r0, [pc, #52]	; (8004900 <prvInitialiseTaskLists+0x68>)
 80048cc:	f7ff f808 	bl	80038e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048d0:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x6c>)
 80048d2:	f7ff f805 	bl	80038e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048d6:	480c      	ldr	r0, [pc, #48]	; (8004908 <prvInitialiseTaskLists+0x70>)
 80048d8:	f7ff f802 	bl	80038e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80048dc:	480b      	ldr	r0, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x74>)
 80048de:	f7fe ffff 	bl	80038e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <prvInitialiseTaskLists+0x78>)
 80048e4:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x64>)
 80048e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <prvInitialiseTaskLists+0x7c>)
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <prvInitialiseTaskLists+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200018b8 	.word	0x200018b8
 80048fc:	20001944 	.word	0x20001944
 8004900:	20001958 	.word	0x20001958
 8004904:	20001974 	.word	0x20001974
 8004908:	20001988 	.word	0x20001988
 800490c:	200019a0 	.word	0x200019a0
 8004910:	2000196c 	.word	0x2000196c
 8004914:	20001970 	.word	0x20001970

08004918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800491e:	e028      	b.n	8004972 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004920:	f7ff fde2 	bl	80044e8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <prvCheckTasksWaitingTermination+0x6c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004934:	f7ff fde6 	bl	8004504 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d119      	bne.n	8004972 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800493e:	f7ff f987 	bl	8003c50 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004942:	4b10      	ldr	r3, [pc, #64]	; (8004984 <prvCheckTasksWaitingTermination+0x6c>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	3304      	adds	r3, #4
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff f850 	bl	80039f4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <prvCheckTasksWaitingTermination+0x70>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3b01      	subs	r3, #1
 800495a:	4a0b      	ldr	r2, [pc, #44]	; (8004988 <prvCheckTasksWaitingTermination+0x70>)
 800495c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <prvCheckTasksWaitingTermination+0x74>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3b01      	subs	r3, #1
 8004964:	4a09      	ldr	r2, [pc, #36]	; (800498c <prvCheckTasksWaitingTermination+0x74>)
 8004966:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004968:	f7ff f9a0 	bl	8003cac <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800496c:	6838      	ldr	r0, [r7, #0]
 800496e:	f000 f80f 	bl	8004990 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <prvCheckTasksWaitingTermination+0x74>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1d2      	bne.n	8004920 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20001988 	.word	0x20001988
 8004988:	200019b4 	.word	0x200019b4
 800498c:	2000199c 	.word	0x2000199c

08004990 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff faeb 	bl	8003f78 <vPortFree>
			vPortFree( pxTCB );
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fae8 	bl	8003f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <prvResetNextTaskUnblockTime+0x44>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <prvResetNextTaskUnblockTime+0x14>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <prvResetNextTaskUnblockTime+0x16>
 80049c4:	2300      	movs	r3, #0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <prvResetNextTaskUnblockTime+0x48>)
 80049cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049d2:	e008      	b.n	80049e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <prvResetNextTaskUnblockTime+0x44>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a05      	ldr	r2, [pc, #20]	; (80049f8 <prvResetNextTaskUnblockTime+0x48>)
 80049e4:	6013      	str	r3, [r2, #0]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000196c 	.word	0x2000196c
 80049f8:	200019d4 	.word	0x200019d4

080049fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe ffee 	bl	80039f4 <uxListRemove>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	2201      	movs	r2, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4013      	ands	r3, r2
 8004a32:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a34:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3c:	d10a      	bne.n	8004a54 <prvAddCurrentTaskToDelayedList+0x58>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	481a      	ldr	r0, [pc, #104]	; (8004ab8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004a4e:	f7fe ff74 	bl	800393a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a52:	e026      	b.n	8004aa2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d209      	bcs.n	8004a80 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <prvAddCurrentTaskToDelayedList+0xc0>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fe ff82 	bl	8003982 <vListInsert>
}
 8004a7e:	e010      	b.n	8004aa2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe ff78 	bl	8003982 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a92:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d202      	bcs.n	8004aa2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004a9c:	4a09      	ldr	r2, [pc, #36]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200019b8 	.word	0x200019b8
 8004ab0:	200018b4 	.word	0x200018b4
 8004ab4:	200019bc 	.word	0x200019bc
 8004ab8:	200019a0 	.word	0x200019a0
 8004abc:	20001970 	.word	0x20001970
 8004ac0:	2000196c 	.word	0x2000196c
 8004ac4:	200019d4 	.word	0x200019d4

08004ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b0a4      	sub	sp, #144	; 0x90
 8004acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ace:	f7fb fd0f 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ad2:	f000 f89d 	bl	8004c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ad6:	f000 f9d1 	bl	8004e7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004ada:	f000 f99f 	bl	8004e1c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8004ade:	f000 f8fb 	bl	8004cd8 <MX_TIM3_Init>
  MX_TIM17_Init();
 8004ae2:	f000 f975 	bl	8004dd0 <MX_TIM17_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004ae6:	4b3c      	ldr	r3, [pc, #240]	; (8004bd8 <main+0x110>)
 8004ae8:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8004aec:	461d      	mov	r5, r3
 8004aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004af6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fead 	bl	800385c <osThreadCreate>
 8004b02:	4602      	mov	r2, r0
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <main+0x114>)
 8004b06:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor0Task */
  osThreadDef(motor0Task, motor0Loop, osPriorityIdle, 0, 128);
 8004b08:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <main+0x118>)
 8004b0a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8004b0e:	461d      	mov	r5, r3
 8004b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	6023      	str	r3, [r4, #0]
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8004b18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fe9c 	bl	800385c <osThreadCreate>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <main+0x11c>)
 8004b28:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor1Task */
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8004b2a:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <main+0x120>)
 8004b2c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004b30:	461d      	mov	r5, r3
 8004b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	6023      	str	r3, [r4, #0]
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8004b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fe8b 	bl	800385c <osThreadCreate>
 8004b46:	4602      	mov	r2, r0
 8004b48:	4b28      	ldr	r3, [pc, #160]	; (8004bec <main+0x124>)
 8004b4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8004b4c:	4b28      	ldr	r3, [pc, #160]	; (8004bf0 <main+0x128>)
 8004b4e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004b52:	461d      	mov	r5, r3
 8004b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	6023      	str	r3, [r4, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8004b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fe7a 	bl	800385c <osThreadCreate>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <main+0x12c>)
 8004b6c:	601a      	str	r2, [r3, #0]

  /* definition and creation of VzdTask */
  osThreadDef(VzdTask, VzdLoop, osPriorityIdle, 0, 128);
 8004b6e:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <main+0x130>)
 8004b70:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8004b74:	461d      	mov	r5, r3
 8004b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	6023      	str	r3, [r4, #0]
  VzdTaskHandle = osThreadCreate(osThread(VzdTask), NULL);
 8004b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fe fe69 	bl	800385c <osThreadCreate>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <main+0x134>)
 8004b8e:	601a      	str	r2, [r3, #0]

  /* definition and creation of backupTask1 */
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 8004b90:	4b1b      	ldr	r3, [pc, #108]	; (8004c00 <main+0x138>)
 8004b92:	f107 0418 	add.w	r4, r7, #24
 8004b96:	461d      	mov	r5, r3
 8004b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	6023      	str	r3, [r4, #0]
  backupTask1Handle = osThreadCreate(osThread(backupTask1), NULL);
 8004ba0:	f107 0318 	add.w	r3, r7, #24
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe fe58 	bl	800385c <osThreadCreate>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <main+0x13c>)
 8004bb0:	601a      	str	r2, [r3, #0]

  /* definition and creation of EncoTask */
  osThreadDef(EncoTask, EncoLoop, osPriorityIdle, 0, 128);
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <main+0x140>)
 8004bb4:	1d3c      	adds	r4, r7, #4
 8004bb6:	461d      	mov	r5, r3
 8004bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	6023      	str	r3, [r4, #0]
  EncoTaskHandle = osThreadCreate(osThread(EncoTask), NULL);
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fe49 	bl	800385c <osThreadCreate>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <main+0x144>)
 8004bce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004bd0:	f7fe fe3d 	bl	800384e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004bd4:	e7fe      	b.n	8004bd4 <main+0x10c>
 8004bd6:	bf00      	nop
 8004bd8:	08005990 	.word	0x08005990
 8004bdc:	200019f8 	.word	0x200019f8
 8004be0:	080059b0 	.word	0x080059b0
 8004be4:	20001b18 	.word	0x20001b18
 8004be8:	080059d0 	.word	0x080059d0
 8004bec:	200019fc 	.word	0x200019fc
 8004bf0:	080059f0 	.word	0x080059f0
 8004bf4:	20001a98 	.word	0x20001a98
 8004bf8:	08005a0c 	.word	0x08005a0c
 8004bfc:	20001a00 	.word	0x20001a00
 8004c00:	08005a2c 	.word	0x08005a2c
 8004c04:	20001a94 	.word	0x20001a94
 8004c08:	08005a4c 	.word	0x08005a4c
 8004c0c:	20001a90 	.word	0x20001a90

08004c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b0a6      	sub	sp, #152	; 0x98
 8004c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c1a:	2228      	movs	r2, #40	; 0x28
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fe98 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	60da      	str	r2, [r3, #12]
 8004c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	2258      	movs	r2, #88	; 0x58
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fe8a 	bl	8005954 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c40:	2302      	movs	r3, #2
 8004c42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c44:	2301      	movs	r3, #1
 8004c46:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c48:	2310      	movs	r3, #16
 8004c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004c5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fb ff0e 	bl	8000a90 <HAL_RCC_OscConfig>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004c7a:	f000 fc53 	bl	8005524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c7e:	230f      	movs	r3, #15
 8004c80:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c82:	2302      	movs	r3, #2
 8004c84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c86:	2300      	movs	r3, #0
 8004c88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c90:	2300      	movs	r3, #0
 8004c92:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004c98:	2102      	movs	r1, #2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fc fde6 	bl	800186c <HAL_RCC_ClockConfig>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004ca6:	f000 fc3d 	bl	8005524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM17
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <SystemClock_Config+0xc4>)
 8004cac:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd f83d 	bl	8001d3c <HAL_RCCEx_PeriphCLKConfig>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004cc8:	f000 fc2c 	bl	8005524 <Error_Handler>
  }
}
 8004ccc:	bf00      	nop
 8004cce:	3798      	adds	r7, #152	; 0x98
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	01200002 	.word	0x01200002

08004cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cde:	f107 031c 	add.w	r3, r7, #28
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cea:	463b      	mov	r3, r7
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	611a      	str	r2, [r3, #16]
 8004cf8:	615a      	str	r2, [r3, #20]
 8004cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004cfc:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004cfe:	4a33      	ldr	r2, [pc, #204]	; (8004dcc <MX_TIM3_Init+0xf4>)
 8004d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004d02:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d08:	4b2f      	ldr	r3, [pc, #188]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004d0e:	4b2e      	ldr	r3, [pc, #184]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d16:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d22:	4829      	ldr	r0, [pc, #164]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d24:	f7fd fab2 	bl	800228c <HAL_TIM_PWM_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004d2e:	f000 fbf9 	bl	8005524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d3a:	f107 031c 	add.w	r3, r7, #28
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4821      	ldr	r0, [pc, #132]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d42:	f7fe f88b 	bl	8002e5c <HAL_TIMEx_MasterConfigSynchronization>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004d4c:	f000 fbea 	bl	8005524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d50:	2360      	movs	r3, #96	; 0x60
 8004d52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d60:	463b      	mov	r3, r7
 8004d62:	2200      	movs	r2, #0
 8004d64:	4619      	mov	r1, r3
 8004d66:	4818      	ldr	r0, [pc, #96]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d68:	f7fd ff60 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004d72:	f000 fbd7 	bl	8005524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d76:	463b      	mov	r3, r7
 8004d78:	2204      	movs	r2, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4812      	ldr	r0, [pc, #72]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d7e:	f7fd ff55 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004d88:	f000 fbcc 	bl	8005524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	2208      	movs	r2, #8
 8004d90:	4619      	mov	r1, r3
 8004d92:	480d      	ldr	r0, [pc, #52]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004d94:	f7fd ff4a 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004d9e:	f000 fbc1 	bl	8005524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004da2:	463b      	mov	r3, r7
 8004da4:	220c      	movs	r2, #12
 8004da6:	4619      	mov	r1, r3
 8004da8:	4807      	ldr	r0, [pc, #28]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004daa:	f7fd ff3f 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004db4:	f000 fbb6 	bl	8005524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004db8:	4803      	ldr	r0, [pc, #12]	; (8004dc8 <MX_TIM3_Init+0xf0>)
 8004dba:	f000 fc23 	bl	8005604 <HAL_TIM_MspPostInit>

}
 8004dbe:	bf00      	nop
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20001a50 	.word	0x20001a50
 8004dcc:	40000400 	.word	0x40000400

08004dd0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004dd6:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <MX_TIM17_Init+0x48>)
 8004dd8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72;
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004ddc:	2248      	movs	r2, #72	; 0x48
 8004dde:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dec:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004e00:	4804      	ldr	r0, [pc, #16]	; (8004e14 <MX_TIM17_Init+0x44>)
 8004e02:	f7fd f9b7 	bl	8002174 <HAL_TIM_Base_Init>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004e0c:	f000 fb8a 	bl	8005524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20001a04 	.word	0x20001a04
 8004e18:	40014800 	.word	0x40014800

08004e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e22:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <MX_USART2_UART_Init+0x5c>)
 8004e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e42:	220c      	movs	r2, #12
 8004e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e5e:	4805      	ldr	r0, [pc, #20]	; (8004e74 <MX_USART2_UART_Init+0x58>)
 8004e60:	f7fe f958 	bl	8003114 <HAL_UART_Init>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004e6a:	f000 fb5b 	bl	8005524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20001aa8 	.word	0x20001aa8
 8004e78:	40004400 	.word	0x40004400

08004e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08a      	sub	sp, #40	; 0x28
 8004e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
 8004e8e:	60da      	str	r2, [r3, #12]
 8004e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e92:	4a52      	ldr	r2, [pc, #328]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004e94:	4b51      	ldr	r3, [pc, #324]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e9c:	6153      	str	r3, [r2, #20]
 8004e9e:	4b4f      	ldr	r3, [pc, #316]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ea6:	613b      	str	r3, [r7, #16]
 8004ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004eaa:	4a4c      	ldr	r2, [pc, #304]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004eac:	4b4b      	ldr	r3, [pc, #300]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eb4:	6153      	str	r3, [r2, #20]
 8004eb6:	4b49      	ldr	r3, [pc, #292]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec2:	4a46      	ldr	r2, [pc, #280]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004ec4:	4b45      	ldr	r3, [pc, #276]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ecc:	6153      	str	r3, [r2, #20]
 8004ece:	4b43      	ldr	r3, [pc, #268]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eda:	4a40      	ldr	r2, [pc, #256]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004edc:	4b3f      	ldr	r3, [pc, #252]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee4:	6153      	str	r3, [r2, #20]
 8004ee6:	4b3d      	ldr	r3, [pc, #244]	; (8004fdc <MX_GPIO_Init+0x160>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eee:	607b      	str	r3, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor0Low_Pin|Motor1Low_Pin, GPIO_PIN_RESET);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8004ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004efc:	f7fb fdb0 	bl	8000a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, backupOut1_Pin|Pulse_Pin, GPIO_PIN_RESET);
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004f06:	4836      	ldr	r0, [pc, #216]	; (8004fe0 <MX_GPIO_Init+0x164>)
 8004f08:	f7fb fdaa 	bl	8000a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f12:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <MX_GPIO_Init+0x168>)
 8004f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004f1a:	f107 0314 	add.w	r3, r7, #20
 8004f1e:	4619      	mov	r1, r3
 8004f20:	482f      	ldr	r0, [pc, #188]	; (8004fe0 <MX_GPIO_Init+0x164>)
 8004f22:	f7fb fbf7 	bl	8000714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004f26:	2320      	movs	r3, #32
 8004f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f40:	f7fb fbe8 	bl	8000714 <HAL_GPIO_Init>

  /*Configure GPIO pin : backupIn1_Pin */
  GPIO_InitStruct.Pin = backupIn1_Pin;
 8004f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 8004f52:	f107 0314 	add.w	r3, r7, #20
 8004f56:	4619      	mov	r1, r3
 8004f58:	4823      	ldr	r0, [pc, #140]	; (8004fe8 <MX_GPIO_Init+0x16c>)
 8004f5a:	f7fb fbdb 	bl	8000714 <HAL_GPIO_Init>

  /*Configure GPIO pins : EchoIn_Pin ENCO1In_Pin */
  GPIO_InitStruct.Pin = EchoIn_Pin|ENCO1In_Pin;
 8004f5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	4619      	mov	r1, r3
 8004f72:	481b      	ldr	r0, [pc, #108]	; (8004fe0 <MX_GPIO_Init+0x164>)
 8004f74:	f7fb fbce 	bl	8000714 <HAL_GPIO_Init>

  /*Configure GPIO pins : backupOut1_Pin Pulse_Pin */
  GPIO_InitStruct.Pin = backupOut1_Pin|Pulse_Pin;
 8004f78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f82:	2302      	movs	r3, #2
 8004f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f86:	2303      	movs	r3, #3
 8004f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8a:	f107 0314 	add.w	r3, r7, #20
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4813      	ldr	r0, [pc, #76]	; (8004fe0 <MX_GPIO_Init+0x164>)
 8004f92:	f7fb fbbf 	bl	8000714 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCO0In_Pin */
  GPIO_InitStruct.Pin = ENCO0In_Pin;
 8004f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCO0In_GPIO_Port, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fae:	f7fb fbb1 	bl	8000714 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor0Low_Pin Motor1Low_Pin */
  GPIO_InitStruct.Pin = Motor0Low_Pin|Motor1Low_Pin;
 8004fb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc4:	f107 0314 	add.w	r3, r7, #20
 8004fc8:	4619      	mov	r1, r3
 8004fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fce:	f7fb fba1 	bl	8000714 <HAL_GPIO_Init>

}
 8004fd2:	bf00      	nop
 8004fd4:	3728      	adds	r7, #40	; 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	48000800 	.word	0x48000800
 8004fe4:	10210000 	.word	0x10210000
 8004fe8:	48000400 	.word	0x48000400

08004fec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f7fe fc59 	bl	80038ac <osDelay>
 8004ffa:	e7fb      	b.n	8004ff4 <StartDefaultTask+0x8>

08004ffc <modifyTimer0PWM>:
  /* USER CODE END 5 */ 
}



void modifyTimer0PWM(uint16_t value){
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	; 0x28
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005006:	2360      	movs	r3, #96	; 0x60
 8005008:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8005016:	f107 030c 	add.w	r3, r7, #12
 800501a:	2200      	movs	r2, #0
 800501c:	4619      	mov	r1, r3
 800501e:	4805      	ldr	r0, [pc, #20]	; (8005034 <modifyTimer0PWM+0x38>)
 8005020:	f7fd fe04 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005024:	2100      	movs	r1, #0
 8005026:	4803      	ldr	r0, [pc, #12]	; (8005034 <modifyTimer0PWM+0x38>)
 8005028:	f7fd f95c 	bl	80022e4 <HAL_TIM_PWM_Start>
}
 800502c:	bf00      	nop
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20001a50 	.word	0x20001a50

08005038 <modifyTimer1PWM>:

void modifyTimer1PWM(uint16_t value){
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005042:	2360      	movs	r3, #96	; 0x60
 8005044:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	2204      	movs	r2, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4805      	ldr	r0, [pc, #20]	; (8005070 <modifyTimer1PWM+0x38>)
 800505c:	f7fd fde6 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005060:	2104      	movs	r1, #4
 8005062:	4803      	ldr	r0, [pc, #12]	; (8005070 <modifyTimer1PWM+0x38>)
 8005064:	f7fd f93e 	bl	80022e4 <HAL_TIM_PWM_Start>
}
 8005068:	bf00      	nop
 800506a:	3728      	adds	r7, #40	; 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20001a50 	.word	0x20001a50

08005074 <modifyTimer2PWM>:

void modifyTimer2PWM(uint16_t value){
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800507e:	2360      	movs	r3, #96	; 0x60
 8005080:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	2208      	movs	r2, #8
 8005094:	4619      	mov	r1, r3
 8005096:	4805      	ldr	r0, [pc, #20]	; (80050ac <modifyTimer2PWM+0x38>)
 8005098:	f7fd fdc8 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800509c:	2108      	movs	r1, #8
 800509e:	4803      	ldr	r0, [pc, #12]	; (80050ac <modifyTimer2PWM+0x38>)
 80050a0:	f7fd f920 	bl	80022e4 <HAL_TIM_PWM_Start>
}
 80050a4:	bf00      	nop
 80050a6:	3728      	adds	r7, #40	; 0x28
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20001a50 	.word	0x20001a50

080050b0 <modifyTimer3PWM>:

void modifyTimer3PWM(uint16_t value){
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050ba:	2360      	movs	r3, #96	; 0x60
 80050bc:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	220c      	movs	r2, #12
 80050d0:	4619      	mov	r1, r3
 80050d2:	4805      	ldr	r0, [pc, #20]	; (80050e8 <modifyTimer3PWM+0x38>)
 80050d4:	f7fd fdaa 	bl	8002c2c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80050d8:	210c      	movs	r1, #12
 80050da:	4803      	ldr	r0, [pc, #12]	; (80050e8 <modifyTimer3PWM+0x38>)
 80050dc:	f7fd f902 	bl	80022e4 <HAL_TIM_PWM_Start>
}
 80050e0:	bf00      	nop
 80050e2:	3728      	adds	r7, #40	; 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20001a50 	.word	0x20001a50

080050ec <motor0Loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor0Loop */
void motor0Loop(void const * argument)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	  if(m1State == On){
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <motor0Loop+0x70>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d12a      	bne.n	8005152 <motor0Loop+0x66>
			if(m1Dir == Forw){
 80050fc:	4b18      	ldr	r3, [pc, #96]	; (8005160 <motor0Loop+0x74>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d113      	bne.n	800512c <motor0Loop+0x40>
			  modifyTimer0PWM(m1Speed * 65);
 8005104:	4b17      	ldr	r3, [pc, #92]	; (8005164 <motor0Loop+0x78>)
 8005106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800510a:	b29b      	uxth	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	0192      	lsls	r2, r2, #6
 8005110:	4413      	add	r3, r2
 8005112:	b29b      	uxth	r3, r3
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff71 	bl	8004ffc <modifyTimer0PWM>
			  lastM1Speed = m1Speed;
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <motor0Loop+0x78>)
 800511c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <motor0Loop+0x7c>)
 8005122:	801a      	strh	r2, [r3, #0]
			  modifyTimer1PWM(0);
 8005124:	2000      	movs	r0, #0
 8005126:	f7ff ff87 	bl	8005038 <modifyTimer1PWM>
 800512a:	e012      	b.n	8005152 <motor0Loop+0x66>
			}
			else{
			  modifyTimer1PWM(m1Speed * 65);
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <motor0Loop+0x78>)
 800512e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005132:	b29b      	uxth	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	0192      	lsls	r2, r2, #6
 8005138:	4413      	add	r3, r2
 800513a:	b29b      	uxth	r3, r3
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ff7b 	bl	8005038 <modifyTimer1PWM>
			  lastM1Speed = m1Speed;
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <motor0Loop+0x78>)
 8005144:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <motor0Loop+0x7c>)
 800514a:	801a      	strh	r2, [r3, #0]
			  modifyTimer0PWM(0);
 800514c:	2000      	movs	r0, #0
 800514e:	f7ff ff55 	bl	8004ffc <modifyTimer0PWM>
			}
	  }
	  osDelay(1);
 8005152:	2001      	movs	r0, #1
 8005154:	f7fe fbaa 	bl	80038ac <osDelay>
	  if(m1State == On){
 8005158:	e7cc      	b.n	80050f4 <motor0Loop+0x8>
 800515a:	bf00      	nop
 800515c:	20000008 	.word	0x20000008
 8005160:	200019e0 	.word	0x200019e0
 8005164:	2000000a 	.word	0x2000000a
 8005168:	200019e2 	.word	0x200019e2

0800516c <motor1Loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor1Loop */
void motor1Loop(void const * argument)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]


  for(;;)
  {

	  if(m2State == On){
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <motor1Loop+0x70>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d12a      	bne.n	80051d2 <motor1Loop+0x66>
			if(m2Dir == Forw){
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <motor1Loop+0x74>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d113      	bne.n	80051ac <motor1Loop+0x40>
			  modifyTimer2PWM(m2Speed * 65);
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <motor1Loop+0x78>)
 8005186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518a:	b29b      	uxth	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	0192      	lsls	r2, r2, #6
 8005190:	4413      	add	r3, r2
 8005192:	b29b      	uxth	r3, r3
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ff6d 	bl	8005074 <modifyTimer2PWM>
			  lastM2Speed = m2Speed;
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <motor1Loop+0x78>)
 800519c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <motor1Loop+0x7c>)
 80051a2:	801a      	strh	r2, [r3, #0]
			  modifyTimer3PWM(0);
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7ff ff83 	bl	80050b0 <modifyTimer3PWM>
 80051aa:	e012      	b.n	80051d2 <motor1Loop+0x66>
			}
			else{
			  modifyTimer3PWM(m2Speed * 65);
 80051ac:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <motor1Loop+0x78>)
 80051ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	0192      	lsls	r2, r2, #6
 80051b8:	4413      	add	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff ff77 	bl	80050b0 <modifyTimer3PWM>
			  lastM2Speed = m2Speed;
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <motor1Loop+0x78>)
 80051c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <motor1Loop+0x7c>)
 80051ca:	801a      	strh	r2, [r3, #0]
			  modifyTimer2PWM(0);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7ff ff51 	bl	8005074 <modifyTimer2PWM>
			}
	  }
	  osDelay(1);
 80051d2:	2001      	movs	r0, #1
 80051d4:	f7fe fb6a 	bl	80038ac <osDelay>
	  if(m2State == On){
 80051d8:	e7cc      	b.n	8005174 <motor1Loop+0x8>
 80051da:	bf00      	nop
 80051dc:	20000009 	.word	0x20000009
 80051e0:	200019e1 	.word	0x200019e1
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	200019e4 	.word	0x200019e4

080051ec <controlLoop>:
const int maxDistance = 1500;
unsigned long long int moveTime;
unsigned long long int distance;

void controlLoop(void const * argument)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	m1State = On;
 80051f4:	4b20      	ldr	r3, [pc, #128]	; (8005278 <controlLoop+0x8c>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
	m2State = On;
 80051fa:	4b20      	ldr	r3, [pc, #128]	; (800527c <controlLoop+0x90>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
	  for(;;)
	  {
		  distance = getDistance();
 8005200:	f000 f842 	bl	8005288 <getDistance>
 8005204:	4603      	mov	r3, r0
 8005206:	460c      	mov	r4, r1
 8005208:	4a1d      	ldr	r2, [pc, #116]	; (8005280 <controlLoop+0x94>)
 800520a:	e882 0018 	stmia.w	r2, {r3, r4}

		  while (distance > maxDistance) {
 800520e:	e001      	b.n	8005214 <controlLoop+0x28>
			  makeTurnRight();
 8005210:	f000 f8ac 	bl	800536c <makeTurnRight>
		  while (distance > maxDistance) {
 8005214:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005218:	4619      	mov	r1, r3
 800521a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800521e:	4b18      	ldr	r3, [pc, #96]	; (8005280 <controlLoop+0x94>)
 8005220:	cb18      	ldmia	r3, {r3, r4}
 8005222:	42a2      	cmp	r2, r4
 8005224:	bf08      	it	eq
 8005226:	4299      	cmpeq	r1, r3
 8005228:	d3f2      	bcc.n	8005210 <controlLoop+0x24>
		  }

		  while (distance > 12) {
 800522a:	e001      	b.n	8005230 <controlLoop+0x44>
			  goAhead();
 800522c:	f000 f850 	bl	80052d0 <goAhead>
		  while (distance > 12) {
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <controlLoop+0x94>)
 8005232:	cb18      	ldmia	r3, {r3, r4}
 8005234:	2c00      	cmp	r4, #0
 8005236:	bf08      	it	eq
 8005238:	2b0d      	cmpeq	r3, #13
 800523a:	d2f7      	bcs.n	800522c <controlLoop+0x40>
		  }

		  unsigned long long int size = measureObjectSize();
 800523c:	f000 f8ba 	bl	80053b4 <measureObjectSize>
 8005240:	e9c7 0102 	strd	r0, r1, [r7, #8]

		  if (size < bottleSize + 10) {
 8005244:	2396      	movs	r3, #150	; 0x96
 8005246:	330a      	adds	r3, #10
 8005248:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800524c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005250:	42a2      	cmp	r2, r4
 8005252:	bf08      	it	eq
 8005254:	4299      	cmpeq	r1, r3
 8005256:	d204      	bcs.n	8005262 <controlLoop+0x76>
			  makeDoubleTurn();
 8005258:	f000 f8d8 	bl	800540c <makeDoubleTurn>
 800525c:	e005      	b.n	800526a <controlLoop+0x7e>
		  } else {
			  while (moveTime > 0) {
				  goBack();
 800525e:	f000 f85d 	bl	800531c <goBack>
			  while (moveTime > 0) {
 8005262:	4b08      	ldr	r3, [pc, #32]	; (8005284 <controlLoop+0x98>)
 8005264:	cb18      	ldmia	r3, {r3, r4}
 8005266:	4323      	orrs	r3, r4
 8005268:	d1f9      	bne.n	800525e <controlLoop+0x72>
			  }
		  }

		  makeTurnRight();
 800526a:	f000 f87f 	bl	800536c <makeTurnRight>

		  osDelay(10);
 800526e:	200a      	movs	r0, #10
 8005270:	f7fe fb1c 	bl	80038ac <osDelay>
	  {
 8005274:	e7c4      	b.n	8005200 <controlLoop+0x14>
 8005276:	bf00      	nop
 8005278:	20000008 	.word	0x20000008
 800527c:	20000009 	.word	0x20000009
 8005280:	20001a48 	.word	0x20001a48
 8005284:	20001aa0 	.word	0x20001aa0

08005288 <getDistance>:
	  }
}

unsigned long long int getDistance() {
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	af00      	add	r7, sp, #0

	return pulseDuration * 100 / 17150;
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <getDistance+0x44>)
 800528e:	e893 0060 	ldmia.w	r3, {r5, r6}
 8005292:	462b      	mov	r3, r5
 8005294:	4634      	mov	r4, r6
 8005296:	18db      	adds	r3, r3, r3
 8005298:	eb44 0404 	adc.w	r4, r4, r4
 800529c:	195b      	adds	r3, r3, r5
 800529e:	eb44 0406 	adc.w	r4, r4, r6
 80052a2:	0162      	lsls	r2, r4, #5
 80052a4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80052a8:	0159      	lsls	r1, r3, #5
 80052aa:	185b      	adds	r3, r3, r1
 80052ac:	eb44 0402 	adc.w	r4, r4, r2
 80052b0:	1958      	adds	r0, r3, r5
 80052b2:	eb44 0106 	adc.w	r1, r4, r6
 80052b6:	f244 22fe 	movw	r2, #17150	; 0x42fe
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	f7fa ff8f 	bl	80001e0 <__aeabi_uldivmod>
 80052c2:	4603      	mov	r3, r0
 80052c4:	460c      	mov	r4, r1
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	4621      	mov	r1, r4
 80052ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052cc:	200019e8 	.word	0x200019e8

080052d0 <goAhead>:

void goAhead() {
 80052d0:	b490      	push	{r4, r7}
 80052d2:	af00      	add	r7, sp, #0
	m1Dir = Forw;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <goAhead+0x38>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
	m2Dir = Forw;
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <goAhead+0x3c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
	m1Speed = 400;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <goAhead+0x40>)
 80052e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052e6:	801a      	strh	r2, [r3, #0]
	m2Speed = 400;
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <goAhead+0x44>)
 80052ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052ee:	801a      	strh	r2, [r3, #0]
	moveTime++;
 80052f0:	4b09      	ldr	r3, [pc, #36]	; (8005318 <goAhead+0x48>)
 80052f2:	cb18      	ldmia	r3, {r3, r4}
 80052f4:	3301      	adds	r3, #1
 80052f6:	f144 0400 	adc.w	r4, r4, #0
 80052fa:	4a07      	ldr	r2, [pc, #28]	; (8005318 <goAhead+0x48>)
 80052fc:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	bc90      	pop	{r4, r7}
 8005306:	4770      	bx	lr
 8005308:	200019e0 	.word	0x200019e0
 800530c:	200019e1 	.word	0x200019e1
 8005310:	2000000a 	.word	0x2000000a
 8005314:	2000000c 	.word	0x2000000c
 8005318:	20001aa0 	.word	0x20001aa0

0800531c <goBack>:

void goBack() {
 800531c:	b490      	push	{r4, r7}
 800531e:	af00      	add	r7, sp, #0
	m1Dir = Backw;
 8005320:	4b0d      	ldr	r3, [pc, #52]	; (8005358 <goBack+0x3c>)
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
	m1Speed = 400;
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <goBack+0x40>)
 8005328:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800532c:	801a      	strh	r2, [r3, #0]
	m2Dir = Backw;
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <goBack+0x44>)
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
	m2Speed = 400;
 8005334:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <goBack+0x48>)
 8005336:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800533a:	801a      	strh	r2, [r3, #0]
	moveTime--;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <goBack+0x4c>)
 800533e:	cb18      	ldmia	r3, {r3, r4}
 8005340:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005344:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
 8005348:	4a07      	ldr	r2, [pc, #28]	; (8005368 <goBack+0x4c>)
 800534a:	e882 0018 	stmia.w	r2, {r3, r4}
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	bc90      	pop	{r4, r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	200019e0 	.word	0x200019e0
 800535c:	2000000a 	.word	0x2000000a
 8005360:	200019e1 	.word	0x200019e1
 8005364:	2000000c 	.word	0x2000000c
 8005368:	20001aa0 	.word	0x20001aa0

0800536c <makeTurnRight>:

void makeTurnRight() {
 800536c:	b598      	push	{r3, r4, r7, lr}
 800536e:	af00      	add	r7, sp, #0
	distance = getDistance();
 8005370:	f7ff ff8a 	bl	8005288 <getDistance>
 8005374:	4603      	mov	r3, r0
 8005376:	460c      	mov	r4, r1
 8005378:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <makeTurnRight+0x34>)
 800537a:	e882 0018 	stmia.w	r2, {r3, r4}
	m1Dir = Backw;
 800537e:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <makeTurnRight+0x38>)
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]
	m1Speed = 400;
 8005384:	4b08      	ldr	r3, [pc, #32]	; (80053a8 <makeTurnRight+0x3c>)
 8005386:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800538a:	801a      	strh	r2, [r3, #0]
	m2Dir = Forw;
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <makeTurnRight+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
	m2Speed = 400;
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <makeTurnRight+0x44>)
 8005394:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005398:	801a      	strh	r2, [r3, #0]
}
 800539a:	bf00      	nop
 800539c:	bd98      	pop	{r3, r4, r7, pc}
 800539e:	bf00      	nop
 80053a0:	20001a48 	.word	0x20001a48
 80053a4:	200019e0 	.word	0x200019e0
 80053a8:	2000000a 	.word	0x2000000a
 80053ac:	200019e1 	.word	0x200019e1
 80053b0:	2000000c 	.word	0x2000000c

080053b4 <measureObjectSize>:

unsigned long long int measureObjectSize() {
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
	unsigned long long int time = 0;
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	unsigned long long int distance = getDistance();
 80053c6:	f7ff ff5f 	bl	8005288 <getDistance>
 80053ca:	e9c7 0100 	strd	r0, r1, [r7]
	while (distance < maxDistance) {
 80053ce:	e00c      	b.n	80053ea <measureObjectSize+0x36>
		makeTurnRight();
 80053d0:	f7ff ffcc 	bl	800536c <makeTurnRight>
		distance = getDistance();
 80053d4:	f7ff ff58 	bl	8005288 <getDistance>
 80053d8:	e9c7 0100 	strd	r0, r1, [r7]
		time++;
 80053dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80053e0:	3301      	adds	r3, #1
 80053e2:	f144 0400 	adc.w	r4, r4, #0
 80053e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	while (distance < maxDistance) {
 80053ea:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80053ee:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80053f2:	e897 0006 	ldmia.w	r7, {r1, r2}
 80053f6:	42a2      	cmp	r2, r4
 80053f8:	bf08      	it	eq
 80053fa:	4299      	cmpeq	r1, r3
 80053fc:	d3e8      	bcc.n	80053d0 <measureObjectSize+0x1c>
	}

	return time;
 80053fe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8005402:	4618      	mov	r0, r3
 8005404:	4621      	mov	r1, r4
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}

0800540c <makeDoubleTurn>:

void makeDoubleTurn() {
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	int counter = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]



}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <sendPulse>:
* @brief Function implementing the VzdTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_VzdLoop */
void sendPulse(void){
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  	TIM17->CNT = 0;
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <sendPulse+0x44>)
 800542a:	2200      	movs	r2, #0
 800542c:	625a      	str	r2, [r3, #36]	; 0x24
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800542e:	2201      	movs	r2, #1
 8005430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005434:	480d      	ldr	r0, [pc, #52]	; (800546c <sendPulse+0x48>)
 8005436:	f7fb fb13 	bl	8000a60 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 800543a:	480d      	ldr	r0, [pc, #52]	; (8005470 <sendPulse+0x4c>)
 800543c:	f7fc fec5 	bl	80021ca <HAL_TIM_Base_Start>
	while((TIM17->CNT<50));
 8005440:	bf00      	nop
 8005442:	4b09      	ldr	r3, [pc, #36]	; (8005468 <sendPulse+0x44>)
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	2b31      	cmp	r3, #49	; 0x31
 8005448:	d9fb      	bls.n	8005442 <sendPulse+0x1e>
  	HAL_TIM_Base_Stop(&htim17);
 800544a:	4809      	ldr	r0, [pc, #36]	; (8005470 <sendPulse+0x4c>)
 800544c:	f7fc fed8 	bl	8002200 <HAL_TIM_Base_Stop>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8005450:	2200      	movs	r2, #0
 8005452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005456:	4805      	ldr	r0, [pc, #20]	; (800546c <sendPulse+0x48>)
 8005458:	f7fb fb02 	bl	8000a60 <HAL_GPIO_WritePin>
  	TIM17->CNT = 0;
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <sendPulse+0x44>)
 800545e:	2200      	movs	r2, #0
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40014800 	.word	0x40014800
 800546c:	48000800 	.word	0x48000800
 8005470:	20001a04 	.word	0x20001a04

08005474 <VzdLoop>:
// && ((TIM17->CNT)<9000)


void VzdLoop(void const * argument)
{
 8005474:	b590      	push	{r4, r7, lr}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VzdLoop */
  /* Infinite loop */
  for(;;)
  {
	  sendPulse();
 800547c:	f7ff ffd2 	bl	8005424 <sendPulse>
  	  TIM17->CNT = 0;
 8005480:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <VzdLoop+0x5c>)
 8005482:	2200      	movs	r2, #0
 8005484:	625a      	str	r2, [r3, #36]	; 0x24
  	  while(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)); //wait for pulse
 8005486:	bf00      	nop
 8005488:	2140      	movs	r1, #64	; 0x40
 800548a:	4812      	ldr	r0, [pc, #72]	; (80054d4 <VzdLoop+0x60>)
 800548c:	f7fb fad0 	bl	8000a30 <HAL_GPIO_ReadPin>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f8      	beq.n	8005488 <VzdLoop+0x14>
	  HAL_TIM_Base_Start(&htim17);
 8005496:	4810      	ldr	r0, [pc, #64]	; (80054d8 <VzdLoop+0x64>)
 8005498:	f7fc fe97 	bl	80021ca <HAL_TIM_Base_Start>
  	  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)); //wait for pulse
 800549c:	bf00      	nop
 800549e:	2140      	movs	r1, #64	; 0x40
 80054a0:	480c      	ldr	r0, [pc, #48]	; (80054d4 <VzdLoop+0x60>)
 80054a2:	f7fb fac5 	bl	8000a30 <HAL_GPIO_ReadPin>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f8      	bne.n	800549e <VzdLoop+0x2a>
  	  HAL_TIM_Base_Stop(&htim17);
 80054ac:	480a      	ldr	r0, [pc, #40]	; (80054d8 <VzdLoop+0x64>)
 80054ae:	f7fc fea7 	bl	8002200 <HAL_TIM_Base_Stop>
  	  pulseDuration = TIM17->CNT;
 80054b2:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <VzdLoop+0x5c>)
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	f04f 0400 	mov.w	r4, #0
 80054ba:	4a08      	ldr	r2, [pc, #32]	; (80054dc <VzdLoop+0x68>)
 80054bc:	e882 0018 	stmia.w	r2, {r3, r4}

  	  TIM17->CNT = 0;
 80054c0:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <VzdLoop+0x5c>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
	  osDelay(1);
 80054c6:	2001      	movs	r0, #1
 80054c8:	f7fe f9f0 	bl	80038ac <osDelay>
	  sendPulse();
 80054cc:	e7d6      	b.n	800547c <VzdLoop+0x8>
 80054ce:	bf00      	nop
 80054d0:	40014800 	.word	0x40014800
 80054d4:	48000800 	.word	0x48000800
 80054d8:	20001a04 	.word	0x20001a04
 80054dc:	200019e8 	.word	0x200019e8

080054e0 <backupLoop1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_backupLoop1 */
void backupLoop1(void const * argument)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN backupLoop1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80054e8:	2001      	movs	r0, #1
 80054ea:	f7fe f9df 	bl	80038ac <osDelay>
 80054ee:	e7fb      	b.n	80054e8 <backupLoop1+0x8>

080054f0 <EncoLoop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EncoLoop */
void EncoLoop(void const * argument)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoLoop */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80054f8:	2001      	movs	r0, #1
 80054fa:	f7fe f9d7 	bl	80038ac <osDelay>
 80054fe:	e7fb      	b.n	80054f8 <EncoLoop+0x8>

08005500 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005512:	f7fb f803 	bl	800051c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00

08005524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553a:	4a11      	ldr	r2, [pc, #68]	; (8005580 <HAL_MspInit+0x4c>)
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <HAL_MspInit+0x4c>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f043 0301 	orr.w	r3, r3, #1
 8005544:	6193      	str	r3, [r2, #24]
 8005546:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_MspInit+0x4c>)
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005552:	4a0b      	ldr	r2, [pc, #44]	; (8005580 <HAL_MspInit+0x4c>)
 8005554:	4b0a      	ldr	r3, [pc, #40]	; (8005580 <HAL_MspInit+0x4c>)
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	61d3      	str	r3, [r2, #28]
 800555e:	4b08      	ldr	r3, [pc, #32]	; (8005580 <HAL_MspInit+0x4c>)
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	210f      	movs	r1, #15
 800556e:	f06f 0001 	mvn.w	r0, #1
 8005572:	f7fb f8a5 	bl	80006c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40021000 	.word	0x40021000

08005584 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <HAL_TIM_PWM_MspInit+0x38>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d10b      	bne.n	80055ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8005598:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	61d3      	str	r3, [r2, #28]
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40021000 	.word	0x40021000

080055c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_TIM_Base_MspInit+0x38>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10b      	bne.n	80055ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80055d6:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <HAL_TIM_Base_MspInit+0x3c>)
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <HAL_TIM_Base_MspInit+0x3c>)
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e0:	6193      	str	r3, [r2, #24]
 80055e2:	4b07      	ldr	r3, [pc, #28]	; (8005600 <HAL_TIM_Base_MspInit+0x3c>)
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40014800 	.word	0x40014800
 8005600:	40021000 	.word	0x40021000

08005604 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	; 0x28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 0314 	add.w	r3, r7, #20
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1f      	ldr	r2, [pc, #124]	; (80056a0 <HAL_TIM_MspPostInit+0x9c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d138      	bne.n	8005698 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005626:	4a1f      	ldr	r2, [pc, #124]	; (80056a4 <HAL_TIM_MspPostInit+0xa0>)
 8005628:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <HAL_TIM_MspPostInit+0xa0>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005630:	6153      	str	r3, [r2, #20]
 8005632:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <HAL_TIM_MspPostInit+0xa0>)
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563e:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_TIM_MspPostInit+0xa0>)
 8005640:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <HAL_TIM_MspPostInit+0xa0>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005648:	6153      	str	r3, [r2, #20]
 800564a:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <HAL_TIM_MspPostInit+0xa0>)
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8005656:	2350      	movs	r3, #80	; 0x50
 8005658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565a:	2302      	movs	r3, #2
 800565c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005662:	2303      	movs	r3, #3
 8005664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005666:	2302      	movs	r3, #2
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800566a:	f107 0314 	add.w	r3, r7, #20
 800566e:	4619      	mov	r1, r3
 8005670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005674:	f7fb f84e 	bl	8000714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005678:	2303      	movs	r3, #3
 800567a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567c:	2302      	movs	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005684:	2300      	movs	r3, #0
 8005686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005688:	2302      	movs	r3, #2
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	4619      	mov	r1, r3
 8005692:	4805      	ldr	r0, [pc, #20]	; (80056a8 <HAL_TIM_MspPostInit+0xa4>)
 8005694:	f7fb f83e 	bl	8000714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005698:	bf00      	nop
 800569a:	3728      	adds	r7, #40	; 0x28
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40021000 	.word	0x40021000
 80056a8:	48000400 	.word	0x48000400

080056ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	; 0x28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	609a      	str	r2, [r3, #8]
 80056c0:	60da      	str	r2, [r3, #12]
 80056c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a17      	ldr	r2, [pc, #92]	; (8005728 <HAL_UART_MspInit+0x7c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d128      	bne.n	8005720 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <HAL_UART_MspInit+0x80>)
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_UART_MspInit+0x80>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d8:	61d3      	str	r3, [r2, #28]
 80056da:	4b14      	ldr	r3, [pc, #80]	; (800572c <HAL_UART_MspInit+0x80>)
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e6:	4a11      	ldr	r2, [pc, #68]	; (800572c <HAL_UART_MspInit+0x80>)
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_UART_MspInit+0x80>)
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f0:	6153      	str	r3, [r2, #20]
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <HAL_UART_MspInit+0x80>)
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80056fe:	230c      	movs	r3, #12
 8005700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005702:	2302      	movs	r3, #2
 8005704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570a:	2300      	movs	r3, #0
 800570c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800570e:	2307      	movs	r3, #7
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	4619      	mov	r1, r3
 8005718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800571c:	f7fa fffa 	bl	8000714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005720:	bf00      	nop
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40004400 	.word	0x40004400
 800572c:	40021000 	.word	0x40021000

08005730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8005740:	2200      	movs	r2, #0
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	2019      	movs	r0, #25
 8005746:	f7fa ffbb 	bl	80006c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 800574a:	2019      	movs	r0, #25
 800574c:	f7fa ffd4 	bl	80006f8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_InitTick+0x9c>)
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_InitTick+0x9c>)
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800575a:	6193      	str	r3, [r2, #24]
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <HAL_InitTick+0x9c>)
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005768:	f107 0210 	add.w	r2, r7, #16
 800576c:	f107 0314 	add.w	r3, r7, #20
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f7fc fab0 	bl	8001cd8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005778:	f7fc fa8c 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 800577c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <HAL_InitTick+0xa0>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	0c9b      	lsrs	r3, r3, #18
 8005788:	3b01      	subs	r3, #1
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <HAL_InitTick+0xa4>)
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <HAL_InitTick+0xa8>)
 8005790:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_InitTick+0xa4>)
 8005794:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005798:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <HAL_InitTick+0xa4>)
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_InitTick+0xa4>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <HAL_InitTick+0xa4>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80057ac:	4809      	ldr	r0, [pc, #36]	; (80057d4 <HAL_InitTick+0xa4>)
 80057ae:	f7fc fce1 	bl	8002174 <HAL_TIM_Base_Init>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80057b8:	4806      	ldr	r0, [pc, #24]	; (80057d4 <HAL_InitTick+0xa4>)
 80057ba:	f7fc fd4c 	bl	8002256 <HAL_TIM_Base_Start_IT>
 80057be:	4603      	mov	r3, r0
 80057c0:	e000      	b.n	80057c4 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3730      	adds	r7, #48	; 0x30
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40021000 	.word	0x40021000
 80057d0:	431bde83 	.word	0x431bde83
 80057d4:	20001b1c 	.word	0x20001b1c
 80057d8:	40012c00 	.word	0x40012c00

080057dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057ea:	b480      	push	{r7}
 80057ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057ee:	e7fe      	b.n	80057ee <HardFault_Handler+0x4>

080057f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057f4:	e7fe      	b.n	80057f4 <MemManage_Handler+0x4>

080057f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057fa:	e7fe      	b.n	80057fa <BusFault_Handler+0x4>

080057fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005800:	e7fe      	b.n	8005800 <UsageFault_Handler+0x4>

08005802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005802:	b480      	push	{r7}
 8005804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005814:	4802      	ldr	r0, [pc, #8]	; (8005820 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005816:	f7fc fdb5 	bl	8002384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20001b1c 	.word	0x20001b1c

08005824 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <SystemInit+0x84>)
 800582a:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <SystemInit+0x84>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005838:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <SystemInit+0x88>)
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <SystemInit+0x88>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f043 0301 	orr.w	r3, r3, #1
 8005842:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8005844:	4919      	ldr	r1, [pc, #100]	; (80058ac <SystemInit+0x88>)
 8005846:	4b19      	ldr	r3, [pc, #100]	; (80058ac <SystemInit+0x88>)
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <SystemInit+0x8c>)
 800584c:	4013      	ands	r3, r2
 800584e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005850:	4a16      	ldr	r2, [pc, #88]	; (80058ac <SystemInit+0x88>)
 8005852:	4b16      	ldr	r3, [pc, #88]	; (80058ac <SystemInit+0x88>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800585a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005860:	4a12      	ldr	r2, [pc, #72]	; (80058ac <SystemInit+0x88>)
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <SystemInit+0x88>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800586c:	4a0f      	ldr	r2, [pc, #60]	; (80058ac <SystemInit+0x88>)
 800586e:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <SystemInit+0x88>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005876:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005878:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <SystemInit+0x88>)
 800587a:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <SystemInit+0x88>)
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	f023 030f 	bic.w	r3, r3, #15
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8005884:	4909      	ldr	r1, [pc, #36]	; (80058ac <SystemInit+0x88>)
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <SystemInit+0x88>)
 8005888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588a:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <SystemInit+0x90>)
 800588c:	4013      	ands	r3, r2
 800588e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <SystemInit+0x88>)
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <SystemInit+0x84>)
 8005898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800589c:	609a      	str	r2, [r3, #8]
#endif
}
 800589e:	bf00      	nop
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	e000ed00 	.word	0xe000ed00
 80058ac:	40021000 	.word	0x40021000
 80058b0:	f87fc00c 	.word	0xf87fc00c
 80058b4:	ff00fccc 	.word	0xff00fccc

080058b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80058bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80058be:	e003      	b.n	80058c8 <LoopCopyDataInit>

080058c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80058c0:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80058c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80058c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80058c6:	3104      	adds	r1, #4

080058c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80058c8:	480b      	ldr	r0, [pc, #44]	; (80058f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80058cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80058ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80058d0:	d3f6      	bcc.n	80058c0 <CopyDataInit>
	ldr	r2, =_sbss
 80058d2:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <LoopForever+0x12>)
	b	LoopFillZerobss
 80058d4:	e002      	b.n	80058dc <LoopFillZerobss>

080058d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80058d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80058d8:	f842 3b04 	str.w	r3, [r2], #4

080058dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <LoopForever+0x16>)
	cmp	r2, r3
 80058de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80058e0:	d3f9      	bcc.n	80058d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058e2:	f7ff ff9f 	bl	8005824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058e6:	f000 f811 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058ea:	f7ff f8ed 	bl	8004ac8 <main>

080058ee <LoopForever>:

LoopForever:
    b LoopForever
 80058ee:	e7fe      	b.n	80058ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80058f0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80058f4:	08005aa8 	.word	0x08005aa8
	ldr	r0, =_sdata
 80058f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80058fc:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8005900:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8005904:	20001b5c 	.word	0x20001b5c

08005908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005908:	e7fe      	b.n	8005908 <ADC1_2_IRQHandler>
	...

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	4e0d      	ldr	r6, [pc, #52]	; (8005944 <__libc_init_array+0x38>)
 8005910:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005912:	1ba4      	subs	r4, r4, r6
 8005914:	10a4      	asrs	r4, r4, #2
 8005916:	2500      	movs	r5, #0
 8005918:	42a5      	cmp	r5, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	4e0b      	ldr	r6, [pc, #44]	; (800594c <__libc_init_array+0x40>)
 800591e:	4c0c      	ldr	r4, [pc, #48]	; (8005950 <__libc_init_array+0x44>)
 8005920:	f000 f820 	bl	8005964 <_init>
 8005924:	1ba4      	subs	r4, r4, r6
 8005926:	10a4      	asrs	r4, r4, #2
 8005928:	2500      	movs	r5, #0
 800592a:	42a5      	cmp	r5, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005934:	4798      	blx	r3
 8005936:	3501      	adds	r5, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800593e:	4798      	blx	r3
 8005940:	3501      	adds	r5, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08005aa0 	.word	0x08005aa0
 8005948:	08005aa0 	.word	0x08005aa0
 800594c:	08005aa0 	.word	0x08005aa0
 8005950:	08005aa4 	.word	0x08005aa4

08005954 <memset>:
 8005954:	4402      	add	r2, r0
 8005956:	4603      	mov	r3, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	f803 1b01 	strb.w	r1, [r3], #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	bf00      	nop
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
