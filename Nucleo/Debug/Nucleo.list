
Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005864  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005a04  08005a04  00015a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08005b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00001bcc  20000018  20000018  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20001be4  20001be4  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018368  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e19  00000000  00000000  000383ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000010c0  00000000  00000000  0003b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f98  00000000  00000000  0003c288  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008091  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000056b5  00000000  00000000  000452b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004a966  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000455c  00000000  00000000  0004a9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080059ec 	.word	0x080059ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	080059ec 	.word	0x080059ec

080001e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001e4:	4a08      	ldr	r2, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e6:	4b08      	ldr	r3, [pc, #32]	; (8000208 <HAL_Init+0x28>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f043 0310 	orr.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001f0:	2003      	movs	r0, #3
 80001f2:	f000 f8d2 	bl	800039a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001f6:	2005      	movs	r0, #5
 80001f8:	f005 fade 	bl	80057b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001fc:	f005 f96c 	bl	80054d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000200:	2300      	movs	r3, #0
}
 8000202:	4618      	mov	r0, r3
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40022000 	.word	0x40022000

0800020c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <HAL_IncTick+0x20>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	461a      	mov	r2, r3
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <HAL_IncTick+0x24>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4413      	add	r3, r2
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <HAL_IncTick+0x24>)
 800021e:	6013      	str	r3, [r2, #0]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	200019f8 	.word	0x200019f8

08000234 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return uwTick;  
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <HAL_GetTick+0x14>)
 800023a:	681b      	ldr	r3, [r3, #0]
}
 800023c:	4618      	mov	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	200019f8 	.word	0x200019f8

0800024c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f003 0307 	and.w	r3, r3, #7
 800025a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <NVIC_SetPriorityGrouping+0x44>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000262:	68ba      	ldr	r2, [r7, #8]
 8000264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000268:	4013      	ands	r3, r2
 800026a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800027e:	4a04      	ldr	r2, [pc, #16]	; (8000290 <NVIC_SetPriorityGrouping+0x44>)
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	60d3      	str	r3, [r2, #12]
}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <NVIC_GetPriorityGrouping+0x18>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	0a1b      	lsrs	r3, r3, #8
 800029e:	f003 0307 	and.w	r3, r3, #7
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002ba:	4909      	ldr	r1, [pc, #36]	; (80002e0 <NVIC_EnableIRQ+0x30>)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	095b      	lsrs	r3, r3, #5
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	f002 021f 	and.w	r2, r2, #31
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	da0b      	bge.n	8000310 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <NVIC_SetPriority+0x4c>)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	3b04      	subs	r3, #4
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	440b      	add	r3, r1
 800030c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800030e:	e009      	b.n	8000324 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000310:	4908      	ldr	r1, [pc, #32]	; (8000334 <NVIC_SetPriority+0x50>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	e000e100 	.word	0xe000e100

08000338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000338:	b480      	push	{r7}
 800033a:	b089      	sub	sp, #36	; 0x24
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800034c:	69fb      	ldr	r3, [r7, #28]
 800034e:	f1c3 0307 	rsb	r3, r3, #7
 8000352:	2b04      	cmp	r3, #4
 8000354:	bf28      	it	cs
 8000356:	2304      	movcs	r3, #4
 8000358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	3304      	adds	r3, #4
 800035e:	2b06      	cmp	r3, #6
 8000360:	d902      	bls.n	8000368 <NVIC_EncodePriority+0x30>
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	3b03      	subs	r3, #3
 8000366:	e000      	b.n	800036a <NVIC_EncodePriority+0x32>
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	2201      	movs	r2, #1
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	1e5a      	subs	r2, r3, #1
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	401a      	ands	r2, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037e:	2101      	movs	r1, #1
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	1e59      	subs	r1, r3, #1
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038c:	4313      	orrs	r3, r2
         );
}
 800038e:	4618      	mov	r0, r3
 8000390:	3724      	adds	r7, #36	; 0x24
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f7ff ff52 	bl	800024c <NVIC_SetPriorityGrouping>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
 80003bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003c2:	f7ff ff67 	bl	8000294 <NVIC_GetPriorityGrouping>
 80003c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	68b9      	ldr	r1, [r7, #8]
 80003cc:	6978      	ldr	r0, [r7, #20]
 80003ce:	f7ff ffb3 	bl	8000338 <NVIC_EncodePriority>
 80003d2:	4602      	mov	r2, r0
 80003d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003d8:	4611      	mov	r1, r2
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff82 	bl	80002e4 <NVIC_SetPriority>
}
 80003e0:	bf00      	nop
 80003e2:	3718      	adds	r7, #24
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80003f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff5a 	bl	80002b0 <NVIC_EnableIRQ>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000416:	2300      	movs	r3, #0
 8000418:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800041a:	e160      	b.n	80006de <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	2101      	movs	r1, #1
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	4013      	ands	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	2b00      	cmp	r3, #0
 8000430:	f000 8152 	beq.w	80006d8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d003      	beq.n	8000444 <HAL_GPIO_Init+0x40>
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	2b12      	cmp	r3, #18
 8000442:	d123      	bne.n	800048c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	08da      	lsrs	r2, r3, #3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3208      	adds	r2, #8
 800044c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	f003 0307 	and.w	r3, r3, #7
 8000458:	009b      	lsls	r3, r3, #2
 800045a:	220f      	movs	r2, #15
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	43db      	mvns	r3, r3
 8000462:	693a      	ldr	r2, [r7, #16]
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	691a      	ldr	r2, [r3, #16]
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	f003 0307 	and.w	r3, r3, #7
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4313      	orrs	r3, r2
 800047c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	08da      	lsrs	r2, r3, #3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3208      	adds	r2, #8
 8000486:	6939      	ldr	r1, [r7, #16]
 8000488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	2203      	movs	r2, #3
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	693a      	ldr	r2, [r7, #16]
 80004a0:	4013      	ands	r3, r2
 80004a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	f003 0203 	and.w	r2, r3, #3
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	693a      	ldr	r2, [r7, #16]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d00b      	beq.n	80004e0 <HAL_GPIO_Init+0xdc>
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d007      	beq.n	80004e0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004d4:	2b11      	cmp	r3, #17
 80004d6:	d003      	beq.n	80004e0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b12      	cmp	r3, #18
 80004de:	d130      	bne.n	8000542 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	2203      	movs	r2, #3
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	693a      	ldr	r2, [r7, #16]
 80004f4:	4013      	ands	r3, r2
 80004f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	68da      	ldr	r2, [r3, #12]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	693a      	ldr	r2, [r7, #16]
 8000506:	4313      	orrs	r3, r2
 8000508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	693a      	ldr	r2, [r7, #16]
 800050e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000516:	2201      	movs	r2, #1
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	693a      	ldr	r2, [r7, #16]
 8000522:	4013      	ands	r3, r2
 8000524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	091b      	lsrs	r3, r3, #4
 800052c:	f003 0201 	and.w	r2, r3, #1
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	4313      	orrs	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	2203      	movs	r2, #3
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	4013      	ands	r3, r2
 8000558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	689a      	ldr	r2, [r3, #8]
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	693a      	ldr	r2, [r7, #16]
 8000568:	4313      	orrs	r3, r2
 800056a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	2b00      	cmp	r3, #0
 800057c:	f000 80ac 	beq.w	80006d8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000580:	4a5e      	ldr	r2, [pc, #376]	; (80006fc <HAL_GPIO_Init+0x2f8>)
 8000582:	4b5e      	ldr	r3, [pc, #376]	; (80006fc <HAL_GPIO_Init+0x2f8>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f043 0301 	orr.w	r3, r3, #1
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b5b      	ldr	r3, [pc, #364]	; (80006fc <HAL_GPIO_Init+0x2f8>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000598:	4a59      	ldr	r2, [pc, #356]	; (8000700 <HAL_GPIO_Init+0x2fc>)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	089b      	lsrs	r3, r3, #2
 800059e:	3302      	adds	r3, #2
 80005a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	f003 0303 	and.w	r3, r3, #3
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	220f      	movs	r2, #15
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	4013      	ands	r3, r2
 80005ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005c2:	d025      	beq.n	8000610 <HAL_GPIO_Init+0x20c>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a4f      	ldr	r2, [pc, #316]	; (8000704 <HAL_GPIO_Init+0x300>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d01f      	beq.n	800060c <HAL_GPIO_Init+0x208>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a4e      	ldr	r2, [pc, #312]	; (8000708 <HAL_GPIO_Init+0x304>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d019      	beq.n	8000608 <HAL_GPIO_Init+0x204>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a4d      	ldr	r2, [pc, #308]	; (800070c <HAL_GPIO_Init+0x308>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d013      	beq.n	8000604 <HAL_GPIO_Init+0x200>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a4c      	ldr	r2, [pc, #304]	; (8000710 <HAL_GPIO_Init+0x30c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d00d      	beq.n	8000600 <HAL_GPIO_Init+0x1fc>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a4b      	ldr	r2, [pc, #300]	; (8000714 <HAL_GPIO_Init+0x310>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d007      	beq.n	80005fc <HAL_GPIO_Init+0x1f8>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a4a      	ldr	r2, [pc, #296]	; (8000718 <HAL_GPIO_Init+0x314>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <HAL_GPIO_Init+0x1f4>
 80005f4:	2306      	movs	r3, #6
 80005f6:	e00c      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 80005f8:	2307      	movs	r3, #7
 80005fa:	e00a      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 80005fc:	2305      	movs	r3, #5
 80005fe:	e008      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 8000600:	2304      	movs	r3, #4
 8000602:	e006      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 8000604:	2303      	movs	r3, #3
 8000606:	e004      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 8000608:	2302      	movs	r3, #2
 800060a:	e002      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 800060c:	2301      	movs	r3, #1
 800060e:	e000      	b.n	8000612 <HAL_GPIO_Init+0x20e>
 8000610:	2300      	movs	r3, #0
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	f002 0203 	and.w	r2, r2, #3
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	4093      	lsls	r3, r2
 800061c:	693a      	ldr	r2, [r7, #16]
 800061e:	4313      	orrs	r3, r2
 8000620:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000622:	4937      	ldr	r1, [pc, #220]	; (8000700 <HAL_GPIO_Init+0x2fc>)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	089b      	lsrs	r3, r3, #2
 8000628:	3302      	adds	r3, #2
 800062a:	693a      	ldr	r2, [r7, #16]
 800062c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000630:	4b3a      	ldr	r3, [pc, #232]	; (800071c <HAL_GPIO_Init+0x318>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	43db      	mvns	r3, r3
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000654:	4a31      	ldr	r2, [pc, #196]	; (800071c <HAL_GPIO_Init+0x318>)
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <HAL_GPIO_Init+0x318>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	43db      	mvns	r3, r3
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	4013      	ands	r3, r2
 8000668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d003      	beq.n	800067e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000676:	693a      	ldr	r2, [r7, #16]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4313      	orrs	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800067e:	4a27      	ldr	r2, [pc, #156]	; (800071c <HAL_GPIO_Init+0x318>)
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <HAL_GPIO_Init+0x318>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	43db      	mvns	r3, r3
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	4013      	ands	r3, r2
 8000692:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800069c:	2b00      	cmp	r3, #0
 800069e:	d003      	beq.n	80006a8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80006a0:	693a      	ldr	r2, [r7, #16]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <HAL_GPIO_Init+0x318>)
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_GPIO_Init+0x318>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	43db      	mvns	r3, r3
 80006b8:	693a      	ldr	r2, [r7, #16]
 80006ba:	4013      	ands	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d003      	beq.n	80006d2 <HAL_GPIO_Init+0x2ce>
        {
          temp |= iocurrent;
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <HAL_GPIO_Init+0x318>)
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	fa22 f303 	lsr.w	r3, r2, r3
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f47f ae97 	bne.w	800041c <HAL_GPIO_Init+0x18>
  }
}
 80006ee:	bf00      	nop
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010000 	.word	0x40010000
 8000704:	48000400 	.word	0x48000400
 8000708:	48000800 	.word	0x48000800
 800070c:	48000c00 	.word	0x48000c00
 8000710:	48001000 	.word	0x48001000
 8000714:	48001400 	.word	0x48001400
 8000718:	48001800 	.word	0x48001800
 800071c:	40010400 	.word	0x40010400

08000720 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691a      	ldr	r2, [r3, #16]
 8000730:	887b      	ldrh	r3, [r7, #2]
 8000732:	4013      	ands	r3, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d002      	beq.n	800073e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e001      	b.n	8000742 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000742:	7bfb      	ldrb	r3, [r7, #15]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	807b      	strh	r3, [r7, #2]
 800075c:	4613      	mov	r3, r2
 800075e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000760:	787b      	ldrb	r3, [r7, #1]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000766:	887a      	ldrh	r2, [r7, #2]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800076c:	e002      	b.n	8000774 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800076e:	887a      	ldrh	r2, [r7, #2]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000786:	af00      	add	r7, sp, #0
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d102      	bne.n	800079a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	f000 beda 	b.w	800154e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 8164 	beq.w	8000a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007aa:	4bb0      	ldr	r3, [pc, #704]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f003 030c 	and.w	r3, r3, #12
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d00c      	beq.n	80007d0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b6:	4bad      	ldr	r3, [pc, #692]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f003 030c 	and.w	r3, r3, #12
 80007be:	2b08      	cmp	r3, #8
 80007c0:	d15a      	bne.n	8000878 <HAL_RCC_OscConfig+0xf8>
 80007c2:	4baa      	ldr	r3, [pc, #680]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80007ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ce:	d153      	bne.n	8000878 <HAL_RCC_OscConfig+0xf8>
 80007d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80007dc:	fa93 f3a3 	rbit	r3, r3
 80007e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80007e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e8:	fab3 f383 	clz	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	095b      	lsrs	r3, r3, #5
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d102      	bne.n	8000802 <HAL_RCC_OscConfig+0x82>
 80007fc:	4b9b      	ldr	r3, [pc, #620]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	e015      	b.n	800082e <HAL_RCC_OscConfig+0xae>
 8000802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000806:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800080e:	fa93 f3a3 	rbit	r3, r3
 8000812:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800081e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000822:	fa93 f3a3 	rbit	r3, r3
 8000826:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800082a:	4b90      	ldr	r3, [pc, #576]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 800082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000832:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000836:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800083a:	fa92 f2a2 	rbit	r2, r2
 800083e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000842:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000846:	fab2 f282 	clz	r2, r2
 800084a:	b252      	sxtb	r2, r2
 800084c:	f042 0220 	orr.w	r2, r2, #32
 8000850:	b252      	sxtb	r2, r2
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	f002 021f 	and.w	r2, r2, #31
 8000858:	2101      	movs	r1, #1
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4013      	ands	r3, r2
 8000860:	2b00      	cmp	r3, #0
 8000862:	f000 8105 	beq.w	8000a70 <HAL_RCC_OscConfig+0x2f0>
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	2b00      	cmp	r3, #0
 800086e:	f040 80ff 	bne.w	8000a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	f000 be6b 	b.w	800154e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000882:	d106      	bne.n	8000892 <HAL_RCC_OscConfig+0x112>
 8000884:	4a79      	ldr	r2, [pc, #484]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 8000886:	4b79      	ldr	r3, [pc, #484]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	e030      	b.n	80008f4 <HAL_RCC_OscConfig+0x174>
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10c      	bne.n	80008b6 <HAL_RCC_OscConfig+0x136>
 800089c:	4a73      	ldr	r2, [pc, #460]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 800089e:	4b73      	ldr	r3, [pc, #460]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4a70      	ldr	r2, [pc, #448]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008aa:	4b70      	ldr	r3, [pc, #448]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	e01e      	b.n	80008f4 <HAL_RCC_OscConfig+0x174>
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008c0:	d10c      	bne.n	80008dc <HAL_RCC_OscConfig+0x15c>
 80008c2:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008c4:	4b69      	ldr	r3, [pc, #420]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	4a67      	ldr	r2, [pc, #412]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008d0:	4b66      	ldr	r3, [pc, #408]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e00b      	b.n	80008f4 <HAL_RCC_OscConfig+0x174>
 80008dc:	4a63      	ldr	r2, [pc, #396]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008de:	4b63      	ldr	r3, [pc, #396]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4a60      	ldr	r2, [pc, #384]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008ea:	4b60      	ldr	r3, [pc, #384]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d05a      	beq.n	80009b4 <HAL_RCC_OscConfig+0x234>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fe:	f7ff fc99 	bl	8000234 <HAL_GetTick>
 8000902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000906:	e00a      	b.n	800091e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000908:	f7ff fc94 	bl	8000234 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	2b64      	cmp	r3, #100	; 0x64
 8000916:	d902      	bls.n	800091e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000918:	2303      	movs	r3, #3
 800091a:	f000 be18 	b.w	800154e <HAL_RCC_OscConfig+0xdce>
 800091e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000922:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000926:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800092a:	fa93 f3a3 	rbit	r3, r3
 800092e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000932:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000936:	fab3 f383 	clz	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b01      	cmp	r3, #1
 8000948:	d102      	bne.n	8000950 <HAL_RCC_OscConfig+0x1d0>
 800094a:	4b48      	ldr	r3, [pc, #288]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	e015      	b.n	800097c <HAL_RCC_OscConfig+0x1fc>
 8000950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000954:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000958:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800095c:	fa93 f3a3 	rbit	r3, r3
 8000960:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000968:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800096c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000970:	fa93 f3a3 	rbit	r3, r3
 8000974:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000978:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 800097a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000980:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000984:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000988:	fa92 f2a2 	rbit	r2, r2
 800098c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000990:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000994:	fab2 f282 	clz	r2, r2
 8000998:	b252      	sxtb	r2, r2
 800099a:	f042 0220 	orr.w	r2, r2, #32
 800099e:	b252      	sxtb	r2, r2
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f002 021f 	and.w	r2, r2, #31
 80009a6:	2101      	movs	r1, #1
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	4013      	ands	r3, r2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0aa      	beq.n	8000908 <HAL_RCC_OscConfig+0x188>
 80009b2:	e05e      	b.n	8000a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009b4:	f7ff fc3e 	bl	8000234 <HAL_GetTick>
 80009b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009bc:	e00a      	b.n	80009d4 <HAL_RCC_OscConfig+0x254>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009be:	f7ff fc39 	bl	8000234 <HAL_GetTick>
 80009c2:	4602      	mov	r2, r0
 80009c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	2b64      	cmp	r3, #100	; 0x64
 80009cc:	d902      	bls.n	80009d4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80009ce:	2303      	movs	r3, #3
 80009d0:	f000 bdbd 	b.w	800154e <HAL_RCC_OscConfig+0xdce>
 80009d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80009e0:	fa93 f3a3 	rbit	r3, r3
 80009e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80009e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d102      	bne.n	8000a06 <HAL_RCC_OscConfig+0x286>
 8000a00:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	e015      	b.n	8000a32 <HAL_RCC_OscConfig+0x2b2>
 8000a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a26:	fa93 f3a3 	rbit	r3, r3
 8000a2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_RCC_OscConfig+0x2ec>)
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a36:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a3a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a3e:	fa92 f2a2 	rbit	r2, r2
 8000a42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b252      	sxtb	r2, r2
 8000a50:	f042 0220 	orr.w	r2, r2, #32
 8000a54:	b252      	sxtb	r2, r2
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	f002 021f 	and.w	r2, r2, #31
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a62:	4013      	ands	r3, r2
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1aa      	bne.n	80009be <HAL_RCC_OscConfig+0x23e>
 8000a68:	e003      	b.n	8000a72 <HAL_RCC_OscConfig+0x2f2>
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	f000 8171 	beq.w	8000d64 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a82:	4bd0      	ldr	r3, [pc, #832]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 030c 	and.w	r3, r3, #12
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00c      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x328>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a8e:	4bcd      	ldr	r3, [pc, #820]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 030c 	and.w	r3, r3, #12
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d16e      	bne.n	8000b78 <HAL_RCC_OscConfig+0x3f8>
 8000a9a:	4bca      	ldr	r3, [pc, #808]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000aa6:	d167      	bne.n	8000b78 <HAL_RCC_OscConfig+0x3f8>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ab2:	fa93 f3a3 	rbit	r3, r3
 8000ab6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000aba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000abe:	fab3 f383 	clz	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	095b      	lsrs	r3, r3, #5
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d102      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x358>
 8000ad2:	4bbc      	ldr	r3, [pc, #752]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	e013      	b.n	8000b00 <HAL_RCC_OscConfig+0x380>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ade:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ae2:	fa93 f3a3 	rbit	r3, r3
 8000ae6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000aea:	2302      	movs	r3, #2
 8000aec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000af0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000af4:	fa93 f3a3 	rbit	r3, r3
 8000af8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000afc:	4bb1      	ldr	r3, [pc, #708]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b00:	2202      	movs	r2, #2
 8000b02:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b06:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b0a:	fa92 f2a2 	rbit	r2, r2
 8000b0e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b12:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b16:	fab2 f282 	clz	r2, r2
 8000b1a:	b252      	sxtb	r2, r2
 8000b1c:	f042 0220 	orr.w	r2, r2, #32
 8000b20:	b252      	sxtb	r2, r2
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	f002 021f 	and.w	r2, r2, #31
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d007      	beq.n	8000b44 <HAL_RCC_OscConfig+0x3c4>
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d002      	beq.n	8000b44 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f000 bd05 	b.w	800154e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b44:	489f      	ldr	r0, [pc, #636]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000b46:	4b9f      	ldr	r3, [pc, #636]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6919      	ldr	r1, [r3, #16]
 8000b54:	23f8      	movs	r3, #248	; 0xf8
 8000b56:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000b5e:	fa93 f3a3 	rbit	r3, r3
 8000b62:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000b66:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000b6a:	fab3 f383 	clz	r3, r3
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b76:	e0f5      	b.n	8000d64 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 8085 	beq.w	8000c8e <HAL_RCC_OscConfig+0x50e>
 8000b84:	2301      	movs	r3, #1
 8000b86:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000b96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b9a:	fab3 f383 	clz	r3, r3
 8000b9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ba2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	2301      	movs	r3, #1
 8000bac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fb41 	bl	8000234 <HAL_GetTick>
 8000bb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb6:	e00a      	b.n	8000bce <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fb3c 	bl	8000234 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d902      	bls.n	8000bce <HAL_RCC_OscConfig+0x44e>
          {
            return HAL_TIMEOUT;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	f000 bcc0 	b.w	800154e <HAL_RCC_OscConfig+0xdce>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bd4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000bd8:	fa93 f3a3 	rbit	r3, r3
 8000bdc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000be0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d102      	bne.n	8000bfe <HAL_RCC_OscConfig+0x47e>
 8000bf8:	4b72      	ldr	r3, [pc, #456]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	e013      	b.n	8000c26 <HAL_RCC_OscConfig+0x4a6>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c04:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c08:	fa93 f3a3 	rbit	r3, r3
 8000c0c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c10:	2302      	movs	r3, #2
 8000c12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c22:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	2202      	movs	r2, #2
 8000c28:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c30:	fa92 f2a2 	rbit	r2, r2
 8000c34:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c38:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b252      	sxtb	r2, r2
 8000c42:	f042 0220 	orr.w	r2, r2, #32
 8000c46:	b252      	sxtb	r2, r2
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	f002 021f 	and.w	r2, r2, #31
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0ae      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x438>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5a:	485a      	ldr	r0, [pc, #360]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000c5c:	4b59      	ldr	r3, [pc, #356]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6919      	ldr	r1, [r3, #16]
 8000c6a:	23f8      	movs	r3, #248	; 0xf8
 8000c6c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000c7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c80:	fab3 f383 	clz	r3, r3
 8000c84:	fa01 f303 	lsl.w	r3, r1, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	6003      	str	r3, [r0, #0]
 8000c8c:	e06a      	b.n	8000d64 <HAL_RCC_OscConfig+0x5e4>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000ca0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fabc 	bl	8000234 <HAL_GetTick>
 8000cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc0:	e00a      	b.n	8000cd8 <HAL_RCC_OscConfig+0x558>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc2:	f7ff fab7 	bl	8000234 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d902      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x558>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	f000 bc3b 	b.w	800154e <HAL_RCC_OscConfig+0xdce>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ce2:	fa93 f3a3 	rbit	r3, r3
 8000ce6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000cea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cee:	fab3 f383 	clz	r3, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d102      	bne.n	8000d08 <HAL_RCC_OscConfig+0x588>
 8000d02:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	e013      	b.n	8000d30 <HAL_RCC_OscConfig+0x5b0>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d12:	fa93 f3a3 	rbit	r3, r3
 8000d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d20:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d24:	fa93 f3a3 	rbit	r3, r3
 8000d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <HAL_RCC_OscConfig+0x644>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	2202      	movs	r2, #2
 8000d32:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d36:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b252      	sxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b252      	sxtb	r2, r2
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	f002 021f 	and.w	r2, r2, #31
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1ae      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x542>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80d7 	beq.w	8000f22 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d066      	beq.n	8000e4c <HAL_RCC_OscConfig+0x6cc>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_RCC_OscConfig+0x648>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	461a      	mov	r2, r3
 8000da2:	2301      	movs	r3, #1
 8000da4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fa45 	bl	8000234 <HAL_GetTick>
 8000daa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dae:	e00d      	b.n	8000dcc <HAL_RCC_OscConfig+0x64c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fa40 	bl	8000234 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d905      	bls.n	8000dcc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e3c4      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	10908120 	.word	0x10908120
 8000dcc:	2302      	movs	r3, #2
 8000dce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000de8:	fa93 f2a3 	rbit	r2, r3
 8000dec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000df6:	2202      	movs	r2, #2
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	fa93 f2a3 	rbit	r2, r3
 8000e04:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0a:	4ba5      	ldr	r3, [pc, #660]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e12:	2102      	movs	r1, #2
 8000e14:	6019      	str	r1, [r3, #0]
 8000e16:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	fa93 f1a3 	rbit	r1, r3
 8000e20:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e24:	6019      	str	r1, [r3, #0]
  return(result);
 8000e26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0b2      	beq.n	8000db0 <HAL_RCC_OscConfig+0x630>
 8000e4a:	e06a      	b.n	8000f22 <HAL_RCC_OscConfig+0x7a2>
 8000e4c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	fa93 f2a3 	rbit	r2, r3
 8000e5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e62:	601a      	str	r2, [r3, #0]
  return(result);
 8000e64:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e6a:	fab3 f383 	clz	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <HAL_RCC_OscConfig+0x924>)
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	461a      	mov	r2, r3
 8000e78:	2300      	movs	r3, #0
 8000e7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff f9da 	bl	8000234 <HAL_GetTick>
 8000e80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e84:	e009      	b.n	8000e9a <HAL_RCC_OscConfig+0x71a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e86:	f7ff f9d5 	bl	8000234 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e359      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 8000e9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	fa93 f2a3 	rbit	r2, r3
 8000eac:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	fa93 f2a3 	rbit	r2, r3
 8000ec4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ece:	2202      	movs	r2, #2
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	fa93 f2a3 	rbit	r2, r3
 8000edc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000ee0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000ee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ee6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eea:	2102      	movs	r1, #2
 8000eec:	6019      	str	r1, [r3, #0]
 8000eee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	fa93 f1a3 	rbit	r1, r3
 8000ef8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000efc:	6019      	str	r1, [r3, #0]
  return(result);
 8000efe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1b1      	bne.n	8000e86 <HAL_RCC_OscConfig+0x706>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 8159 	beq.w	80011e4 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f38:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d112      	bne.n	8000f6a <HAL_RCC_OscConfig+0x7ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	4a56      	ldr	r2, [pc, #344]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	61d3      	str	r3, [r2, #28]
 8000f50:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000f64:	2301      	movs	r3, #1
 8000f66:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6a:	4b4f      	ldr	r3, [pc, #316]	; (80010a8 <HAL_RCC_OscConfig+0x928>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d11a      	bne.n	8000fac <HAL_RCC_OscConfig+0x82c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f76:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_RCC_OscConfig+0x928>)
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_RCC_OscConfig+0x928>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f82:	f7ff f957 	bl	8000234 <HAL_GetTick>
 8000f86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	e009      	b.n	8000fa0 <HAL_RCC_OscConfig+0x820>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8c:	f7ff f952 	bl	8000234 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	; 0x64
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x820>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e2d6      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_RCC_OscConfig+0x928>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0ef      	beq.n	8000f8c <HAL_RCC_OscConfig+0x80c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d106      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x844>
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6213      	str	r3, [r2, #32]
 8000fc2:	e02f      	b.n	8001024 <HAL_RCC_OscConfig+0x8a4>
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x868>
 8000fce:	4a34      	ldr	r2, [pc, #208]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	4a31      	ldr	r2, [pc, #196]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000fdc:	4b30      	ldr	r3, [pc, #192]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	e01d      	b.n	8001024 <HAL_RCC_OscConfig+0x8a4>
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b05      	cmp	r3, #5
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x88c>
 8000ff2:	4a2b      	ldr	r2, [pc, #172]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	e00b      	b.n	8001024 <HAL_RCC_OscConfig+0x8a4>
 800100c:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	f023 0301 	bic.w	r3, r3, #1
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d06b      	beq.n	8001106 <HAL_RCC_OscConfig+0x986>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102e:	f7ff f901 	bl	8000234 <HAL_GetTick>
 8001032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001038:	f7ff f8fc 	bl	8000234 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	f241 3288 	movw	r2, #5000	; 0x1388
 8001048:	4293      	cmp	r3, r2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e27e      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 8001050:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001054:	2202      	movs	r2, #2
 8001056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	fa93 f2a3 	rbit	r2, r3
 8001062:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800106c:	2202      	movs	r2, #2
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	fa93 f2a3 	rbit	r2, r3
 800107a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800107e:	601a      	str	r2, [r3, #0]
  return(result);
 8001080:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001084:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d108      	bne.n	80010ac <HAL_RCC_OscConfig+0x92c>
 800109a:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <HAL_RCC_OscConfig+0x920>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	e013      	b.n	80010c8 <HAL_RCC_OscConfig+0x948>
 80010a0:	40021000 	.word	0x40021000
 80010a4:	10908120 	.word	0x10908120
 80010a8:	40007000 	.word	0x40007000
 80010ac:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010b0:	2202      	movs	r2, #2
 80010b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	fa93 f2a3 	rbit	r2, r3
 80010be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4bc0      	ldr	r3, [pc, #768]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010cc:	2102      	movs	r1, #2
 80010ce:	6011      	str	r1, [r2, #0]
 80010d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	fa92 f1a2 	rbit	r1, r2
 80010da:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80010de:	6011      	str	r1, [r2, #0]
  return(result);
 80010e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b252      	sxtb	r2, r2
 80010ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f0:	b252      	sxtb	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f002 021f 	and.w	r2, r2, #31
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d099      	beq.n	8001038 <HAL_RCC_OscConfig+0x8b8>
 8001104:	e064      	b.n	80011d0 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff f895 	bl	8000234 <HAL_GetTick>
 800110a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800110e:	e00b      	b.n	8001128 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001110:	f7ff f890 	bl	8000234 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001120:	4293      	cmp	r3, r2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e212      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 8001128:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800112c:	2202      	movs	r2, #2
 800112e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001130:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	fa93 f2a3 	rbit	r2, r3
 800113a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	fa93 f2a3 	rbit	r2, r3
 8001152:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001156:	601a      	str	r2, [r3, #0]
  return(result);
 8001158:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800115c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115e:	fab3 f383 	clz	r3, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x9f8>
 8001172:	4b95      	ldr	r3, [pc, #596]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	e00d      	b.n	8001194 <HAL_RCC_OscConfig+0xa14>
 8001178:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800117c:	2202      	movs	r2, #2
 800117e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	fa93 f2a3 	rbit	r2, r3
 800118a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4b8d      	ldr	r3, [pc, #564]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001198:	2102      	movs	r1, #2
 800119a:	6011      	str	r1, [r2, #0]
 800119c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	fa92 f1a2 	rbit	r1, r2
 80011a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011aa:	6011      	str	r1, [r2, #0]
  return(result);
 80011ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011b0:	6812      	ldr	r2, [r2, #0]
 80011b2:	fab2 f282 	clz	r2, r2
 80011b6:	b252      	sxtb	r2, r2
 80011b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011bc:	b252      	sxtb	r2, r2
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	f002 021f 	and.w	r2, r2, #31
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d19f      	bne.n	8001110 <HAL_RCC_OscConfig+0x990>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d105      	bne.n	80011e4 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d8:	4a7b      	ldr	r2, [pc, #492]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 80011da:	4b7b      	ldr	r3, [pc, #492]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 81ae 	beq.w	800154c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	f000 81a5 	beq.w	8001548 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b02      	cmp	r3, #2
 8001206:	f040 811d 	bne.w	8001444 <HAL_RCC_OscConfig+0xcc4>
 800120a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800120e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fa93 f2a3 	rbit	r2, r3
 800121e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001222:	601a      	str	r2, [r3, #0]
  return(result);
 8001224:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001228:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001232:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	461a      	mov	r2, r3
 800123a:	2300      	movs	r3, #0
 800123c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7fe fff9 	bl	8000234 <HAL_GetTick>
 8001242:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001246:	e009      	b.n	800125c <HAL_RCC_OscConfig+0xadc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001248:	f7fe fff4 	bl	8000234 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0xadc>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e178      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 800125c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fa93 f2a3 	rbit	r2, r3
 8001270:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001274:	601a      	str	r2, [r3, #0]
  return(result);
 8001276:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800127a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d102      	bne.n	8001296 <HAL_RCC_OscConfig+0xb16>
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	e01b      	b.n	80012ce <HAL_RCC_OscConfig+0xb4e>
 8001296:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800129a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800129e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	fa93 f2a3 	rbit	r2, r3
 80012aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	fa93 f2a3 	rbit	r2, r3
 80012c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012d6:	6011      	str	r1, [r2, #0]
 80012d8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	fa92 f1a2 	rbit	r1, r2
 80012e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012e6:	6011      	str	r1, [r2, #0]
  return(result);
 80012e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	fab2 f282 	clz	r2, r2
 80012f2:	b252      	sxtb	r2, r2
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	b252      	sxtb	r2, r2
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f002 021f 	and.w	r2, r2, #31
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d19d      	bne.n	8001248 <HAL_RCC_OscConfig+0xac8>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800130c:	492e      	ldr	r1, [pc, #184]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f023 020f 	bic.w	r2, r3, #15
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	4313      	orrs	r3, r2
 800131e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001320:	4829      	ldr	r0, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a19      	ldr	r1, [r3, #32]
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	430b      	orrs	r3, r1
 8001338:	4313      	orrs	r3, r2
 800133a:	6043      	str	r3, [r0, #4]
 800133c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	fa93 f2a3 	rbit	r2, r3
 8001350:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001354:	601a      	str	r2, [r3, #0]
  return(result);
 8001356:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800135a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	461a      	mov	r2, r3
 800136c:	2301      	movs	r3, #1
 800136e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7fe ff60 	bl	8000234 <HAL_GetTick>
 8001374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	e009      	b.n	800138e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137a:	f7fe ff5b 	bl	8000234 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e0df      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 800138e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001392:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001398:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	fa93 f2a3 	rbit	r2, r3
 80013a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013a6:	601a      	str	r2, [r3, #0]
  return(result);
 80013a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	095b      	lsrs	r3, r3, #5
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d104      	bne.n	80013cc <HAL_RCC_OscConfig+0xc4c>
 80013c2:	4b01      	ldr	r3, [pc, #4]	; (80013c8 <HAL_RCC_OscConfig+0xc48>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	e01d      	b.n	8001404 <HAL_RCC_OscConfig+0xc84>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fa93 f2a3 	rbit	r2, r3
 80013e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	fa93 f2a3 	rbit	r2, r3
 80013fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_RCC_OscConfig+0xdd8>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001408:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800140c:	6011      	str	r1, [r2, #0]
 800140e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	fa92 f1a2 	rbit	r1, r2
 8001418:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800141c:	6011      	str	r1, [r2, #0]
  return(result);
 800141e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	fab2 f282 	clz	r2, r2
 8001428:	b252      	sxtb	r2, r2
 800142a:	f042 0220 	orr.w	r2, r2, #32
 800142e:	b252      	sxtb	r2, r2
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f002 021f 	and.w	r2, r2, #31
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	4013      	ands	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d09b      	beq.n	800137a <HAL_RCC_OscConfig+0xbfa>
 8001442:	e083      	b.n	800154c <HAL_RCC_OscConfig+0xdcc>
 8001444:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800144c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145c:	601a      	str	r2, [r3, #0]
  return(result);
 800145e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001462:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001464:	fab3 f383 	clz	r3, r3
 8001468:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800146c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	461a      	mov	r2, r3
 8001474:	2300      	movs	r3, #0
 8001476:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7fe fedc 	bl	8000234 <HAL_GetTick>
 800147c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	e009      	b.n	8001496 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7fe fed7 	bl	8000234 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e05b      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
 8001496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800149e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fa93 f2a3 	rbit	r2, r3
 80014aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ae:	601a      	str	r2, [r3, #0]
  return(result);
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	fab3 f383 	clz	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	095b      	lsrs	r3, r3, #5
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_RCC_OscConfig+0xd50>
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_RCC_OscConfig+0xdd8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	e01b      	b.n	8001508 <HAL_RCC_OscConfig+0xd88>
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	fa93 f2a3 	rbit	r2, r3
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f107 031c 	add.w	r3, r7, #28
 80014ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	fa93 f2a3 	rbit	r2, r3
 80014fe:	f107 0318 	add.w	r3, r7, #24
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_RCC_OscConfig+0xdd8>)
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001510:	6011      	str	r1, [r2, #0]
 8001512:	f107 0214 	add.w	r2, r7, #20
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	fa92 f1a2 	rbit	r1, r2
 800151c:	f107 0210 	add.w	r2, r7, #16
 8001520:	6011      	str	r1, [r2, #0]
  return(result);
 8001522:	f107 0210 	add.w	r2, r7, #16
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	fab2 f282 	clz	r2, r2
 800152c:	b252      	sxtb	r2, r2
 800152e:	f042 0220 	orr.w	r2, r2, #32
 8001532:	b252      	sxtb	r2, r2
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d19d      	bne.n	8001482 <HAL_RCC_OscConfig+0xd02>
 8001546:	e001      	b.n	800154c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b09e      	sub	sp, #120	; 0x78
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e164      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b92      	ldr	r3, [pc, #584]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0207 	and.w	r2, r3, #7
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d210      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	498f      	ldr	r1, [pc, #572]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 8001584:	4b8e      	ldr	r3, [pc, #568]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 0207 	bic.w	r2, r3, #7
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b8b      	ldr	r3, [pc, #556]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0207 	and.w	r2, r3, #7
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e14c      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4984      	ldr	r1, [pc, #528]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 80015b2:	4b84      	ldr	r3, [pc, #528]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80df 	beq.w	800178e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d13d      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
 80015d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80015e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_ClockConfig+0xa6>
 80015fc:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	e00f      	b.n	8001622 <HAL_RCC_ClockConfig+0xc6>
 8001602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001606:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800160a:	fa93 f3a3 	rbit	r3, r3
 800160e:	667b      	str	r3, [r7, #100]	; 0x64
 8001610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001614:	663b      	str	r3, [r7, #96]	; 0x60
 8001616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001618:	fa93 f3a3 	rbit	r3, r3
 800161c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800161e:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001626:	65ba      	str	r2, [r7, #88]	; 0x58
 8001628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001630:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001632:	fab2 f282 	clz	r2, r2
 8001636:	b252      	sxtb	r2, r2
 8001638:	f042 0220 	orr.w	r2, r2, #32
 800163c:	b252      	sxtb	r2, r2
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	f002 021f 	and.w	r2, r2, #31
 8001644:	2101      	movs	r1, #1
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d17d      	bne.n	800174c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0f4      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d13d      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x17c>
 800165c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001660:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800166a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d102      	bne.n	8001686 <HAL_RCC_ClockConfig+0x12a>
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	e00f      	b.n	80016a6 <HAL_RCC_ClockConfig+0x14a>
 8001686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800168a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
 8001694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
 800169a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a2:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80016ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016ae:	fa92 f2a2 	rbit	r2, r2
 80016b2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b6:	fab2 f282 	clz	r2, r2
 80016ba:	b252      	sxtb	r2, r2
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	b252      	sxtb	r2, r2
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	f002 021f 	and.w	r2, r2, #31
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13b      	bne.n	800174c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b2      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
 80016d8:	2302      	movs	r3, #2
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	095b      	lsrs	r3, r3, #5
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d102      	bne.n	8001700 <HAL_RCC_ClockConfig+0x1a4>
 80016fa:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	e00d      	b.n	800171c <HAL_RCC_ClockConfig+0x1c0>
 8001700:	2302      	movs	r3, #2
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
 800170c:	2302      	movs	r3, #2
 800170e:	623b      	str	r3, [r7, #32]
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	4b2a      	ldr	r3, [pc, #168]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	61ba      	str	r2, [r7, #24]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	fa92 f2a2 	rbit	r2, r2
 8001726:	617a      	str	r2, [r7, #20]
  return(result);
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	fab2 f282 	clz	r2, r2
 800172e:	b252      	sxtb	r2, r2
 8001730:	f042 0220 	orr.w	r2, r2, #32
 8001734:	b252      	sxtb	r2, r2
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	f002 021f 	and.w	r2, r2, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e078      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174c:	491d      	ldr	r1, [pc, #116]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f023 0203 	bic.w	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800175e:	f7fe fd69 	bl	8000234 <HAL_GetTick>
 8001762:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001764:	e00a      	b.n	800177c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7fe fd65 	bl	8000234 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e060      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_RCC_ClockConfig+0x268>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 020c 	and.w	r2, r3, #12
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	429a      	cmp	r2, r3
 800178c:	d1eb      	bne.n	8001766 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0207 	and.w	r2, r3, #7
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d915      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179c:	4908      	ldr	r1, [pc, #32]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 0207 	bic.w	r2, r3, #7
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_RCC_ClockConfig+0x264>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0207 	and.w	r2, r3, #7
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d006      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e03f      	b.n	800183e <HAL_RCC_ClockConfig+0x2e2>
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d4:	491c      	ldr	r1, [pc, #112]	; (8001848 <HAL_RCC_ClockConfig+0x2ec>)
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_RCC_ClockConfig+0x2ec>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d009      	beq.n	8001806 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017f2:	4915      	ldr	r1, [pc, #84]	; (8001848 <HAL_RCC_ClockConfig+0x2ec>)
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_RCC_ClockConfig+0x2ec>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001806:	f000 f825 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 800180a:	4601      	mov	r1, r0
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_RCC_ClockConfig+0x2ec>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001814:	23f0      	movs	r3, #240	; 0xf0
 8001816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_RCC_ClockConfig+0x2f0>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	fa21 f303 	lsr.w	r3, r1, r3
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_RCC_ClockConfig+0x2f4>)
 8001834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001836:	2005      	movs	r0, #5
 8001838:	f003 ffbe 	bl	80057b8 <HAL_InitTick>
  
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3778      	adds	r7, #120	; 0x78
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	08005b08 	.word	0x08005b08
 8001850:	20000010 	.word	0x20000010

08001854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x30>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x36>
 8001882:	e03f      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001886:	623b      	str	r3, [r7, #32]
      break;
 8001888:	e03f      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001890:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001894:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	607b      	str	r3, [r7, #4]
  return(result);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
 80018a8:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018aa:	5cd3      	ldrb	r3, [r2, r3]
 80018ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f003 020f 	and.w	r2, r3, #15
 80018b6:	230f      	movs	r3, #15
 80018b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	4a15      	ldr	r2, [pc, #84]	; (8001924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_RCC_GetSysClockFreq+0xc8>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	e007      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_RCC_GetSysClockFreq+0xc8>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	623b      	str	r3, [r7, #32]
      break;
 8001902:	e002      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001906:	623b      	str	r3, [r7, #32]
      break;
 8001908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190a:	6a3b      	ldr	r3, [r7, #32]
}
 800190c:	4618      	mov	r0, r3
 800190e:	372c      	adds	r7, #44	; 0x2c
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	007a1200 	.word	0x007a1200
 8001920:	08005ae8 	.word	0x08005ae8
 8001924:	08005af8 	.word	0x08005af8

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000010 	.word	0x20000010

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001946:	f7ff ffef 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 800194a:	4601      	mov	r1, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001954:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001958:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	603b      	str	r3, [r7, #0]
  return(result);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x40>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40021000 	.word	0x40021000
 8001980:	08005b18 	.word	0x08005b18

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800198a:	f7ff ffcd 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 800198e:	4601      	mov	r1, r0
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001998:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800199c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	603b      	str	r3, [r7, #0]
  return(result);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08005b18 	.word	0x08005b18

080019c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	220f      	movs	r2, #15
 80019d6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_RCC_GetClockConfig+0x60>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0207 	and.w	r2, r3, #7
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40022000 	.word	0x40022000

08001a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b092      	sub	sp, #72	; 0x48
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80d6 	beq.w	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10e      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a66:	61d3      	str	r3, [r2, #28]
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a74:	2301      	movs	r3, #1
 8001a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4a41      	ldr	r2, [pc, #260]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7fe fbcf 	bl	8000234 <HAL_GetTick>
 8001a96:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7fe fbcb 	bl	8000234 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e1d4      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8083 	beq.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d07b      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	461a      	mov	r2, r3
 8001b00:	2301      	movs	r3, #1
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	461a      	mov	r2, r3
 8001b22:	2300      	movs	r3, #0
 8001b24:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04c      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe fb7d 	bl	8000234 <HAL_GetTick>
 8001b3a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7fe fb79 	bl	8000234 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e180      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001b54:	2302      	movs	r3, #2
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	2302      	movs	r3, #2
 8001b62:	623b      	str	r3, [r7, #32]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	61fb      	str	r3, [r7, #28]
  return(result);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d108      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001b82:	4b01      	ldr	r3, [pc, #4]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	e00d      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	10908100 	.word	0x10908100
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	4b9c      	ldr	r3, [pc, #624]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	613a      	str	r2, [r7, #16]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	fa92 f2a2 	rbit	r2, r2
 8001bae:	60fa      	str	r2, [r7, #12]
  return(result);
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	fab2 f282 	clz	r2, r2
 8001bb6:	b252      	sxtb	r2, r2
 8001bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bbc:	b252      	sxtb	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f002 021f 	and.w	r2, r2, #31
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0b6      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001bd0:	4990      	ldr	r1, [pc, #576]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bd2:	4b90      	ldr	r3, [pc, #576]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4a8a      	ldr	r2, [pc, #552]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bec:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c02:	4984      	ldr	r1, [pc, #528]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c04:	4b83      	ldr	r3, [pc, #524]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f023 0203 	bic.w	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c20:	497c      	ldr	r1, [pc, #496]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c22:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c3e:	4975      	ldr	r1, [pc, #468]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c40:	4b74      	ldr	r3, [pc, #464]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c5c:	496d      	ldr	r1, [pc, #436]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f023 0210 	bic.w	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d008      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001c7a:	4966      	ldr	r1, [pc, #408]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c7c:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c98:	495e      	ldr	r1, [pc, #376]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c9a:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f023 0220 	bic.w	r2, r3, #32
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cb6:	4957      	ldr	r1, [pc, #348]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cb8:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001cd4:	494f      	ldr	r1, [pc, #316]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cf2:	4948      	ldr	r1, [pc, #288]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cf4:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d10:	4940      	ldr	r1, [pc, #256]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d12:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d2e:	4939      	ldr	r1, [pc, #228]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001d4c:	4931      	ldr	r1, [pc, #196]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001d6a:	492a      	ldr	r1, [pc, #168]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001d88:	4922      	ldr	r1, [pc, #136]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4313      	orrs	r3, r2
 8001d98:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001da6:	491b      	ldr	r1, [pc, #108]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	4313      	orrs	r3, r2
 8001db6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001dc4:	4913      	ldr	r1, [pc, #76]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dc6:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001de2:	490c      	ldr	r1, [pc, #48]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	4313      	orrs	r3, r2
 8001df2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	630b      	str	r3, [r1, #48]	; 0x30
 8001e12:	e001      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8001e14:	40021000 	.word	0x40021000
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d008      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001e24:	490e      	ldr	r1, [pc, #56]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4313      	orrs	r3, r2
 8001e34:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001e42:	4907      	ldr	r1, [pc, #28]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e50:	4313      	orrs	r3, r2
 8001e52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3748      	adds	r7, #72	; 0x48
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e01d      	b.n	8001eb2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f003 fbde 	bl	800564c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f000 fac6 	bl	8002434 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <HAL_TIM_Base_Stop+0x40>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	f240 4344 	movw	r3, #1092	; 0x444
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_Base_Stop+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	68d2      	ldr	r2, [r2, #12]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e01d      	b.n	8001fca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f003 fb32 	bl	800560c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f000 fa3a 	bl	8002434 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	6839      	ldr	r1, [r7, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fd0c 	bl	8002a04 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_TIM_PWM_Start+0x88>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_TIM_PWM_Start+0x54>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_TIM_PWM_Start+0x8c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_TIM_PWM_Start+0x54>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <HAL_TIM_PWM_Start+0x90>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_TIM_PWM_Start+0x54>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a16      	ldr	r2, [pc, #88]	; (8002068 <HAL_TIM_PWM_Start+0x94>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_TIM_PWM_Start+0x54>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_TIM_PWM_Start+0x98>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_TIM_PWM_Start+0x54>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_TIM_PWM_Start+0x9c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_TIM_PWM_Start+0x58>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_TIM_PWM_Start+0x5a>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800203c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
} 
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40013400 	.word	0x40013400
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800
 8002070:	40015000 	.word	0x40015000

08002074 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e083      	b.n	800219c <HAL_TIM_Encoder_Init+0x128>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f003 fa3d 	bl	8005528 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2202      	movs	r2, #2
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c4:	f023 0307 	bic.w	r3, r3, #7
 80020c8:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4610      	mov	r0, r2
 80020d6:	f000 f9ad 	bl	8002434 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	4313      	orrs	r3, r2
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002120:	f023 030c 	bic.w	r3, r3, #12
 8002124:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800212c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	4313      	orrs	r3, r2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	011a      	lsls	r2, r3, #4
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	031b      	lsls	r3, r3, #12
 8002150:	4313      	orrs	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800215e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002166:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4313      	orrs	r3, r2
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0202 	mvn.w	r2, #2
 80021d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f905 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8f7 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f908 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b04      	cmp	r3, #4
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b04      	cmp	r3, #4
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0204 	mvn.w	r2, #4
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f8db 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8cd 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8de 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b08      	cmp	r3, #8
 8002260:	d122      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d11b      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0208 	mvn.w	r2, #8
 8002278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8b1 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8002294:	e005      	b.n	80022a2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f8a3 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f8b4 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0210 	mvn.w	r2, #16
 80022cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2208      	movs	r2, #8
 80022d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f887 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f879 	bl	80023e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f88a 	bl	800240a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0201 	mvn.w	r2, #1
 8002320:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f003 f8be 	bl	80054a4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b80      	cmp	r3, #128	; 0x80
 8002334:	d10e      	bne.n	8002354 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002340:	2b80      	cmp	r3, #128	; 0x80
 8002342:	d107      	bne.n	8002354 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800234c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fcfa 	bl	8002d48 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002362:	d10e      	bne.n	8002382 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d107      	bne.n	8002382 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800237a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fced 	bl	8002d5c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d10e      	bne.n	80023ae <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d107      	bne.n	80023ae <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f838 	bl	800241e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d10e      	bne.n	80023da <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0320 	and.w	r3, r3, #32
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d107      	bne.n	80023da <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f06f 0220 	mvn.w	r2, #32
 80023d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fcad 	bl	8002d34 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a42      	ldr	r2, [pc, #264]	; (8002554 <TIM_Base_SetConfig+0x120>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <TIM_Base_SetConfig+0x44>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002456:	d00f      	beq.n	8002478 <TIM_Base_SetConfig+0x44>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3f      	ldr	r2, [pc, #252]	; (8002558 <TIM_Base_SetConfig+0x124>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00b      	beq.n	8002478 <TIM_Base_SetConfig+0x44>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a3e      	ldr	r2, [pc, #248]	; (800255c <TIM_Base_SetConfig+0x128>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <TIM_Base_SetConfig+0x44>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3d      	ldr	r2, [pc, #244]	; (8002560 <TIM_Base_SetConfig+0x12c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d003      	beq.n	8002478 <TIM_Base_SetConfig+0x44>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <TIM_Base_SetConfig+0x130>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d108      	bne.n	800248a <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a31      	ldr	r2, [pc, #196]	; (8002554 <TIM_Base_SetConfig+0x120>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d01b      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <TIM_Base_SetConfig+0x124>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d017      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a2d      	ldr	r2, [pc, #180]	; (800255c <TIM_Base_SetConfig+0x128>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <TIM_Base_SetConfig+0x12c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00f      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a2c      	ldr	r2, [pc, #176]	; (8002568 <TIM_Base_SetConfig+0x134>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00b      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a2b      	ldr	r2, [pc, #172]	; (800256c <TIM_Base_SetConfig+0x138>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	; (8002570 <TIM_Base_SetConfig+0x13c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d003      	beq.n	80024d2 <TIM_Base_SetConfig+0x9e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a25      	ldr	r2, [pc, #148]	; (8002564 <TIM_Base_SetConfig+0x130>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d108      	bne.n	80024e4 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <TIM_Base_SetConfig+0x120>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <TIM_Base_SetConfig+0x104>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a13      	ldr	r2, [pc, #76]	; (8002560 <TIM_Base_SetConfig+0x12c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00f      	beq.n	8002538 <TIM_Base_SetConfig+0x104>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <TIM_Base_SetConfig+0x134>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <TIM_Base_SetConfig+0x104>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <TIM_Base_SetConfig+0x138>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0x104>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a11      	ldr	r2, [pc, #68]	; (8002570 <TIM_Base_SetConfig+0x13c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x104>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <TIM_Base_SetConfig+0x130>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <TIM_Base_SetConfig+0x10c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40000400 	.word	0x40000400
 800255c:	40000800 	.word	0x40000800
 8002560:	40013400 	.word	0x40013400
 8002564:	40015000 	.word	0x40015000
 8002568:	40014000 	.word	0x40014000
 800256c:	40014400 	.word	0x40014400
 8002570:	40014800 	.word	0x40014800

08002574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f023 0201 	bic.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 0302 	bic.w	r3, r3, #2
 80025cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a30      	ldr	r2, [pc, #192]	; (800269c <TIM_OC1_SetConfig+0x128>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d013      	beq.n	8002608 <TIM_OC1_SetConfig+0x94>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a2f      	ldr	r2, [pc, #188]	; (80026a0 <TIM_OC1_SetConfig+0x12c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00f      	beq.n	8002608 <TIM_OC1_SetConfig+0x94>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <TIM_OC1_SetConfig+0x130>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00b      	beq.n	8002608 <TIM_OC1_SetConfig+0x94>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <TIM_OC1_SetConfig+0x134>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <TIM_OC1_SetConfig+0x94>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a2c      	ldr	r2, [pc, #176]	; (80026ac <TIM_OC1_SetConfig+0x138>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d003      	beq.n	8002608 <TIM_OC1_SetConfig+0x94>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <TIM_OC1_SetConfig+0x13c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10c      	bne.n	8002622 <TIM_OC1_SetConfig+0xae>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0308 	bic.w	r3, r3, #8
 800260e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <TIM_OC1_SetConfig+0x128>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <TIM_OC1_SetConfig+0xde>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <TIM_OC1_SetConfig+0x12c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00f      	beq.n	8002652 <TIM_OC1_SetConfig+0xde>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <TIM_OC1_SetConfig+0x130>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00b      	beq.n	8002652 <TIM_OC1_SetConfig+0xde>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <TIM_OC1_SetConfig+0x134>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <TIM_OC1_SetConfig+0xde>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a19      	ldr	r2, [pc, #100]	; (80026ac <TIM_OC1_SetConfig+0x138>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d003      	beq.n	8002652 <TIM_OC1_SetConfig+0xde>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a18      	ldr	r2, [pc, #96]	; (80026b0 <TIM_OC1_SetConfig+0x13c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d111      	bne.n	8002676 <TIM_OC1_SetConfig+0x102>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
} 
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40013400 	.word	0x40013400
 80026a4:	40014000 	.word	0x40014000
 80026a8:	40014400 	.word	0x40014400
 80026ac:	40014800 	.word	0x40014800
 80026b0:	40015000 	.word	0x40015000

080026b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f023 0210 	bic.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fa:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f023 0320 	bic.w	r3, r3, #32
 800270e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a2c      	ldr	r2, [pc, #176]	; (80027d0 <TIM_OC2_SetConfig+0x11c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <TIM_OC2_SetConfig+0x80>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <TIM_OC2_SetConfig+0x120>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_OC2_SetConfig+0x80>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a2a      	ldr	r2, [pc, #168]	; (80027d8 <TIM_OC2_SetConfig+0x124>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10d      	bne.n	8002750 <TIM_OC2_SetConfig+0x9c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274e:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <TIM_OC2_SetConfig+0x11c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d013      	beq.n	8002780 <TIM_OC2_SetConfig+0xcc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <TIM_OC2_SetConfig+0x120>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d00f      	beq.n	8002780 <TIM_OC2_SetConfig+0xcc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a1e      	ldr	r2, [pc, #120]	; (80027dc <TIM_OC2_SetConfig+0x128>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00b      	beq.n	8002780 <TIM_OC2_SetConfig+0xcc>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <TIM_OC2_SetConfig+0x12c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d007      	beq.n	8002780 <TIM_OC2_SetConfig+0xcc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <TIM_OC2_SetConfig+0x130>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d003      	beq.n	8002780 <TIM_OC2_SetConfig+0xcc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <TIM_OC2_SetConfig+0x124>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d113      	bne.n	80027a8 <TIM_OC2_SetConfig+0xf4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002786:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800278e:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	621a      	str	r2, [r3, #32]
}
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40013400 	.word	0x40013400
 80027d8:	40015000 	.word	0x40015000
 80027dc:	40014000 	.word	0x40014000
 80027e0:	40014400 	.word	0x40014400
 80027e4:	40014800 	.word	0x40014800

080027e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <TIM_OC3_SetConfig+0x118>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_OC3_SetConfig+0x7e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <TIM_OC3_SetConfig+0x11c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <TIM_OC3_SetConfig+0x7e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <TIM_OC3_SetConfig+0x120>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10d      	bne.n	8002882 <TIM_OC3_SetConfig+0x9a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800286c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002880:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a1e      	ldr	r2, [pc, #120]	; (8002900 <TIM_OC3_SetConfig+0x118>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <TIM_OC3_SetConfig+0xca>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <TIM_OC3_SetConfig+0x11c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <TIM_OC3_SetConfig+0xca>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <TIM_OC3_SetConfig+0x124>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_OC3_SetConfig+0xca>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a1c      	ldr	r2, [pc, #112]	; (8002910 <TIM_OC3_SetConfig+0x128>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_OC3_SetConfig+0xca>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a1b      	ldr	r2, [pc, #108]	; (8002914 <TIM_OC3_SetConfig+0x12c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_OC3_SetConfig+0xca>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a16      	ldr	r2, [pc, #88]	; (8002908 <TIM_OC3_SetConfig+0x120>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d113      	bne.n	80028da <TIM_OC3_SetConfig+0xf2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c0:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	621a      	str	r2, [r3, #32]
}
 80028f4:	bf00      	nop
 80028f6:	371c      	adds	r7, #28
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40012c00 	.word	0x40012c00
 8002904:	40013400 	.word	0x40013400
 8002908:	40015000 	.word	0x40015000
 800290c:	40014000 	.word	0x40014000
 8002910:	40014400 	.word	0x40014400
 8002914:	40014800 	.word	0x40014800

08002918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002956:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800295e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002972:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	031b      	lsls	r3, r3, #12
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a1a      	ldr	r2, [pc, #104]	; (80029ec <TIM_OC4_SetConfig+0xd4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d013      	beq.n	80029b0 <TIM_OC4_SetConfig+0x98>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a19      	ldr	r2, [pc, #100]	; (80029f0 <TIM_OC4_SetConfig+0xd8>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d00f      	beq.n	80029b0 <TIM_OC4_SetConfig+0x98>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <TIM_OC4_SetConfig+0xdc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00b      	beq.n	80029b0 <TIM_OC4_SetConfig+0x98>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <TIM_OC4_SetConfig+0xe0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_OC4_SetConfig+0x98>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <TIM_OC4_SetConfig+0xe4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_OC4_SetConfig+0x98>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <TIM_OC4_SetConfig+0xe8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d109      	bne.n	80029c4 <TIM_OC4_SetConfig+0xac>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029b6:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40013400 	.word	0x40013400
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40014400 	.word	0x40014400
 80029fc:	40014800 	.word	0x40014800
 8002a00:	40015000 	.word	0x40015000

08002a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002a14:	2201      	movs	r2, #1
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e105      	b.n	8002c72 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b14      	cmp	r3, #20
 8002a7a:	f200 80f0 	bhi.w	8002c5e <HAL_TIM_PWM_ConfigChannel+0x212>
 8002a7e:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002ad9 	.word	0x08002ad9
 8002a88:	08002c5f 	.word	0x08002c5f
 8002a8c:	08002c5f 	.word	0x08002c5f
 8002a90:	08002c5f 	.word	0x08002c5f
 8002a94:	08002b19 	.word	0x08002b19
 8002a98:	08002c5f 	.word	0x08002c5f
 8002a9c:	08002c5f 	.word	0x08002c5f
 8002aa0:	08002c5f 	.word	0x08002c5f
 8002aa4:	08002b5b 	.word	0x08002b5b
 8002aa8:	08002c5f 	.word	0x08002c5f
 8002aac:	08002c5f 	.word	0x08002c5f
 8002ab0:	08002c5f 	.word	0x08002c5f
 8002ab4:	08002b9b 	.word	0x08002b9b
 8002ab8:	08002c5f 	.word	0x08002c5f
 8002abc:	08002c5f 	.word	0x08002c5f
 8002ac0:	08002c5f 	.word	0x08002c5f
 8002ac4:	08002bdd 	.word	0x08002bdd
 8002ac8:	08002c5f 	.word	0x08002c5f
 8002acc:	08002c5f 	.word	0x08002c5f
 8002ad0:	08002c5f 	.word	0x08002c5f
 8002ad4:	08002c1d 	.word	0x08002c1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fd48 	bl	8002574 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	6992      	ldr	r2, [r2, #24]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	6992      	ldr	r2, [r2, #24]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	6991      	ldr	r1, [r2, #24]
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	6912      	ldr	r2, [r2, #16]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	619a      	str	r2, [r3, #24]
    }
    break;
 8002b16:	e0a3      	b.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fdc8 	bl	80026b4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	6992      	ldr	r2, [r2, #24]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b32:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	6992      	ldr	r2, [r2, #24]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	6991      	ldr	r1, [r2, #24]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	6912      	ldr	r2, [r2, #16]
 8002b52:	0212      	lsls	r2, r2, #8
 8002b54:	430a      	orrs	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
    }
    break;
 8002b58:	e082      	b.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fe41 	bl	80027e8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	69d2      	ldr	r2, [r2, #28]
 8002b70:	f042 0208 	orr.w	r2, r2, #8
 8002b74:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	6812      	ldr	r2, [r2, #0]
 8002b7e:	69d2      	ldr	r2, [r2, #28]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	69d1      	ldr	r1, [r2, #28]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	6912      	ldr	r2, [r2, #16]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
    }
    break;
 8002b98:	e062      	b.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff feb9 	bl	8002918 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	69d2      	ldr	r2, [r2, #28]
 8002bb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb4:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	69d2      	ldr	r2, [r2, #28]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	69d1      	ldr	r1, [r2, #28]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	6912      	ldr	r2, [r2, #16]
 8002bd4:	0212      	lsls	r2, r2, #8
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]
    }
    break;
 8002bda:	e041      	b.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68b9      	ldr	r1, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f8c4 	bl	8002d70 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002bf2:	f042 0208 	orr.w	r2, r2, #8
 8002bf6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c02:	f022 0204 	bic.w	r2, r2, #4
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	6812      	ldr	r2, [r2, #0]
 8002c10:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	6912      	ldr	r2, [r2, #16]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002c1a:	e021      	b.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f914 	bl	8002e50 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	6912      	ldr	r2, [r2, #16]
 8002c56:	0212      	lsls	r2, r2, #8
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002c5c:	e000      	b.n	8002c60 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8002c5e:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop

08002c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e042      	b.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
} 
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40013400 	.word	0x40013400
 8002d30:	40015000 	.word	0x40015000

08002d34 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002dc0:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <TIM_OC5_SetConfig+0xc8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <TIM_OC5_SetConfig+0x8e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <TIM_OC5_SetConfig+0xcc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00f      	beq.n	8002dfe <TIM_OC5_SetConfig+0x8e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <TIM_OC5_SetConfig+0xd0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_OC5_SetConfig+0x8e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <TIM_OC5_SetConfig+0xd4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_OC5_SetConfig+0x8e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <TIM_OC5_SetConfig+0xd8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_OC5_SetConfig+0x8e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <TIM_OC5_SetConfig+0xdc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d109      	bne.n	8002e12 <TIM_OC5_SetConfig+0xa2>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	621a      	str	r2, [r3, #32]
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40013400 	.word	0x40013400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	40015000 	.word	0x40015000

08002e50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	051b      	lsls	r3, r3, #20
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <TIM_OC6_SetConfig+0xcc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <TIM_OC6_SetConfig+0x90>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <TIM_OC6_SetConfig+0xd0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00f      	beq.n	8002ee0 <TIM_OC6_SetConfig+0x90>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <TIM_OC6_SetConfig+0xd4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00b      	beq.n	8002ee0 <TIM_OC6_SetConfig+0x90>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <TIM_OC6_SetConfig+0xd8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d007      	beq.n	8002ee0 <TIM_OC6_SetConfig+0x90>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <TIM_OC6_SetConfig+0xdc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d003      	beq.n	8002ee0 <TIM_OC6_SetConfig+0x90>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a15      	ldr	r2, [pc, #84]	; (8002f30 <TIM_OC6_SetConfig+0xe0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d109      	bne.n	8002ef4 <TIM_OC6_SetConfig+0xa4>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	029b      	lsls	r3, r3, #10
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]
} 
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40013400 	.word	0x40013400
 8002f24:	40014000 	.word	0x40014000
 8002f28:	40014400 	.word	0x40014400
 8002f2c:	40014800 	.word	0x40014800
 8002f30:	40015000 	.word	0x40015000

08002f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e043      	b.n	8002fce <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f002 fbea 	bl	8005734 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2224      	movs	r2, #36	; 0x24
 8002f64:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f82d 	bl	8002fd8 <UART_SetConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e022      	b.n	8002fce <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fa1f 	bl	80033d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	6852      	ldr	r2, [r2, #4]
 8002fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 faa6 	bl	8003518 <UART_CheckIdleState>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	4ba6      	ldr	r3, [pc, #664]	; (80032b0 <UART_SetConfig+0x2d8>)
 8003018:	400b      	ands	r3, r1
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	430b      	orrs	r3, r1
 800301e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	6852      	ldr	r2, [r2, #4]
 800302a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68d2      	ldr	r2, [r2, #12]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a96      	ldr	r2, [pc, #600]	; (80032b4 <UART_SetConfig+0x2dc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d121      	bne.n	80030a4 <UART_SetConfig+0xcc>
 8003060:	4b95      	ldr	r3, [pc, #596]	; (80032b8 <UART_SetConfig+0x2e0>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b03      	cmp	r3, #3
 800306a:	d817      	bhi.n	800309c <UART_SetConfig+0xc4>
 800306c:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <UART_SetConfig+0x9c>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	08003085 	.word	0x08003085
 8003078:	08003091 	.word	0x08003091
 800307c:	08003097 	.word	0x08003097
 8003080:	0800308b 	.word	0x0800308b
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
 8003088:	e0b2      	b.n	80031f0 <UART_SetConfig+0x218>
 800308a:	2302      	movs	r3, #2
 800308c:	75fb      	strb	r3, [r7, #23]
 800308e:	e0af      	b.n	80031f0 <UART_SetConfig+0x218>
 8003090:	2304      	movs	r3, #4
 8003092:	75fb      	strb	r3, [r7, #23]
 8003094:	e0ac      	b.n	80031f0 <UART_SetConfig+0x218>
 8003096:	2308      	movs	r3, #8
 8003098:	75fb      	strb	r3, [r7, #23]
 800309a:	e0a9      	b.n	80031f0 <UART_SetConfig+0x218>
 800309c:	2310      	movs	r3, #16
 800309e:	75fb      	strb	r3, [r7, #23]
 80030a0:	bf00      	nop
 80030a2:	e0a5      	b.n	80031f0 <UART_SetConfig+0x218>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a84      	ldr	r2, [pc, #528]	; (80032bc <UART_SetConfig+0x2e4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d123      	bne.n	80030f6 <UART_SetConfig+0x11e>
 80030ae:	4b82      	ldr	r3, [pc, #520]	; (80032b8 <UART_SetConfig+0x2e0>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d012      	beq.n	80030e2 <UART_SetConfig+0x10a>
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c0:	d802      	bhi.n	80030c8 <UART_SetConfig+0xf0>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <UART_SetConfig+0xfe>
 80030c6:	e012      	b.n	80030ee <UART_SetConfig+0x116>
 80030c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030cc:	d00c      	beq.n	80030e8 <UART_SetConfig+0x110>
 80030ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030d2:	d003      	beq.n	80030dc <UART_SetConfig+0x104>
 80030d4:	e00b      	b.n	80030ee <UART_SetConfig+0x116>
 80030d6:	2300      	movs	r3, #0
 80030d8:	75fb      	strb	r3, [r7, #23]
 80030da:	e089      	b.n	80031f0 <UART_SetConfig+0x218>
 80030dc:	2302      	movs	r3, #2
 80030de:	75fb      	strb	r3, [r7, #23]
 80030e0:	e086      	b.n	80031f0 <UART_SetConfig+0x218>
 80030e2:	2304      	movs	r3, #4
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e083      	b.n	80031f0 <UART_SetConfig+0x218>
 80030e8:	2308      	movs	r3, #8
 80030ea:	75fb      	strb	r3, [r7, #23]
 80030ec:	e080      	b.n	80031f0 <UART_SetConfig+0x218>
 80030ee:	2310      	movs	r3, #16
 80030f0:	75fb      	strb	r3, [r7, #23]
 80030f2:	bf00      	nop
 80030f4:	e07c      	b.n	80031f0 <UART_SetConfig+0x218>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a71      	ldr	r2, [pc, #452]	; (80032c0 <UART_SetConfig+0x2e8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d123      	bne.n	8003148 <UART_SetConfig+0x170>
 8003100:	4b6d      	ldr	r3, [pc, #436]	; (80032b8 <UART_SetConfig+0x2e0>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800310c:	d012      	beq.n	8003134 <UART_SetConfig+0x15c>
 800310e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003112:	d802      	bhi.n	800311a <UART_SetConfig+0x142>
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <UART_SetConfig+0x150>
 8003118:	e012      	b.n	8003140 <UART_SetConfig+0x168>
 800311a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800311e:	d00c      	beq.n	800313a <UART_SetConfig+0x162>
 8003120:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003124:	d003      	beq.n	800312e <UART_SetConfig+0x156>
 8003126:	e00b      	b.n	8003140 <UART_SetConfig+0x168>
 8003128:	2300      	movs	r3, #0
 800312a:	75fb      	strb	r3, [r7, #23]
 800312c:	e060      	b.n	80031f0 <UART_SetConfig+0x218>
 800312e:	2302      	movs	r3, #2
 8003130:	75fb      	strb	r3, [r7, #23]
 8003132:	e05d      	b.n	80031f0 <UART_SetConfig+0x218>
 8003134:	2304      	movs	r3, #4
 8003136:	75fb      	strb	r3, [r7, #23]
 8003138:	e05a      	b.n	80031f0 <UART_SetConfig+0x218>
 800313a:	2308      	movs	r3, #8
 800313c:	75fb      	strb	r3, [r7, #23]
 800313e:	e057      	b.n	80031f0 <UART_SetConfig+0x218>
 8003140:	2310      	movs	r3, #16
 8003142:	75fb      	strb	r3, [r7, #23]
 8003144:	bf00      	nop
 8003146:	e053      	b.n	80031f0 <UART_SetConfig+0x218>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <UART_SetConfig+0x2ec>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d123      	bne.n	800319a <UART_SetConfig+0x1c2>
 8003152:	4b59      	ldr	r3, [pc, #356]	; (80032b8 <UART_SetConfig+0x2e0>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800315a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800315e:	d012      	beq.n	8003186 <UART_SetConfig+0x1ae>
 8003160:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003164:	d802      	bhi.n	800316c <UART_SetConfig+0x194>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <UART_SetConfig+0x1a2>
 800316a:	e012      	b.n	8003192 <UART_SetConfig+0x1ba>
 800316c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003170:	d00c      	beq.n	800318c <UART_SetConfig+0x1b4>
 8003172:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003176:	d003      	beq.n	8003180 <UART_SetConfig+0x1a8>
 8003178:	e00b      	b.n	8003192 <UART_SetConfig+0x1ba>
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
 800317e:	e037      	b.n	80031f0 <UART_SetConfig+0x218>
 8003180:	2302      	movs	r3, #2
 8003182:	75fb      	strb	r3, [r7, #23]
 8003184:	e034      	b.n	80031f0 <UART_SetConfig+0x218>
 8003186:	2304      	movs	r3, #4
 8003188:	75fb      	strb	r3, [r7, #23]
 800318a:	e031      	b.n	80031f0 <UART_SetConfig+0x218>
 800318c:	2308      	movs	r3, #8
 800318e:	75fb      	strb	r3, [r7, #23]
 8003190:	e02e      	b.n	80031f0 <UART_SetConfig+0x218>
 8003192:	2310      	movs	r3, #16
 8003194:	75fb      	strb	r3, [r7, #23]
 8003196:	bf00      	nop
 8003198:	e02a      	b.n	80031f0 <UART_SetConfig+0x218>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a4a      	ldr	r2, [pc, #296]	; (80032c8 <UART_SetConfig+0x2f0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d123      	bne.n	80031ec <UART_SetConfig+0x214>
 80031a4:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <UART_SetConfig+0x2e0>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b0:	d012      	beq.n	80031d8 <UART_SetConfig+0x200>
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b6:	d802      	bhi.n	80031be <UART_SetConfig+0x1e6>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d007      	beq.n	80031cc <UART_SetConfig+0x1f4>
 80031bc:	e012      	b.n	80031e4 <UART_SetConfig+0x20c>
 80031be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031c2:	d00c      	beq.n	80031de <UART_SetConfig+0x206>
 80031c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031c8:	d003      	beq.n	80031d2 <UART_SetConfig+0x1fa>
 80031ca:	e00b      	b.n	80031e4 <UART_SetConfig+0x20c>
 80031cc:	2300      	movs	r3, #0
 80031ce:	75fb      	strb	r3, [r7, #23]
 80031d0:	e00e      	b.n	80031f0 <UART_SetConfig+0x218>
 80031d2:	2302      	movs	r3, #2
 80031d4:	75fb      	strb	r3, [r7, #23]
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x218>
 80031d8:	2304      	movs	r3, #4
 80031da:	75fb      	strb	r3, [r7, #23]
 80031dc:	e008      	b.n	80031f0 <UART_SetConfig+0x218>
 80031de:	2308      	movs	r3, #8
 80031e0:	75fb      	strb	r3, [r7, #23]
 80031e2:	e005      	b.n	80031f0 <UART_SetConfig+0x218>
 80031e4:	2310      	movs	r3, #16
 80031e6:	75fb      	strb	r3, [r7, #23]
 80031e8:	bf00      	nop
 80031ea:	e001      	b.n	80031f0 <UART_SetConfig+0x218>
 80031ec:	2310      	movs	r3, #16
 80031ee:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f8:	d17d      	bne.n	80032f6 <UART_SetConfig+0x31e>
  {
    switch (clocksource)
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d865      	bhi.n	80032cc <UART_SetConfig+0x2f4>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <UART_SetConfig+0x230>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	0800322d 	.word	0x0800322d
 800320c:	08003249 	.word	0x08003249
 8003210:	08003265 	.word	0x08003265
 8003214:	080032cd 	.word	0x080032cd
 8003218:	0800327f 	.word	0x0800327f
 800321c:	080032cd 	.word	0x080032cd
 8003220:	080032cd 	.word	0x080032cd
 8003224:	080032cd 	.word	0x080032cd
 8003228:	0800329b 	.word	0x0800329b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800322c:	f7fe fb88 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8003230:	4603      	mov	r3, r0
 8003232:	005a      	lsls	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	441a      	add	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	82bb      	strh	r3, [r7, #20]
        break;
 8003246:	e044      	b.n	80032d2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003248:	f7fe fb9c 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 800324c:	4603      	mov	r3, r0
 800324e:	005a      	lsls	r2, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	82bb      	strh	r3, [r7, #20]
        break;
 8003262:	e036      	b.n	80032d2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800326e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6852      	ldr	r2, [r2, #4]
 8003276:	fbb3 f3f2 	udiv	r3, r3, r2
 800327a:	82bb      	strh	r3, [r7, #20]
        break;
 800327c:	e029      	b.n	80032d2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800327e:	f7fe fae9 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8003282:	4603      	mov	r3, r0
 8003284:	005a      	lsls	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	82bb      	strh	r3, [r7, #20]
        break;
 8003298:	e01b      	b.n	80032d2 <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	82bb      	strh	r3, [r7, #20]
        break;
 80032ae:	e010      	b.n	80032d2 <UART_SetConfig+0x2fa>
 80032b0:	efff69f3 	.word	0xefff69f3
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40004400 	.word	0x40004400
 80032c0:	40004800 	.word	0x40004800
 80032c4:	40004c00 	.word	0x40004c00
 80032c8:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	74fb      	strb	r3, [r7, #19]
        break;
 80032d0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80032d2:	8abb      	ldrh	r3, [r7, #20]
 80032d4:	f023 030f 	bic.w	r3, r3, #15
 80032d8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032da:	8abb      	ldrh	r3, [r7, #20]
 80032dc:	105b      	asrs	r3, r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	897a      	ldrh	r2, [r7, #10]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	e069      	b.n	80033ca <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d863      	bhi.n	80033c4 <UART_SetConfig+0x3ec>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <UART_SetConfig+0x32c>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003329 	.word	0x08003329
 8003308:	08003349 	.word	0x08003349
 800330c:	08003369 	.word	0x08003369
 8003310:	080033c5 	.word	0x080033c5
 8003314:	08003389 	.word	0x08003389
 8003318:	080033c5 	.word	0x080033c5
 800331c:	080033c5 	.word	0x080033c5
 8003320:	080033c5 	.word	0x080033c5
 8003324:	080033a9 	.word	0x080033a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681c      	ldr	r4, [r3, #0]
 800332c:	f7fe fb08 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	60e3      	str	r3, [r4, #12]
        break;
 8003346:	e040      	b.n	80033ca <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681c      	ldr	r4, [r3, #0]
 800334c:	f7fe fb1a 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8003350:	4602      	mov	r2, r0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	60e3      	str	r3, [r4, #12]
        break;
 8003366:	e030      	b.n	80033ca <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003376:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	6849      	ldr	r1, [r1, #4]
 800337e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003382:	b29b      	uxth	r3, r3
 8003384:	60d3      	str	r3, [r2, #12]
        break;
 8003386:	e020      	b.n	80033ca <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681c      	ldr	r4, [r3, #0]
 800338c:	f7fe fa62 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	085b      	lsrs	r3, r3, #1
 8003398:	441a      	add	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	60e3      	str	r3, [r4, #12]
        break;
 80033a6:	e010      	b.n	80033ca <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6852      	ldr	r2, [r2, #4]
 80033b0:	0852      	lsrs	r2, r2, #1
 80033b2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6852      	ldr	r2, [r2, #4]
 80033ba:	fbb1 f2f2 	udiv	r2, r1, r2
 80033be:	b292      	uxth	r2, r2
 80033c0:	60da      	str	r2, [r3, #12]
        break;
 80033c2:	e002      	b.n	80033ca <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	74fb      	strb	r3, [r7, #19]
        break;
 80033c8:	bf00      	nop
    }
  }

  return ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]

}
 80033cc:	4618      	mov	r0, r3
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	6852      	ldr	r2, [r2, #4]
 80033f2:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6812      	ldr	r2, [r2, #0]
 8003412:	6852      	ldr	r2, [r2, #4]
 8003414:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	6852      	ldr	r2, [r2, #4]
 8003436:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6852      	ldr	r2, [r2, #4]
 8003458:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	6892      	ldr	r2, [r2, #8]
 800347a:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003482:	430a      	orrs	r2, r1
 8003484:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	6892      	ldr	r2, [r2, #8]
 800349c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01a      	beq.n	80034ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	6852      	ldr	r2, [r2, #4]
 80034be:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d2:	d10a      	bne.n	80034ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	6852      	ldr	r2, [r2, #4]
 80034de:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034e6:	430a      	orrs	r2, r1
 80034e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6852      	ldr	r2, [r2, #4]
 8003500:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
  }
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800352a:	f7fc fe83 	bl	8000234 <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d10e      	bne.n	800355c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800353e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f82c 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e022      	b.n	80035a2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d10e      	bne.n	8003588 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800356a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f816 	bl	80035aa <UART_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e00c      	b.n	80035a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	e02c      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c2:	d028      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x30>
 80035ca:	f7fc fe33 	bl	8000234 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d91d      	bls.n	8003616 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6812      	ldr	r2, [r2, #0]
 80035f2:	6892      	ldr	r2, [r2, #8]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e00f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0c3      	beq.n	80035bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800364c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003650:	2b84      	cmp	r3, #132	; 0x84
 8003652:	d005      	beq.n	8003660 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003654:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	3303      	adds	r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003660:	68fb      	ldr	r3, [r7, #12]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003672:	f000 fe03 	bl	800427c <vTaskStartScheduler>
  
  return osOK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}

0800367c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800367c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367e:	b087      	sub	sp, #28
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685c      	ldr	r4, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003692:	b29e      	uxth	r6, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ffcf 	bl	800363e <makeFreeRtosPriority>
 80036a0:	4602      	mov	r2, r0
 80036a2:	f107 030c 	add.w	r3, r7, #12
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	9200      	str	r2, [sp, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4629      	mov	r1, r5
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 fc85 	bl	8003fc0 <xTaskCreate>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80036c0:	68fb      	ldr	r3, [r7, #12]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036cc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <osDelay+0x30>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	08db      	lsrs	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <osDelay+0x1e>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	e000      	b.n	80036ec <osDelay+0x20>
 80036ea:	2301      	movs	r3, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fd91 	bl	8004214 <vTaskDelay>
  
  return osOK;
 80036f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	cccccccd 	.word	0xcccccccd

08003700 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f103 0208 	add.w	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003718:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f103 0208 	add.w	r2, r3, #8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 0208 	add.w	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b8:	d103      	bne.n	80037c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e00c      	b.n	80037dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3308      	adds	r3, #8
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	e002      	b.n	80037d0 <vListInsert+0x2e>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d9f6      	bls.n	80037ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6892      	ldr	r2, [r2, #8]
 800382a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6852      	ldr	r2, [r2, #4]
 8003834:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	d103      	bne.n	8003848 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	1e5a      	subs	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3b04      	subs	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b04      	subs	r3, #4
 8003886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3b04      	subs	r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003898:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <pxPortInitialiseStack+0x64>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3b14      	subs	r3, #20
 80038a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b04      	subs	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f06f 0202 	mvn.w	r2, #2
 80038b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b20      	subs	r3, #32
 80038bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	080038d1 	.word	0x080038d1

080038d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <prvTaskExitError+0x38>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038de:	d009      	beq.n	80038f4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	607b      	str	r3, [r7, #4]
 80038f2:	e7fe      	b.n	80038f2 <prvTaskExitError+0x22>
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8003906:	e7fe      	b.n	8003906 <prvTaskExitError+0x36>
 8003908:	20000004 	.word	0x20000004
 800390c:	00000000 	.word	0x00000000

08003910 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <pxCurrentTCBConst2>)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391a:	f380 8809 	msr	PSP, r0
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	4770      	bx	lr
 800392c:	f3af 8000 	nop.w

08003930 <pxCurrentTCBConst2>:
 8003930:	200018b4 	.word	0x200018b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop

08003938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003938:	4806      	ldr	r0, [pc, #24]	; (8003954 <prvPortStartFirstTask+0x1c>)
 800393a:	6800      	ldr	r0, [r0, #0]
 800393c:	6800      	ldr	r0, [r0, #0]
 800393e:	f380 8808 	msr	MSP, r0
 8003942:	b662      	cpsie	i
 8003944:	b661      	cpsie	f
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	df00      	svc	0
 8003950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003952:	bf00      	nop
 8003954:	e000ed08 	.word	0xe000ed08

08003958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <xPortStartScheduler+0xf4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <xPortStartScheduler+0xf8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <xPortStartScheduler+0x24>
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e7fe      	b.n	800397a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800397c:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <xPortStartScheduler+0xf4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a34      	ldr	r2, [pc, #208]	; (8003a54 <xPortStartScheduler+0xfc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d109      	bne.n	800399a <xPortStartScheduler+0x42>
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e7fe      	b.n	8003998 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800399a:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <xPortStartScheduler+0x100>)
 800399c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <xPortStartScheduler+0x104>)
 80039c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039c2:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <xPortStartScheduler+0x108>)
 80039c4:	2207      	movs	r2, #7
 80039c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039c8:	e009      	b.n	80039de <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80039ca:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <xPortStartScheduler+0x108>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <xPortStartScheduler+0x108>)
 80039d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b80      	cmp	r3, #128	; 0x80
 80039e8:	d0ef      	beq.n	80039ca <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <xPortStartScheduler+0x108>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <xPortStartScheduler+0x108>)
 80039f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <xPortStartScheduler+0x108>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <xPortStartScheduler+0x108>)
 80039fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <xPortStartScheduler+0x10c>)
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <xPortStartScheduler+0x10c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <xPortStartScheduler+0x10c>)
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <xPortStartScheduler+0x10c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a20:	f000 f8d2 	bl	8003bc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <xPortStartScheduler+0x110>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a2a:	f000 f8e9 	bl	8003c00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a2e:	4a0f      	ldr	r2, [pc, #60]	; (8003a6c <xPortStartScheduler+0x114>)
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <xPortStartScheduler+0x114>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a3a:	f7ff ff7d 	bl	8003938 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8003a3e:	f7ff ff47 	bl	80038d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	e000ed00 	.word	0xe000ed00
 8003a50:	410fc271 	.word	0x410fc271
 8003a54:	410fc270 	.word	0x410fc270
 8003a58:	e000e400 	.word	0xe000e400
 8003a5c:	20000034 	.word	0x20000034
 8003a60:	20000038 	.word	0x20000038
 8003a64:	e000ed20 	.word	0xe000ed20
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	e000ef34 	.word	0xe000ef34

08003a70 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <vPortEnterCritical+0x54>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <vPortEnterCritical+0x54>)
 8003a90:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <vPortEnterCritical+0x54>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10e      	bne.n	8003ab8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <vPortEnterCritical+0x58>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <vPortEnterCritical+0x48>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	603b      	str	r3, [r7, #0]
 8003ab6:	e7fe      	b.n	8003ab6 <vPortEnterCritical+0x46>
	}
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <vPortExitCritical+0x4c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <vPortExitCritical+0x22>
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	e7fe      	b.n	8003aec <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <vPortExitCritical+0x4c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <vPortExitCritical+0x4c>)
 8003af6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <vPortExitCritical+0x4c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <vPortExitCritical+0x3e>
 8003b00:	2300      	movs	r3, #0
 8003b02:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	00000000 	.word	0x00000000

08003b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b20:	f3ef 8009 	mrs	r0, PSP
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <pxCurrentTCBConst>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f01e 0f10 	tst.w	lr, #16
 8003b30:	bf08      	it	eq
 8003b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b3a:	6010      	str	r0, [r2, #0]
 8003b3c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8003b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b44:	f380 8811 	msr	BASEPRI, r0
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f000 fd40 	bl	80045d4 <vTaskSwitchContext>
 8003b54:	f04f 0000 	mov.w	r0, #0
 8003b58:	f380 8811 	msr	BASEPRI, r0
 8003b5c:	bc08      	pop	{r3}
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	6808      	ldr	r0, [r1, #0]
 8003b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b66:	f01e 0f10 	tst.w	lr, #16
 8003b6a:	bf08      	it	eq
 8003b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b70:	f380 8809 	msr	PSP, r0
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	f3af 8000 	nop.w

08003b80 <pxCurrentTCBConst>:
 8003b80:	200018b4 	.word	0x200018b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop

08003b88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ba0:	f000 fc5c 	bl	800445c <xTaskIncrementTick>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <SysTick_Handler+0x3c>)
 8003bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bcc:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <vPortSetupTimerInterrupt+0x28>)
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <vPortSetupTimerInterrupt+0x2c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4909      	ldr	r1, [pc, #36]	; (8003bf8 <vPortSetupTimerInterrupt+0x30>)
 8003bd4:	fba1 1303 	umull	r1, r3, r1, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <vPortSetupTimerInterrupt+0x34>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	e000e014 	.word	0xe000e014
 8003bf4:	20000010 	.word	0x20000010
 8003bf8:	51eb851f 	.word	0x51eb851f
 8003bfc:	e000e010 	.word	0xe000e010

08003c00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c10 <vPortEnableVFP+0x10>
 8003c04:	6801      	ldr	r1, [r0, #0]
 8003c06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c0a:	6001      	str	r1, [r0, #0]
 8003c0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c0e:	bf00      	nop
 8003c10:	e000ed88 	.word	0xe000ed88

08003c14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c20:	f000 fb72 	bl	8004308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c24:	4b57      	ldr	r3, [pc, #348]	; (8003d84 <pvPortMalloc+0x170>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c2c:	f000 f90c 	bl	8003e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c30:	4b55      	ldr	r3, [pc, #340]	; (8003d88 <pvPortMalloc+0x174>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f040 808c 	bne.w	8003d56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01c      	beq.n	8003c7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003c44:	2208      	movs	r2, #8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d013      	beq.n	8003c7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f023 0307 	bic.w	r3, r3, #7
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <pvPortMalloc+0x6a>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e7fe      	b.n	8003c7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d068      	beq.n	8003d56 <pvPortMalloc+0x142>
 8003c84:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <pvPortMalloc+0x178>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d863      	bhi.n	8003d56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <pvPortMalloc+0x17c>)
 8003c90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <pvPortMalloc+0x17c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c98:	e004      	b.n	8003ca4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d203      	bcs.n	8003cb6 <pvPortMalloc+0xa2>
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f1      	bne.n	8003c9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cb6:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <pvPortMalloc+0x170>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d04a      	beq.n	8003d56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	4413      	add	r3, r2
 8003cc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	1ad2      	subs	r2, r2, r3
 8003cda:	2308      	movs	r3, #8
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d91e      	bls.n	8003d20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d009      	beq.n	8003d08 <pvPortMalloc+0xf4>
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	e7fe      	b.n	8003d06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d1a:	69b8      	ldr	r0, [r7, #24]
 8003d1c:	f000 f8f6 	bl	8003f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <pvPortMalloc+0x178>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	4a18      	ldr	r2, [pc, #96]	; (8003d8c <pvPortMalloc+0x178>)
 8003d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <pvPortMalloc+0x178>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <pvPortMalloc+0x180>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d203      	bcs.n	8003d42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <pvPortMalloc+0x178>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <pvPortMalloc+0x180>)
 8003d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <pvPortMalloc+0x174>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d56:	f000 fae5 	bl	8004324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <pvPortMalloc+0x164>
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e7fe      	b.n	8003d76 <pvPortMalloc+0x162>
	return pvReturn;
 8003d78:	69fb      	ldr	r3, [r7, #28]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	200018a4 	.word	0x200018a4
 8003d88:	200018b0 	.word	0x200018b0
 8003d8c:	200018a8 	.word	0x200018a8
 8003d90:	2000189c 	.word	0x2000189c
 8003d94:	200018ac 	.word	0x200018ac

08003d98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d046      	beq.n	8003e38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003daa:	2308      	movs	r3, #8
 8003dac:	425b      	negs	r3, r3
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4413      	add	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	4b20      	ldr	r3, [pc, #128]	; (8003e40 <vPortFree+0xa8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <vPortFree+0x42>
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e7fe      	b.n	8003dd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <vPortFree+0x5e>
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	e7fe      	b.n	8003df4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <vPortFree+0xa8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d019      	beq.n	8003e38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d115      	bne.n	8003e38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <vPortFree+0xa8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e1c:	f000 fa74 	bl	8004308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <vPortFree+0xac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4413      	add	r3, r2
 8003e2a:	4a06      	ldr	r2, [pc, #24]	; (8003e44 <vPortFree+0xac>)
 8003e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e2e:	6938      	ldr	r0, [r7, #16]
 8003e30:	f000 f86c 	bl	8003f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e34:	f000 fa76 	bl	8004324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	200018b0 	.word	0x200018b0
 8003e44:	200018a8 	.word	0x200018a8

08003e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e4e:	f44f 53c3 	mov.w	r3, #6240	; 0x1860
 8003e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <prvHeapInit+0xac>)
 8003e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3307      	adds	r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 0307 	bic.w	r3, r3, #7
 8003e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	4a1f      	ldr	r2, [pc, #124]	; (8003ef4 <prvHeapInit+0xac>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e80:	4a1d      	ldr	r2, [pc, #116]	; (8003ef8 <prvHeapInit+0xb0>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <prvHeapInit+0xb0>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4413      	add	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e94:	2208      	movs	r2, #8
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <prvHeapInit+0xb4>)
 8003ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <prvHeapInit+0xb4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <prvHeapInit+0xb4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	1ad2      	subs	r2, r2, r3
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ec8:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <prvHeapInit+0xb4>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <prvHeapInit+0xb8>)
 8003ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <prvHeapInit+0xbc>)
 8003ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <prvHeapInit+0xc0>)
 8003ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ee6:	601a      	str	r2, [r3, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	2000003c 	.word	0x2000003c
 8003ef8:	2000189c 	.word	0x2000189c
 8003efc:	200018a4 	.word	0x200018a4
 8003f00:	200018ac 	.word	0x200018ac
 8003f04:	200018a8 	.word	0x200018a8
 8003f08:	200018b0 	.word	0x200018b0

08003f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <prvInsertBlockIntoFreeList+0xac>)
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e002      	b.n	8003f20 <prvInsertBlockIntoFreeList+0x14>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d3f7      	bcc.n	8003f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d108      	bne.n	8003f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d118      	bne.n	8003f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <prvInsertBlockIntoFreeList+0xb0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d00d      	beq.n	8003f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	441a      	add	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e008      	b.n	8003f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <prvInsertBlockIntoFreeList+0xb0>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e003      	b.n	8003f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d002      	beq.n	8003faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	2000189c 	.word	0x2000189c
 8003fbc:	200018a4 	.word	0x200018a4

08003fc0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08c      	sub	sp, #48	; 0x30
 8003fc4:	af04      	add	r7, sp, #16
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fe1d 	bl	8003c14 <pvPortMalloc>
 8003fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00e      	beq.n	8004000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fe2:	2054      	movs	r0, #84	; 0x54
 8003fe4:	f7ff fe16 	bl	8003c14 <pvPortMalloc>
 8003fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff6:	e005      	b.n	8004004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ff8:	6978      	ldr	r0, [r7, #20]
 8003ffa:	f7ff fecd 	bl	8003d98 <vPortFree>
 8003ffe:	e001      	b.n	8004004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d013      	beq.n	8004032 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	2300      	movs	r3, #0
 800400e:	9303      	str	r3, [sp, #12]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	9302      	str	r3, [sp, #8]
 8004014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f80e 	bl	8004042 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004026:	69f8      	ldr	r0, [r7, #28]
 8004028:	f000 f88a 	bl	8004140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800402c:	2301      	movs	r3, #1
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e002      	b.n	8004038 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004038:	69bb      	ldr	r3, [r7, #24]
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b088      	sub	sp, #32
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800405a:	3b01      	subs	r3, #1
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f023 0307 	bic.w	r3, r3, #7
 8004068:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <prvInitialiseNewTask+0x46>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	e7fe      	b.n	8004086 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e012      	b.n	80040b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	4413      	add	r3, r2
 8004094:	7819      	ldrb	r1, [r3, #0]
 8004096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	3334      	adds	r3, #52	; 0x34
 800409e:	460a      	mov	r2, r1
 80040a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d006      	beq.n	80040bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3301      	adds	r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b0f      	cmp	r3, #15
 80040b8:	d9e9      	bls.n	800408e <prvInitialiseNewTask+0x4c>
 80040ba:	e000      	b.n	80040be <prvInitialiseNewTask+0x7c>
		{
			break;
 80040bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d901      	bls.n	80040d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040cc:	2306      	movs	r3, #6
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fb2a 	bl	8003740 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	3318      	adds	r3, #24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fb25 	bl	8003740 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	f1c3 0207 	rsb	r2, r3, #7
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	2200      	movs	r2, #0
 8004110:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	68f9      	ldr	r1, [r7, #12]
 800411e:	69b8      	ldr	r0, [r7, #24]
 8004120:	f7ff fba2 	bl	8003868 <pxPortInitialiseStack>
 8004124:	4602      	mov	r2, r0
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004136:	bf00      	nop
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004148:	f7ff fc92 	bl	8003a70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800414c:	4b2a      	ldr	r3, [pc, #168]	; (80041f8 <prvAddNewTaskToReadyList+0xb8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	4a29      	ldr	r2, [pc, #164]	; (80041f8 <prvAddNewTaskToReadyList+0xb8>)
 8004154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <prvAddNewTaskToReadyList+0xbc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800415e:	4a27      	ldr	r2, [pc, #156]	; (80041fc <prvAddNewTaskToReadyList+0xbc>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004164:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <prvAddNewTaskToReadyList+0xb8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d110      	bne.n	800418e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800416c:	f000 faa4 	bl	80046b8 <prvInitialiseTaskLists>
 8004170:	e00d      	b.n	800418e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004172:	4b23      	ldr	r3, [pc, #140]	; (8004200 <prvAddNewTaskToReadyList+0xc0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800417a:	4b20      	ldr	r3, [pc, #128]	; (80041fc <prvAddNewTaskToReadyList+0xbc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	429a      	cmp	r2, r3
 8004186:	d802      	bhi.n	800418e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004188:	4a1c      	ldr	r2, [pc, #112]	; (80041fc <prvAddNewTaskToReadyList+0xbc>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <prvAddNewTaskToReadyList+0xc4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <prvAddNewTaskToReadyList+0xc4>)
 8004196:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <prvAddNewTaskToReadyList+0xc8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <prvAddNewTaskToReadyList+0xc8>)
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <prvAddNewTaskToReadyList+0xcc>)
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f7ff faca 	bl	800375a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041c6:	f7ff fc81 	bl	8003acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041ca:	4b0d      	ldr	r3, [pc, #52]	; (8004200 <prvAddNewTaskToReadyList+0xc0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00e      	beq.n	80041f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041d2:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <prvAddNewTaskToReadyList+0xbc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d207      	bcs.n	80041f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <prvAddNewTaskToReadyList+0xd0>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200019b4 	.word	0x200019b4
 80041fc:	200018b4 	.word	0x200018b4
 8004200:	200019c0 	.word	0x200019c0
 8004204:	200019d0 	.word	0x200019d0
 8004208:	200019bc 	.word	0x200019bc
 800420c:	200018b8 	.word	0x200018b8
 8004210:	e000ed04 	.word	0xe000ed04

08004214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <vTaskDelay+0x60>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <vTaskDelay+0x2e>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60bb      	str	r3, [r7, #8]
 8004240:	e7fe      	b.n	8004240 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004242:	f000 f861 	bl	8004308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004246:	2100      	movs	r1, #0
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fae7 	bl	800481c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800424e:	f000 f869 	bl	8004324 <xTaskResumeAll>
 8004252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800425a:	4b07      	ldr	r3, [pc, #28]	; (8004278 <vTaskDelay+0x64>)
 800425c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	200019dc 	.word	0x200019dc
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <vTaskStartScheduler+0x74>)
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	2300      	movs	r3, #0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	2280      	movs	r2, #128	; 0x80
 800428e:	4919      	ldr	r1, [pc, #100]	; (80042f4 <vTaskStartScheduler+0x78>)
 8004290:	4819      	ldr	r0, [pc, #100]	; (80042f8 <vTaskStartScheduler+0x7c>)
 8004292:	f7ff fe95 	bl	8003fc0 <xTaskCreate>
 8004296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d115      	bne.n	80042ca <vTaskStartScheduler+0x4e>
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <vTaskStartScheduler+0x80>)
 80042b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <vTaskStartScheduler+0x84>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <vTaskStartScheduler+0x88>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042c4:	f7ff fb48 	bl	8003958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042c8:	e00d      	b.n	80042e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d0:	d109      	bne.n	80042e6 <vTaskStartScheduler+0x6a>
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	e7fe      	b.n	80042e4 <vTaskStartScheduler+0x68>
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	200019d8 	.word	0x200019d8
 80042f4:	08005a04 	.word	0x08005a04
 80042f8:	08004689 	.word	0x08004689
 80042fc:	200019d4 	.word	0x200019d4
 8004300:	200019c0 	.word	0x200019c0
 8004304:	200019b8 	.word	0x200019b8

08004308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <vTaskSuspendAll+0x18>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	4a03      	ldr	r2, [pc, #12]	; (8004320 <vTaskSuspendAll+0x18>)
 8004314:	6013      	str	r3, [r2, #0]
}
 8004316:	bf00      	nop
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	200019dc 	.word	0x200019dc

08004324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004332:	4b41      	ldr	r3, [pc, #260]	; (8004438 <xTaskResumeAll+0x114>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <xTaskResumeAll+0x2a>
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	e7fe      	b.n	800434c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800434e:	f7ff fb8f 	bl	8003a70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004352:	4b39      	ldr	r3, [pc, #228]	; (8004438 <xTaskResumeAll+0x114>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3b01      	subs	r3, #1
 8004358:	4a37      	ldr	r2, [pc, #220]	; (8004438 <xTaskResumeAll+0x114>)
 800435a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800435c:	4b36      	ldr	r3, [pc, #216]	; (8004438 <xTaskResumeAll+0x114>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d161      	bne.n	8004428 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004364:	4b35      	ldr	r3, [pc, #212]	; (800443c <xTaskResumeAll+0x118>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d05d      	beq.n	8004428 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800436c:	e02e      	b.n	80043cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800436e:	4b34      	ldr	r3, [pc, #208]	; (8004440 <xTaskResumeAll+0x11c>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3318      	adds	r3, #24
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff fa4a 	bl	8003814 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3304      	adds	r3, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fa45 	bl	8003814 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	2201      	movs	r2, #1
 8004390:	409a      	lsls	r2, r3
 8004392:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <xTaskResumeAll+0x120>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <xTaskResumeAll+0x120>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4a27      	ldr	r2, [pc, #156]	; (8004448 <xTaskResumeAll+0x124>)
 80043aa:	441a      	add	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f7ff f9d1 	bl	800375a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	4b23      	ldr	r3, [pc, #140]	; (800444c <xTaskResumeAll+0x128>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <xTaskResumeAll+0x12c>)
 80043c8:	2201      	movs	r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043cc:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <xTaskResumeAll+0x11c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1cc      	bne.n	800436e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043da:	f000 f9f9 	bl	80047d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <xTaskResumeAll+0x130>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d010      	beq.n	800440c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043ea:	f000 f837 	bl	800445c <xTaskIncrementTick>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80043f4:	4b16      	ldr	r3, [pc, #88]	; (8004450 <xTaskResumeAll+0x12c>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f1      	bne.n	80043ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <xTaskResumeAll+0x130>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xTaskResumeAll+0x12c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004414:	2301      	movs	r3, #1
 8004416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <xTaskResumeAll+0x134>)
 800441a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004428:	f7ff fb50 	bl	8003acc <vPortExitCritical>

	return xAlreadyYielded;
 800442c:	68bb      	ldr	r3, [r7, #8]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	200019dc 	.word	0x200019dc
 800443c:	200019b4 	.word	0x200019b4
 8004440:	20001974 	.word	0x20001974
 8004444:	200019bc 	.word	0x200019bc
 8004448:	200018b8 	.word	0x200018b8
 800444c:	200018b4 	.word	0x200018b4
 8004450:	200019c8 	.word	0x200019c8
 8004454:	200019c4 	.word	0x200019c4
 8004458:	e000ed04 	.word	0xe000ed04

0800445c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004466:	4b50      	ldr	r3, [pc, #320]	; (80045a8 <xTaskIncrementTick+0x14c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 808c 	bne.w	8004588 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8004470:	4b4e      	ldr	r3, [pc, #312]	; (80045ac <xTaskIncrementTick+0x150>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3301      	adds	r3, #1
 8004476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004478:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <xTaskIncrementTick+0x150>)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11f      	bne.n	80044c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004484:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <xTaskIncrementTick+0x154>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <xTaskIncrementTick+0x46>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	e7fe      	b.n	80044a0 <xTaskIncrementTick+0x44>
 80044a2:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <xTaskIncrementTick+0x154>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <xTaskIncrementTick+0x158>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <xTaskIncrementTick+0x154>)
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <xTaskIncrementTick+0x158>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <xTaskIncrementTick+0x15c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a3e      	ldr	r2, [pc, #248]	; (80045b8 <xTaskIncrementTick+0x15c>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	f000 f986 	bl	80047d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044c4:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <xTaskIncrementTick+0x160>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d34d      	bcc.n	800456a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044ce:	4b38      	ldr	r3, [pc, #224]	; (80045b0 <xTaskIncrementTick+0x154>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <xTaskIncrementTick+0x80>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <xTaskIncrementTick+0x82>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e2:	4b36      	ldr	r3, [pc, #216]	; (80045bc <xTaskIncrementTick+0x160>)
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e8:	601a      	str	r2, [r3, #0]
					break;
 80044ea:	e03e      	b.n	800456a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <xTaskIncrementTick+0x154>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d203      	bcs.n	800450c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <xTaskIncrementTick+0x160>)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6013      	str	r3, [r2, #0]
						break;
 800450a:	e02e      	b.n	800456a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3304      	adds	r3, #4
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff f97f 	bl	8003814 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	d004      	beq.n	8004528 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3318      	adds	r3, #24
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f976 	bl	8003814 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	2201      	movs	r2, #1
 800452e:	409a      	lsls	r2, r3
 8004530:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <xTaskIncrementTick+0x164>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4313      	orrs	r3, r2
 8004536:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <xTaskIncrementTick+0x164>)
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <xTaskIncrementTick+0x168>)
 8004548:	441a      	add	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3304      	adds	r3, #4
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f7ff f902 	bl	800375a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455a:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <xTaskIncrementTick+0x16c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	429a      	cmp	r2, r3
 8004562:	d3b4      	bcc.n	80044ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004568:	e7b1      	b.n	80044ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <xTaskIncrementTick+0x16c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	4914      	ldr	r1, [pc, #80]	; (80045c4 <xTaskIncrementTick+0x168>)
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d907      	bls.n	8004592 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e004      	b.n	8004592 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <xTaskIncrementTick+0x170>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	4a0f      	ldr	r2, [pc, #60]	; (80045cc <xTaskIncrementTick+0x170>)
 8004590:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <xTaskIncrementTick+0x174>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800459a:	2301      	movs	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800459e:	697b      	ldr	r3, [r7, #20]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	200019dc 	.word	0x200019dc
 80045ac:	200019b8 	.word	0x200019b8
 80045b0:	2000196c 	.word	0x2000196c
 80045b4:	20001970 	.word	0x20001970
 80045b8:	200019cc 	.word	0x200019cc
 80045bc:	200019d4 	.word	0x200019d4
 80045c0:	200019bc 	.word	0x200019bc
 80045c4:	200018b8 	.word	0x200018b8
 80045c8:	200018b4 	.word	0x200018b4
 80045cc:	200019c4 	.word	0x200019c4
 80045d0:	200019c8 	.word	0x200019c8

080045d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045da:	4b26      	ldr	r3, [pc, #152]	; (8004674 <vTaskSwitchContext+0xa0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045e2:	4b25      	ldr	r3, [pc, #148]	; (8004678 <vTaskSwitchContext+0xa4>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045e8:	e03e      	b.n	8004668 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <vTaskSwitchContext+0xa4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045f0:	4b22      	ldr	r3, [pc, #136]	; (800467c <vTaskSwitchContext+0xa8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	fab3 f383 	clz	r3, r3
 80045fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80045fe:	7afb      	ldrb	r3, [r7, #11]
 8004600:	f1c3 031f 	rsb	r3, r3, #31
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	491e      	ldr	r1, [pc, #120]	; (8004680 <vTaskSwitchContext+0xac>)
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <vTaskSwitchContext+0x5a>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e7fe      	b.n	800462c <vTaskSwitchContext+0x58>
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a11      	ldr	r2, [pc, #68]	; (8004680 <vTaskSwitchContext+0xac>)
 800463a:	4413      	add	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3308      	adds	r3, #8
 8004650:	429a      	cmp	r2, r3
 8004652:	d104      	bne.n	800465e <vTaskSwitchContext+0x8a>
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a07      	ldr	r2, [pc, #28]	; (8004684 <vTaskSwitchContext+0xb0>)
 8004666:	6013      	str	r3, [r2, #0]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	200019dc 	.word	0x200019dc
 8004678:	200019c8 	.word	0x200019c8
 800467c:	200019bc 	.word	0x200019bc
 8004680:	200018b8 	.word	0x200018b8
 8004684:	200018b4 	.word	0x200018b4

08004688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004690:	f000 f852 	bl	8004738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <prvIdleTask+0x28>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d9f9      	bls.n	8004690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <prvIdleTask+0x2c>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046ac:	e7f0      	b.n	8004690 <prvIdleTask+0x8>
 80046ae:	bf00      	nop
 80046b0:	200018b8 	.word	0x200018b8
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	e00c      	b.n	80046de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <prvInitialiseTaskLists+0x60>)
 80046d0:	4413      	add	r3, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff f814 	bl	8003700 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3301      	adds	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d9ef      	bls.n	80046c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046e4:	480d      	ldr	r0, [pc, #52]	; (800471c <prvInitialiseTaskLists+0x64>)
 80046e6:	f7ff f80b 	bl	8003700 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <prvInitialiseTaskLists+0x68>)
 80046ec:	f7ff f808 	bl	8003700 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <prvInitialiseTaskLists+0x6c>)
 80046f2:	f7ff f805 	bl	8003700 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046f6:	480c      	ldr	r0, [pc, #48]	; (8004728 <prvInitialiseTaskLists+0x70>)
 80046f8:	f7ff f802 	bl	8003700 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <prvInitialiseTaskLists+0x74>)
 80046fe:	f7fe ffff 	bl	8003700 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <prvInitialiseTaskLists+0x78>)
 8004704:	4a05      	ldr	r2, [pc, #20]	; (800471c <prvInitialiseTaskLists+0x64>)
 8004706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvInitialiseTaskLists+0x7c>)
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <prvInitialiseTaskLists+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200018b8 	.word	0x200018b8
 800471c:	20001944 	.word	0x20001944
 8004720:	20001958 	.word	0x20001958
 8004724:	20001974 	.word	0x20001974
 8004728:	20001988 	.word	0x20001988
 800472c:	200019a0 	.word	0x200019a0
 8004730:	2000196c 	.word	0x2000196c
 8004734:	20001970 	.word	0x20001970

08004738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473e:	e028      	b.n	8004792 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8004740:	f7ff fde2 	bl	8004308 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <prvCheckTasksWaitingTermination+0x6c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8004754:	f7ff fde6 	bl	8004324 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d119      	bne.n	8004792 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800475e:	f7ff f987 	bl	8003a70 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <prvCheckTasksWaitingTermination+0x6c>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	3304      	adds	r3, #4
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f850 	bl	8003814 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <prvCheckTasksWaitingTermination+0x70>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	4a0b      	ldr	r2, [pc, #44]	; (80047a8 <prvCheckTasksWaitingTermination+0x70>)
 800477c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <prvCheckTasksWaitingTermination+0x74>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	4a09      	ldr	r2, [pc, #36]	; (80047ac <prvCheckTasksWaitingTermination+0x74>)
 8004786:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8004788:	f7ff f9a0 	bl	8003acc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800478c:	6838      	ldr	r0, [r7, #0]
 800478e:	f000 f80f 	bl	80047b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <prvCheckTasksWaitingTermination+0x74>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1d2      	bne.n	8004740 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	20001988 	.word	0x20001988
 80047a8:	200019b4 	.word	0x200019b4
 80047ac:	2000199c 	.word	0x2000199c

080047b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff faeb 	bl	8003d98 <vPortFree>
			vPortFree( pxTCB );
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7ff fae8 	bl	8003d98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047d6:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <prvResetNextTaskUnblockTime+0x44>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <prvResetNextTaskUnblockTime+0x14>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <prvResetNextTaskUnblockTime+0x16>
 80047e4:	2300      	movs	r3, #0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d004      	beq.n	80047f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <prvResetNextTaskUnblockTime+0x48>)
 80047ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047f2:	e008      	b.n	8004806 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047f4:	4b07      	ldr	r3, [pc, #28]	; (8004814 <prvResetNextTaskUnblockTime+0x44>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4a05      	ldr	r2, [pc, #20]	; (8004818 <prvResetNextTaskUnblockTime+0x48>)
 8004804:	6013      	str	r3, [r2, #0]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000196c 	.word	0x2000196c
 8004818:	200019d4 	.word	0x200019d4

0800481c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482c:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe ffee 	bl	8003814 <uxListRemove>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800483e:	4b24      	ldr	r3, [pc, #144]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2201      	movs	r2, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4013      	ands	r3, r2
 8004852:	4a20      	ldr	r2, [pc, #128]	; (80048d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004854:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800485c:	d10a      	bne.n	8004874 <prvAddCurrentTaskToDelayedList+0x58>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	481a      	ldr	r0, [pc, #104]	; (80048d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800486e:	f7fe ff74 	bl	800375a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004872:	e026      	b.n	80048c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800487c:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d209      	bcs.n	80048a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f7fe ff82 	bl	80037a2 <vListInsert>
}
 800489e:	e010      	b.n	80048c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7fe ff78 	bl	80037a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048b2:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d202      	bcs.n	80048c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048bc:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6013      	str	r3, [r2, #0]
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	200019b8 	.word	0x200019b8
 80048d0:	200018b4 	.word	0x200018b4
 80048d4:	200019bc 	.word	0x200019bc
 80048d8:	200019a0 	.word	0x200019a0
 80048dc:	20001970 	.word	0x20001970
 80048e0:	2000196c 	.word	0x2000196c
 80048e4:	200019d4 	.word	0x200019d4

080048e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b0a4      	sub	sp, #144	; 0x90
 80048ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048ee:	f7fb fc77 	bl	80001e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048f2:	f000 f8a1 	bl	8004a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048f6:	f000 fa81 	bl	8004dfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80048fa:	f000 fa4f 	bl	8004d9c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80048fe:	f000 f955 	bl	8004bac <MX_TIM3_Init>
  MX_TIM17_Init();
 8004902:	f000 fa25 	bl	8004d50 <MX_TIM17_Init>
  MX_TIM2_Init();
 8004906:	f000 f8fd 	bl	8004b04 <MX_TIM2_Init>
  MX_TIM4_Init();
 800490a:	f000 f9cb 	bl	8004ca4 <MX_TIM4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800490e:	4b3c      	ldr	r3, [pc, #240]	; (8004a00 <main+0x118>)
 8004910:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8004914:	461d      	mov	r5, r3
 8004916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800491a:	682b      	ldr	r3, [r5, #0]
 800491c:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800491e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004922:	2100      	movs	r1, #0
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fea9 	bl	800367c <osThreadCreate>
 800492a:	4602      	mov	r2, r0
 800492c:	4b35      	ldr	r3, [pc, #212]	; (8004a04 <main+0x11c>)
 800492e:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor0Task */
  osThreadDef(motor0Task, motor0Loop, osPriorityIdle, 0, 128);
 8004930:	4b35      	ldr	r3, [pc, #212]	; (8004a08 <main+0x120>)
 8004932:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8004936:	461d      	mov	r5, r3
 8004938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800493a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	6023      	str	r3, [r4, #0]
  motor0TaskHandle = osThreadCreate(osThread(motor0Task), NULL);
 8004940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fe98 	bl	800367c <osThreadCreate>
 800494c:	4602      	mov	r2, r0
 800494e:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <main+0x124>)
 8004950:	601a      	str	r2, [r3, #0]

  /* definition and creation of motor1Task */
  osThreadDef(motor1Task, motor1Loop, osPriorityIdle, 0, 128);
 8004952:	4b2f      	ldr	r3, [pc, #188]	; (8004a10 <main+0x128>)
 8004954:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8004958:	461d      	mov	r5, r3
 800495a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800495c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800495e:	682b      	ldr	r3, [r5, #0]
 8004960:	6023      	str	r3, [r4, #0]
  motor1TaskHandle = osThreadCreate(osThread(motor1Task), NULL);
 8004962:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe fe87 	bl	800367c <osThreadCreate>
 800496e:	4602      	mov	r2, r0
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <main+0x12c>)
 8004972:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadDef(controlTask, controlLoop, osPriorityIdle, 0, 128);
 8004974:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <main+0x130>)
 8004976:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800497a:	461d      	mov	r5, r3
 800497c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800497e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	6023      	str	r3, [r4, #0]
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8004984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe fe76 	bl	800367c <osThreadCreate>
 8004990:	4602      	mov	r2, r0
 8004992:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <main+0x134>)
 8004994:	601a      	str	r2, [r3, #0]

  /* definition and creation of VzdTask */
  osThreadDef(VzdTask, VzdLoop, osPriorityIdle, 0, 128);
 8004996:	4b22      	ldr	r3, [pc, #136]	; (8004a20 <main+0x138>)
 8004998:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800499c:	461d      	mov	r5, r3
 800499e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	6023      	str	r3, [r4, #0]
  VzdTaskHandle = osThreadCreate(osThread(VzdTask), NULL);
 80049a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049aa:	2100      	movs	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fe65 	bl	800367c <osThreadCreate>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <main+0x13c>)
 80049b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of backupTask1 */
  osThreadDef(backupTask1, backupLoop1, osPriorityIdle, 0, 128);
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <main+0x140>)
 80049ba:	f107 0418 	add.w	r4, r7, #24
 80049be:	461d      	mov	r5, r3
 80049c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	6023      	str	r3, [r4, #0]
  backupTask1Handle = osThreadCreate(osThread(backupTask1), NULL);
 80049c8:	f107 0318 	add.w	r3, r7, #24
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fe54 	bl	800367c <osThreadCreate>
 80049d4:	4602      	mov	r2, r0
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <main+0x144>)
 80049d8:	601a      	str	r2, [r3, #0]

  /* definition and creation of EncoTask */
  osThreadDef(EncoTask, EncoLoop, osPriorityIdle, 0, 128);
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <main+0x148>)
 80049dc:	1d3c      	adds	r4, r7, #4
 80049de:	461d      	mov	r5, r3
 80049e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	6023      	str	r3, [r4, #0]
  EncoTaskHandle = osThreadCreate(osThread(EncoTask), NULL);
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fe fe45 	bl	800367c <osThreadCreate>
 80049f2:	4602      	mov	r2, r0
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <main+0x14c>)
 80049f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80049f8:	f7fe fe39 	bl	800366e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <main+0x114>
 80049fe:	bf00      	nop
 8004a00:	08005a18 	.word	0x08005a18
 8004a04:	20001a00 	.word	0x20001a00
 8004a08:	08005a38 	.word	0x08005a38
 8004a0c:	20001ba0 	.word	0x20001ba0
 8004a10:	08005a58 	.word	0x08005a58
 8004a14:	20001a04 	.word	0x20001a04
 8004a18:	08005a78 	.word	0x08005a78
 8004a1c:	20001ae0 	.word	0x20001ae0
 8004a20:	08005a94 	.word	0x08005a94
 8004a24:	20001a48 	.word	0x20001a48
 8004a28:	08005ab4 	.word	0x08005ab4
 8004a2c:	20001adc 	.word	0x20001adc
 8004a30:	08005ad4 	.word	0x08005ad4
 8004a34:	20001ad8 	.word	0x20001ad8

08004a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b0a6      	sub	sp, #152	; 0x98
 8004a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a42:	2228      	movs	r2, #40	; 0x28
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 ffc8 	bl	80059dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	2258      	movs	r2, #88	; 0x58
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ffba 	bl	80059dc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a70:	2310      	movs	r3, #16
 8004a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a76:	2302      	movs	r3, #2
 8004a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004a84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004a88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fb fe72 	bl	8000780 <HAL_RCC_OscConfig>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8004aa2:	f000 fd11 	bl	80054c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004aa6:	230f      	movs	r3, #15
 8004aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aaa:	2302      	movs	r3, #2
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ab6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004abc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fc fd4a 	bl	800155c <HAL_RCC_ClockConfig>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004ace:	f000 fcfb 	bl	80054c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM17
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <SystemClock_Config+0xc8>)
 8004ad4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fc ff9f 	bl	8001a2c <HAL_RCCEx_PeriphCLKConfig>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004af4:	f000 fce8 	bl	80054c8 <Error_Handler>
  }
}
 8004af8:	bf00      	nop
 8004afa:	3798      	adds	r7, #152	; 0x98
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	01300002 	.word	0x01300002

08004b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08c      	sub	sp, #48	; 0x30
 8004b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b0a:	f107 030c 	add.w	r3, r7, #12
 8004b0e:	2224      	movs	r2, #36	; 0x24
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 ff62 	bl	80059dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b18:	463b      	mov	r3, r7
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b62:	2301      	movs	r3, #1
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b66:	2300      	movs	r3, #0
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4619      	mov	r1, r3
 8004b74:	480c      	ldr	r0, [pc, #48]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b76:	f7fd fa7d 	bl	8002074 <HAL_TIM_Encoder_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004b80:	f000 fca2 	bl	80054c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b84:	2300      	movs	r3, #0
 8004b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]

  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4805      	ldr	r0, [pc, #20]	; (8004ba8 <MX_TIM2_Init+0xa4>)
 8004b92:	f7fe f873 	bl	8002c7c <HAL_TIMEx_MasterConfigSynchronization>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004b9c:	f000 fc94 	bl	80054c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ba0:	bf00      	nop
 8004ba2:	3730      	adds	r7, #48	; 0x30
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20001ae4 	.word	0x20001ae4

08004bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb2:	f107 031c 	add.w	r3, r7, #28
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
 8004bcc:	615a      	str	r2, [r3, #20]
 8004bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004bd0:	4b32      	ldr	r3, [pc, #200]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004bd2:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <MX_TIM3_Init+0xf4>)
 8004bd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004bd6:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bdc:	4b2f      	ldr	r3, [pc, #188]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004be2:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004be8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bf0:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004bf6:	4829      	ldr	r0, [pc, #164]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004bf8:	f7fd f9c0 	bl	8001f7c <HAL_TIM_PWM_Init>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004c02:	f000 fc61 	bl	80054c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c0e:	f107 031c 	add.w	r3, r7, #28
 8004c12:	4619      	mov	r1, r3
 8004c14:	4821      	ldr	r0, [pc, #132]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004c16:	f7fe f831 	bl	8002c7c <HAL_TIMEx_MasterConfigSynchronization>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004c20:	f000 fc52 	bl	80054c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c24:	2360      	movs	r3, #96	; 0x60
 8004c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c34:	463b      	mov	r3, r7
 8004c36:	2200      	movs	r2, #0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4818      	ldr	r0, [pc, #96]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004c3c:	f7fd ff06 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8004c46:	f000 fc3f 	bl	80054c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c4a:	463b      	mov	r3, r7
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4812      	ldr	r0, [pc, #72]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004c52:	f7fd fefb 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8004c5c:	f000 fc34 	bl	80054c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c60:	463b      	mov	r3, r7
 8004c62:	2208      	movs	r2, #8
 8004c64:	4619      	mov	r1, r3
 8004c66:	480d      	ldr	r0, [pc, #52]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004c68:	f7fd fef0 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004c72:	f000 fc29 	bl	80054c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c76:	463b      	mov	r3, r7
 8004c78:	220c      	movs	r2, #12
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4807      	ldr	r0, [pc, #28]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004c7e:	f7fd fee5 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004c88:	f000 fc1e 	bl	80054c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004c8c:	4803      	ldr	r0, [pc, #12]	; (8004c9c <MX_TIM3_Init+0xf0>)
 8004c8e:	f000 fcfd 	bl	800568c <HAL_TIM_MspPostInit>

}
 8004c92:	bf00      	nop
 8004c94:	3728      	adds	r7, #40	; 0x28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20001a98 	.word	0x20001a98
 8004ca0:	40000400 	.word	0x40000400

08004ca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08c      	sub	sp, #48	; 0x30
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fe92 	bl	80059dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cb8:	463b      	mov	r3, r7
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004cc2:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004cc4:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <MX_TIM4_Init+0xa8>)
 8004cc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004cc8:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004cd4:	4b1c      	ldr	r3, [pc, #112]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ce2:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d00:	2301      	movs	r3, #1
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	4619      	mov	r1, r3
 8004d12:	480d      	ldr	r0, [pc, #52]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004d14:	f7fd f9ae 	bl	8002074 <HAL_TIM_Encoder_Init>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004d1e:	f000 fbd3 	bl	80054c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4806      	ldr	r0, [pc, #24]	; (8004d48 <MX_TIM4_Init+0xa4>)
 8004d30:	f7fd ffa4 	bl	8002c7c <HAL_TIMEx_MasterConfigSynchronization>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004d3a:	f000 fbc5 	bl	80054c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004d3e:	bf00      	nop
 8004d40:	3730      	adds	r7, #48	; 0x30
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20001a08 	.word	0x20001a08
 8004d4c:	40000800 	.word	0x40000800

08004d50 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004d54:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d56:	4a10      	ldr	r2, [pc, #64]	; (8004d98 <MX_TIM17_Init+0x48>)
 8004d58:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 72;
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d5c:	2248      	movs	r2, #72	; 0x48
 8004d5e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d60:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004d80:	4804      	ldr	r0, [pc, #16]	; (8004d94 <MX_TIM17_Init+0x44>)
 8004d82:	f7fd f86f 	bl	8001e64 <HAL_TIM_Base_Init>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8004d8c:	f000 fb9c 	bl	80054c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20001a4c 	.word	0x20001a4c
 8004d98:	40014800 	.word	0x40014800

08004d9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004da0:	4b14      	ldr	r3, [pc, #80]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <MX_USART2_UART_Init+0x5c>)
 8004da4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004da6:	4b13      	ldr	r3, [pc, #76]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004da8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8004dac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004db4:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dd8:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dde:	4805      	ldr	r0, [pc, #20]	; (8004df4 <MX_USART2_UART_Init+0x58>)
 8004de0:	f7fe f8a8 	bl	8002f34 <HAL_UART_Init>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004dea:	f000 fb6d 	bl	80054c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20001b30 	.word	0x20001b30
 8004df8:	40004400 	.word	0x40004400

08004dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e02:	f107 0314 	add.w	r3, r7, #20
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	60da      	str	r2, [r3, #12]
 8004e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e12:	4a4b      	ldr	r2, [pc, #300]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e14:	4b4a      	ldr	r3, [pc, #296]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e1c:	6153      	str	r3, [r2, #20]
 8004e1e:	4b48      	ldr	r3, [pc, #288]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e2a:	4a45      	ldr	r2, [pc, #276]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e2c:	4b44      	ldr	r3, [pc, #272]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e34:	6153      	str	r3, [r2, #20]
 8004e36:	4b42      	ldr	r3, [pc, #264]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e42:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e44:	4b3e      	ldr	r3, [pc, #248]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e4c:	6153      	str	r3, [r2, #20]
 8004e4e:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5a:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e5c:	4b38      	ldr	r3, [pc, #224]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e64:	6153      	str	r3, [r2, #20]
 8004e66:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <MX_GPIO_Init+0x144>)
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Motor0Low_Pin|Motor1Low_Pin, GPIO_PIN_RESET);
 8004e72:	2200      	movs	r2, #0
 8004e74:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8004e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e7c:	f7fb fc68 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, backupOut1_Pin|Pulse_Pin, GPIO_PIN_RESET);
 8004e80:	2200      	movs	r2, #0
 8004e82:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004e86:	482f      	ldr	r0, [pc, #188]	; (8004f44 <MX_GPIO_Init+0x148>)
 8004e88:	f7fb fc62 	bl	8000750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004e8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e92:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <MX_GPIO_Init+0x14c>)
 8004e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e9a:	f107 0314 	add.w	r3, r7, #20
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4828      	ldr	r0, [pc, #160]	; (8004f44 <MX_GPIO_Init+0x148>)
 8004ea2:	f7fb faaf 	bl	8000404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004ea6:	2320      	movs	r3, #32
 8004ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	4619      	mov	r1, r3
 8004ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec0:	f7fb faa0 	bl	8000404 <HAL_GPIO_Init>

  /*Configure GPIO pin : backupIn1_Pin */
  GPIO_InitStruct.Pin = backupIn1_Pin;
 8004ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(backupIn1_GPIO_Port, &GPIO_InitStruct);
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	481c      	ldr	r0, [pc, #112]	; (8004f4c <MX_GPIO_Init+0x150>)
 8004eda:	f7fb fa93 	bl	8000404 <HAL_GPIO_Init>

  /*Configure GPIO pins : EchoIn_Pin ENCO1In_Pin */
  GPIO_InitStruct.Pin = EchoIn_Pin|ENCO1In_Pin;
 8004ede:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4814      	ldr	r0, [pc, #80]	; (8004f44 <MX_GPIO_Init+0x148>)
 8004ef4:	f7fb fa86 	bl	8000404 <HAL_GPIO_Init>

  /*Configure GPIO pins : backupOut1_Pin Pulse_Pin */
  GPIO_InitStruct.Pin = backupOut1_Pin|Pulse_Pin;
 8004ef8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004efe:	2301      	movs	r3, #1
 8004f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f02:	2302      	movs	r3, #2
 8004f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f06:	2303      	movs	r3, #3
 8004f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f0a:	f107 0314 	add.w	r3, r7, #20
 8004f0e:	4619      	mov	r1, r3
 8004f10:	480c      	ldr	r0, [pc, #48]	; (8004f44 <MX_GPIO_Init+0x148>)
 8004f12:	f7fb fa77 	bl	8000404 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor0Low_Pin Motor1Low_Pin */
  GPIO_InitStruct.Pin = Motor0Low_Pin|Motor1Low_Pin;
 8004f16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004f20:	2302      	movs	r3, #2
 8004f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f24:	2303      	movs	r3, #3
 8004f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f32:	f7fb fa67 	bl	8000404 <HAL_GPIO_Init>

}
 8004f36:	bf00      	nop
 8004f38:	3728      	adds	r7, #40	; 0x28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	48000800 	.word	0x48000800
 8004f48:	10210000 	.word	0x10210000
 8004f4c:	48000400 	.word	0x48000400

08004f50 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f7fe fbb7 	bl	80036cc <osDelay>
 8004f5e:	e7fb      	b.n	8004f58 <StartDefaultTask+0x8>

08004f60 <modifyTimer0PWM>:
  /* USER CODE END 5 */ 
}



void modifyTimer0PWM(uint16_t value){
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f6a:	2360      	movs	r3, #96	; 0x60
 8004f6c:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4619      	mov	r1, r3
 8004f82:	4805      	ldr	r0, [pc, #20]	; (8004f98 <modifyTimer0PWM+0x38>)
 8004f84:	f7fd fd62 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4803      	ldr	r0, [pc, #12]	; (8004f98 <modifyTimer0PWM+0x38>)
 8004f8c:	f7fd f822 	bl	8001fd4 <HAL_TIM_PWM_Start>
}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20001a98 	.word	0x20001a98

08004f9c <modifyTimer1PWM>:

void modifyTimer1PWM(uint16_t value){
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fa6:	2360      	movs	r3, #96	; 0x60
 8004fa8:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8004fb6:	f107 030c 	add.w	r3, r7, #12
 8004fba:	2204      	movs	r2, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4805      	ldr	r0, [pc, #20]	; (8004fd4 <modifyTimer1PWM+0x38>)
 8004fc0:	f7fd fd44 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004fc4:	2104      	movs	r1, #4
 8004fc6:	4803      	ldr	r0, [pc, #12]	; (8004fd4 <modifyTimer1PWM+0x38>)
 8004fc8:	f7fd f804 	bl	8001fd4 <HAL_TIM_PWM_Start>
}
 8004fcc:	bf00      	nop
 8004fce:	3728      	adds	r7, #40	; 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20001a98 	.word	0x20001a98

08004fd8 <modifyTimer2PWM>:

void modifyTimer2PWM(uint16_t value){
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fe2:	2360      	movs	r3, #96	; 0x60
 8004fe4:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8004ff2:	f107 030c 	add.w	r3, r7, #12
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4805      	ldr	r0, [pc, #20]	; (8005010 <modifyTimer2PWM+0x38>)
 8004ffc:	f7fd fd26 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005000:	2108      	movs	r1, #8
 8005002:	4803      	ldr	r0, [pc, #12]	; (8005010 <modifyTimer2PWM+0x38>)
 8005004:	f7fc ffe6 	bl	8001fd4 <HAL_TIM_PWM_Start>
}
 8005008:	bf00      	nop
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20001a98 	.word	0x20001a98

08005014 <modifyTimer3PWM>:

void modifyTimer3PWM(uint16_t value){
 8005014:	b580      	push	{r7, lr}
 8005016:	b08a      	sub	sp, #40	; 0x28
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800501e:	2360      	movs	r3, #96	; 0x60
 8005020:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 8005022:	88fb      	ldrh	r3, [r7, #6]
 8005024:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4);
 800502e:	f107 030c 	add.w	r3, r7, #12
 8005032:	220c      	movs	r2, #12
 8005034:	4619      	mov	r1, r3
 8005036:	4805      	ldr	r0, [pc, #20]	; (800504c <modifyTimer3PWM+0x38>)
 8005038:	f7fd fd08 	bl	8002a4c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800503c:	210c      	movs	r1, #12
 800503e:	4803      	ldr	r0, [pc, #12]	; (800504c <modifyTimer3PWM+0x38>)
 8005040:	f7fc ffc8 	bl	8001fd4 <HAL_TIM_PWM_Start>
}
 8005044:	bf00      	nop
 8005046:	3728      	adds	r7, #40	; 0x28
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20001a98 	.word	0x20001a98

08005050 <motor0Loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor0Loop */
void motor0Loop(void const * argument)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
//  m1State = 300;

  for(;;)
  {

	  if(m1State == On){
 8005058:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <motor0Loop+0x7c>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d12b      	bne.n	80050b8 <motor0Loop+0x68>
			if(m1Dir == Forw){
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <motor0Loop+0x80>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d113      	bne.n	8005090 <motor0Loop+0x40>
			  modifyTimer0PWM(m1Speed * 65);
 8005068:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <motor0Loop+0x84>)
 800506a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	0192      	lsls	r2, r2, #6
 8005074:	4413      	add	r3, r2
 8005076:	b29b      	uxth	r3, r3
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff71 	bl	8004f60 <modifyTimer0PWM>
			  lastM1Speed = m1Speed;
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <motor0Loop+0x84>)
 8005080:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005084:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <motor0Loop+0x88>)
 8005086:	801a      	strh	r2, [r3, #0]
			  modifyTimer1PWM(0);
 8005088:	2000      	movs	r0, #0
 800508a:	f7ff ff87 	bl	8004f9c <modifyTimer1PWM>
 800508e:	e019      	b.n	80050c4 <motor0Loop+0x74>
			}
			else{
			  modifyTimer1PWM(m1Speed * 65);
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <motor0Loop+0x84>)
 8005092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005096:	b29b      	uxth	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	0192      	lsls	r2, r2, #6
 800509c:	4413      	add	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff7b 	bl	8004f9c <modifyTimer1PWM>
			  lastM1Speed = m1Speed;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <motor0Loop+0x84>)
 80050a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <motor0Loop+0x88>)
 80050ae:	801a      	strh	r2, [r3, #0]
			  modifyTimer0PWM(0);
 80050b0:	2000      	movs	r0, #0
 80050b2:	f7ff ff55 	bl	8004f60 <modifyTimer0PWM>
 80050b6:	e005      	b.n	80050c4 <motor0Loop+0x74>
			}
	  } else {
		  modifyTimer1PWM(0);
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7ff ff6f 	bl	8004f9c <modifyTimer1PWM>
		  modifyTimer0PWM(0);
 80050be:	2000      	movs	r0, #0
 80050c0:	f7ff ff4e 	bl	8004f60 <modifyTimer0PWM>
	  }
	  osDelay(1);
 80050c4:	2001      	movs	r0, #1
 80050c6:	f7fe fb01 	bl	80036cc <osDelay>
	  if(m1State == On){
 80050ca:	e7c5      	b.n	8005058 <motor0Loop+0x8>
 80050cc:	20000008 	.word	0x20000008
 80050d0:	200019e0 	.word	0x200019e0
 80050d4:	2000000a 	.word	0x2000000a
 80050d8:	200019e2 	.word	0x200019e2

080050dc <motor1Loop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor1Loop */
void motor1Loop(void const * argument)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;)
  {
	  if(m2State == On){
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <motor1Loop+0x7c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d12b      	bne.n	8005144 <motor1Loop+0x68>
			if(m2Dir == Forw){
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <motor1Loop+0x80>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d113      	bne.n	800511c <motor1Loop+0x40>
			  modifyTimer2PWM(m2Speed * 65);
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <motor1Loop+0x84>)
 80050f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	0192      	lsls	r2, r2, #6
 8005100:	4413      	add	r3, r2
 8005102:	b29b      	uxth	r3, r3
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff67 	bl	8004fd8 <modifyTimer2PWM>
			  lastM2Speed = m2Speed;
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <motor1Loop+0x84>)
 800510c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <motor1Loop+0x88>)
 8005112:	801a      	strh	r2, [r3, #0]
			  modifyTimer3PWM(0);
 8005114:	2000      	movs	r0, #0
 8005116:	f7ff ff7d 	bl	8005014 <modifyTimer3PWM>
 800511a:	e019      	b.n	8005150 <motor1Loop+0x74>
			}
			else{
			  modifyTimer3PWM(m2Speed * 65);
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <motor1Loop+0x84>)
 800511e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005122:	b29b      	uxth	r3, r3
 8005124:	461a      	mov	r2, r3
 8005126:	0192      	lsls	r2, r2, #6
 8005128:	4413      	add	r3, r2
 800512a:	b29b      	uxth	r3, r3
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff71 	bl	8005014 <modifyTimer3PWM>
			  lastM2Speed = m2Speed;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <motor1Loop+0x84>)
 8005134:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005138:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <motor1Loop+0x88>)
 800513a:	801a      	strh	r2, [r3, #0]
			  modifyTimer2PWM(0);
 800513c:	2000      	movs	r0, #0
 800513e:	f7ff ff4b 	bl	8004fd8 <modifyTimer2PWM>
 8005142:	e005      	b.n	8005150 <motor1Loop+0x74>
			}
	  } else {
		  modifyTimer3PWM(0);
 8005144:	2000      	movs	r0, #0
 8005146:	f7ff ff65 	bl	8005014 <modifyTimer3PWM>
		  modifyTimer2PWM(0);
 800514a:	2000      	movs	r0, #0
 800514c:	f7ff ff44 	bl	8004fd8 <modifyTimer2PWM>
	  }
	  osDelay(1);
 8005150:	2001      	movs	r0, #1
 8005152:	f7fe fabb 	bl	80036cc <osDelay>
	  if(m2State == On){
 8005156:	e7c5      	b.n	80050e4 <motor1Loop+0x8>
 8005158:	20000009 	.word	0x20000009
 800515c:	200019e1 	.word	0x200019e1
 8005160:	2000000c 	.word	0x2000000c
 8005164:	200019e4 	.word	0x200019e4

08005168 <MakeStepForw>:
const int bottleSize = 15;
const int maxDistance = 150;
unsigned long long int moveTime;
unsigned long long int distance;

void MakeStepForw(void){
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
	m1Speed = 500;
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <MakeStepForw+0x38>)
 800516e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005172:	801a      	strh	r2, [r3, #0]
	m2Speed = 500;
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <MakeStepForw+0x3c>)
 8005176:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800517a:	801a      	strh	r2, [r3, #0]
	m1Dir = Forw;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <MakeStepForw+0x40>)
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
	m2Dir = Forw;
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <MakeStepForw+0x44>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
	m1State = On;
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <MakeStepForw+0x48>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
	m2State = On;
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <MakeStepForw+0x4c>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	2000000a 	.word	0x2000000a
 80051a4:	2000000c 	.word	0x2000000c
 80051a8:	200019e0 	.word	0x200019e0
 80051ac:	200019e1 	.word	0x200019e1
 80051b0:	20000008 	.word	0x20000008
 80051b4:	20000009 	.word	0x20000009

080051b8 <MakeStepBackw>:

void MakeStepBackw(void){
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	m1Speed = 500;
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <MakeStepBackw+0x38>)
 80051be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80051c2:	801a      	strh	r2, [r3, #0]
	m2Speed = 535;
 80051c4:	4b0b      	ldr	r3, [pc, #44]	; (80051f4 <MakeStepBackw+0x3c>)
 80051c6:	f240 2217 	movw	r2, #535	; 0x217
 80051ca:	801a      	strh	r2, [r3, #0]
	m1Dir = Backw;
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <MakeStepBackw+0x40>)
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
	m2Dir = Backw;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <MakeStepBackw+0x44>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
	m1State = On;
 80051d8:	4b09      	ldr	r3, [pc, #36]	; (8005200 <MakeStepBackw+0x48>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
	m2State = On;
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <MakeStepBackw+0x4c>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	2000000a 	.word	0x2000000a
 80051f4:	2000000c 	.word	0x2000000c
 80051f8:	200019e0 	.word	0x200019e0
 80051fc:	200019e1 	.word	0x200019e1
 8005200:	20000008 	.word	0x20000008
 8005204:	20000009 	.word	0x20000009

08005208 <stopMot>:

void stopMot(void){
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
	m1State = Off;
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <stopMot+0x1c>)
 800520e:	2201      	movs	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
	m2State = Off;
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <stopMot+0x20>)
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
	}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000008 	.word	0x20000008
 8005228:	20000009 	.word	0x20000009

0800522c <make720>:
void make720(void){
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
	m1Speed = 1000;
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <make720+0x38>)
 8005232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005236:	801a      	strh	r2, [r3, #0]
	m2Speed = 1000;
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <make720+0x3c>)
 800523a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800523e:	801a      	strh	r2, [r3, #0]
	m1Dir = Forw;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <make720+0x40>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
	m2Dir = Backw;
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <make720+0x44>)
 8005248:	2201      	movs	r2, #1
 800524a:	701a      	strb	r2, [r3, #0]
	m1State = On;
 800524c:	4b09      	ldr	r3, [pc, #36]	; (8005274 <make720+0x48>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
	m2State = On;
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <make720+0x4c>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
	}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	2000000a 	.word	0x2000000a
 8005268:	2000000c 	.word	0x2000000c
 800526c:	200019e0 	.word	0x200019e0
 8005270:	200019e1 	.word	0x200019e1
 8005274:	20000008 	.word	0x20000008
 8005278:	20000009 	.word	0x20000009

0800527c <turnABit>:

void turnABit(void){
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
	m1Speed = 500;
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <turnABit+0x38>)
 8005282:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005286:	801a      	strh	r2, [r3, #0]
	m2Speed = 500;
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <turnABit+0x3c>)
 800528a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800528e:	801a      	strh	r2, [r3, #0]
	m1Dir = Forw;
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <turnABit+0x40>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
	m2Dir = Backw;
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <turnABit+0x44>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
	m1State = On;
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <turnABit+0x48>)
 800529e:	2200      	movs	r2, #0
 80052a0:	701a      	strb	r2, [r3, #0]
	m2State = On;
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <turnABit+0x4c>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
	}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000000a 	.word	0x2000000a
 80052b8:	2000000c 	.word	0x2000000c
 80052bc:	200019e0 	.word	0x200019e0
 80052c0:	200019e1 	.word	0x200019e1
 80052c4:	20000008 	.word	0x20000008
 80052c8:	20000009 	.word	0x20000009

080052cc <controlLoop>:
#define TRACKSIZE  400
#define FILTER		 2

void controlLoop(void const * argument)

{
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	osDelay(100);
 80052d4:	2064      	movs	r0, #100	; 0x64
 80052d6:	f7fe f9f9 	bl	80036cc <osDelay>
	m1State = Off;
 80052da:	4b30      	ldr	r3, [pc, #192]	; (800539c <controlLoop+0xd0>)
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
	m2State = Off;
 80052e0:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <controlLoop+0xd4>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	701a      	strb	r2, [r3, #0]
//	distance = pulseDuration * 100 / 17150;;
	uint16_t i = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	81fb      	strh	r3, [r7, #14]
	uint16_t stepCounter = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	81bb      	strh	r3, [r7, #12]
	uint16_t filterCounter = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	817b      	strh	r3, [r7, #10]
	  for(;;) {
		  for(i = 0;i <TRACKSIZE;i++){
 80052f2:	2300      	movs	r3, #0
 80052f4:	81fb      	strh	r3, [r7, #14]
 80052f6:	e027      	b.n	8005348 <controlLoop+0x7c>
			  MakeStepForw();
 80052f8:	f7ff ff36 	bl	8005168 <MakeStepForw>
			  osDelay(1);
 80052fc:	2001      	movs	r0, #1
 80052fe:	f7fe f9e5 	bl	80036cc <osDelay>
			  stopMot();
 8005302:	f7ff ff81 	bl	8005208 <stopMot>
			  stepCounter++;
 8005306:	89bb      	ldrh	r3, [r7, #12]
 8005308:	3301      	adds	r3, #1
 800530a:	81bb      	strh	r3, [r7, #12]
			  if(pulseDuration < 900){
 800530c:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <controlLoop+0xd8>)
 800530e:	cb18      	ldmia	r3, {r3, r4}
 8005310:	f240 3183 	movw	r1, #899	; 0x383
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	42a2      	cmp	r2, r4
 800531a:	bf08      	it	eq
 800531c:	4299      	cmpeq	r1, r3
 800531e:	d302      	bcc.n	8005326 <controlLoop+0x5a>
				  filterCounter++;
 8005320:	897b      	ldrh	r3, [r7, #10]
 8005322:	3301      	adds	r3, #1
 8005324:	817b      	strh	r3, [r7, #10]
			  	  }
			  if (filterCounter == FILTER){
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d10a      	bne.n	8005342 <controlLoop+0x76>
				  make720();
 800532c:	f7ff ff7e 	bl	800522c <make720>
				  osDelay(2823);
 8005330:	f640 3007 	movw	r0, #2823	; 0xb07
 8005334:	f7fe f9ca 	bl	80036cc <osDelay>
				  stopMot();
 8005338:	f7ff ff66 	bl	8005208 <stopMot>
				  filterCounter = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	817b      	strh	r3, [r7, #10]
				  break;
 8005340:	e006      	b.n	8005350 <controlLoop+0x84>
		  for(i = 0;i <TRACKSIZE;i++){
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	3301      	adds	r3, #1
 8005346:	81fb      	strh	r3, [r7, #14]
 8005348:	89fb      	ldrh	r3, [r7, #14]
 800534a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800534e:	d3d3      	bcc.n	80052f8 <controlLoop+0x2c>
			  	  }

			  	  }
		  osDelay(100);
 8005350:	2064      	movs	r0, #100	; 0x64
 8005352:	f7fe f9bb 	bl	80036cc <osDelay>

		  filterCounter = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	817b      	strh	r3, [r7, #10]

		  osDelay(100);
 800535a:	2064      	movs	r0, #100	; 0x64
 800535c:	f7fe f9b6 	bl	80036cc <osDelay>
		  for(i = 0;i <stepCounter;i++){
 8005360:	2300      	movs	r3, #0
 8005362:	81fb      	strh	r3, [r7, #14]
 8005364:	e009      	b.n	800537a <controlLoop+0xae>

			  	  MakeStepBackw();
 8005366:	f7ff ff27 	bl	80051b8 <MakeStepBackw>
			  	  osDelay(1);
 800536a:	2001      	movs	r0, #1
 800536c:	f7fe f9ae 	bl	80036cc <osDelay>
			  	  stopMot();
 8005370:	f7ff ff4a 	bl	8005208 <stopMot>
		  for(i = 0;i <stepCounter;i++){
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	3301      	adds	r3, #1
 8005378:	81fb      	strh	r3, [r7, #14]
 800537a:	89fa      	ldrh	r2, [r7, #14]
 800537c:	89bb      	ldrh	r3, [r7, #12]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3f1      	bcc.n	8005366 <controlLoop+0x9a>
			  	  }
		  stepCounter = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	81bb      	strh	r3, [r7, #12]
		  osDelay(5);
 8005386:	2005      	movs	r0, #5
 8005388:	f7fe f9a0 	bl	80036cc <osDelay>
		  turnABit();
 800538c:	f7ff ff76 	bl	800527c <turnABit>
		  osDelay(150);
 8005390:	2096      	movs	r0, #150	; 0x96
 8005392:	f7fe f99b 	bl	80036cc <osDelay>
	  	  stopMot();
 8005396:	f7ff ff37 	bl	8005208 <stopMot>
		  for(i = 0;i <TRACKSIZE;i++){
 800539a:	e7aa      	b.n	80052f2 <controlLoop+0x26>
 800539c:	20000008 	.word	0x20000008
 80053a0:	20000009 	.word	0x20000009
 80053a4:	200019e8 	.word	0x200019e8

080053a8 <sendPulse>:
* @brief Function implementing the VzdTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_VzdLoop */
void sendPulse(void){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  	TIM17->CNT = 0;
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <sendPulse+0x44>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	625a      	str	r2, [r3, #36]	; 0x24
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80053b2:	2201      	movs	r2, #1
 80053b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053b8:	480d      	ldr	r0, [pc, #52]	; (80053f0 <sendPulse+0x48>)
 80053ba:	f7fb f9c9 	bl	8000750 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim17);
 80053be:	480d      	ldr	r0, [pc, #52]	; (80053f4 <sendPulse+0x4c>)
 80053c0:	f7fc fd7b 	bl	8001eba <HAL_TIM_Base_Start>
	while((TIM17->CNT<50));
 80053c4:	bf00      	nop
 80053c6:	4b09      	ldr	r3, [pc, #36]	; (80053ec <sendPulse+0x44>)
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b31      	cmp	r3, #49	; 0x31
 80053cc:	d9fb      	bls.n	80053c6 <sendPulse+0x1e>
  	HAL_TIM_Base_Stop(&htim17);
 80053ce:	4809      	ldr	r0, [pc, #36]	; (80053f4 <sendPulse+0x4c>)
 80053d0:	f7fc fd8e 	bl	8001ef0 <HAL_TIM_Base_Stop>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80053d4:	2200      	movs	r2, #0
 80053d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053da:	4805      	ldr	r0, [pc, #20]	; (80053f0 <sendPulse+0x48>)
 80053dc:	f7fb f9b8 	bl	8000750 <HAL_GPIO_WritePin>
  	TIM17->CNT = 0;
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <sendPulse+0x44>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
 80053e6:	bf00      	nop
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40014800 	.word	0x40014800
 80053f0:	48000800 	.word	0x48000800
 80053f4:	20001a4c 	.word	0x20001a4c

080053f8 <VzdLoop>:
// && ((TIM17->CNT)<9000)

void VzdLoop(void const * argument)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN VzdLoop */
  /* Infinite loop */
  for(;;)
  {
	  sendPulse();
 8005400:	f7ff ffd2 	bl	80053a8 <sendPulse>
  	  TIM17->CNT = 0;
 8005404:	4b13      	ldr	r3, [pc, #76]	; (8005454 <VzdLoop+0x5c>)
 8005406:	2200      	movs	r2, #0
 8005408:	625a      	str	r2, [r3, #36]	; 0x24
  	  while(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)); //wait for pulse
 800540a:	bf00      	nop
 800540c:	2140      	movs	r1, #64	; 0x40
 800540e:	4812      	ldr	r0, [pc, #72]	; (8005458 <VzdLoop+0x60>)
 8005410:	f7fb f986 	bl	8000720 <HAL_GPIO_ReadPin>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f8      	beq.n	800540c <VzdLoop+0x14>
	  HAL_TIM_Base_Start(&htim17);
 800541a:	4810      	ldr	r0, [pc, #64]	; (800545c <VzdLoop+0x64>)
 800541c:	f7fc fd4d 	bl	8001eba <HAL_TIM_Base_Start>
  	  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_6)); //wait for pulse
 8005420:	bf00      	nop
 8005422:	2140      	movs	r1, #64	; 0x40
 8005424:	480c      	ldr	r0, [pc, #48]	; (8005458 <VzdLoop+0x60>)
 8005426:	f7fb f97b 	bl	8000720 <HAL_GPIO_ReadPin>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f8      	bne.n	8005422 <VzdLoop+0x2a>
  	  HAL_TIM_Base_Stop(&htim17);
 8005430:	480a      	ldr	r0, [pc, #40]	; (800545c <VzdLoop+0x64>)
 8005432:	f7fc fd5d 	bl	8001ef0 <HAL_TIM_Base_Stop>
  	  pulseDuration = TIM17->CNT;
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <VzdLoop+0x5c>)
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f04f 0400 	mov.w	r4, #0
 800543e:	4a08      	ldr	r2, [pc, #32]	; (8005460 <VzdLoop+0x68>)
 8005440:	e882 0018 	stmia.w	r2, {r3, r4}

  	  TIM17->CNT = 0;
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <VzdLoop+0x5c>)
 8005446:	2200      	movs	r2, #0
 8005448:	625a      	str	r2, [r3, #36]	; 0x24
	  osDelay(1);
 800544a:	2001      	movs	r0, #1
 800544c:	f7fe f93e 	bl	80036cc <osDelay>
	  sendPulse();
 8005450:	e7d6      	b.n	8005400 <VzdLoop+0x8>
 8005452:	bf00      	nop
 8005454:	40014800 	.word	0x40014800
 8005458:	48000800 	.word	0x48000800
 800545c:	20001a4c 	.word	0x20001a4c
 8005460:	200019e8 	.word	0x200019e8

08005464 <backupLoop1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_backupLoop1 */
void backupLoop1(void const * argument)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN backupLoop1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800546c:	2001      	movs	r0, #1
 800546e:	f7fe f92d 	bl	80036cc <osDelay>
 8005472:	e7fb      	b.n	800546c <backupLoop1+0x8>

08005474 <EncoLoop>:
/* USER CODE END Header_EncoLoop */
uint32_t encVal0 = 0;
uint32_t encVal1 = 0;

void EncoLoop(void const * argument)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoLoop */
  /* Infinite loop */
  for(;;)
  {
	  encVal0 = TIM2->CNT;
 800547c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	4a05      	ldr	r2, [pc, #20]	; (8005498 <EncoLoop+0x24>)
 8005484:	6013      	str	r3, [r2, #0]


	  encVal1 = TIM4->CNT;
 8005486:	4b05      	ldr	r3, [pc, #20]	; (800549c <EncoLoop+0x28>)
 8005488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548a:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <EncoLoop+0x2c>)
 800548c:	6013      	str	r3, [r2, #0]

    osDelay(1);
 800548e:	2001      	movs	r0, #1
 8005490:	f7fe f91c 	bl	80036cc <osDelay>
	  encVal0 = TIM2->CNT;
 8005494:	e7f2      	b.n	800547c <EncoLoop+0x8>
 8005496:	bf00      	nop
 8005498:	200019f0 	.word	0x200019f0
 800549c:	40000800 	.word	0x40000800
 80054a0:	200019f4 	.word	0x200019f4

080054a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a04      	ldr	r2, [pc, #16]	; (80054c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80054b6:	f7fa fea9 	bl	800020c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00

080054c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80054cc:	bf00      	nop
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054de:	4a11      	ldr	r2, [pc, #68]	; (8005524 <HAL_MspInit+0x4c>)
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_MspInit+0x4c>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	6193      	str	r3, [r2, #24]
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <HAL_MspInit+0x4c>)
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054f6:	4a0b      	ldr	r2, [pc, #44]	; (8005524 <HAL_MspInit+0x4c>)
 80054f8:	4b0a      	ldr	r3, [pc, #40]	; (8005524 <HAL_MspInit+0x4c>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005500:	61d3      	str	r3, [r2, #28]
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_MspInit+0x4c>)
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800550e:	2200      	movs	r2, #0
 8005510:	210f      	movs	r1, #15
 8005512:	f06f 0001 	mvn.w	r0, #1
 8005516:	f7fa ff4b 	bl	80003b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40021000 	.word	0x40021000

08005528 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08c      	sub	sp, #48	; 0x30
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005530:	f107 031c 	add.w	r3, r7, #28
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005548:	d129      	bne.n	800559e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800554a:	4a2d      	ldr	r2, [pc, #180]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 800554c:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	61d3      	str	r3, [r2, #28]
 8005556:	4b2a      	ldr	r3, [pc, #168]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005562:	4a27      	ldr	r2, [pc, #156]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 8005564:	4b26      	ldr	r3, [pc, #152]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	6153      	str	r3, [r2, #20]
 800556e:	4b24      	ldr	r3, [pc, #144]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800557a:	2303      	movs	r3, #3
 800557c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557e:	2302      	movs	r3, #2
 8005580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005582:	2301      	movs	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005586:	2300      	movs	r3, #0
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800558a:	2301      	movs	r3, #1
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558e:	f107 031c 	add.w	r3, r7, #28
 8005592:	4619      	mov	r1, r3
 8005594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005598:	f7fa ff34 	bl	8000404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800559c:	e02c      	b.n	80055f8 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_TIM_Encoder_MspInit+0xdc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d127      	bne.n	80055f8 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80055a8:	4a15      	ldr	r2, [pc, #84]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f043 0304 	orr.w	r3, r3, #4
 80055b2:	61d3      	str	r3, [r2, #28]
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c0:	4a0f      	ldr	r2, [pc, #60]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 80055c2:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ca:	6153      	str	r3, [r2, #20]
 80055cc:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_TIM_Encoder_MspInit+0xd8>)
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055d8:	23c0      	movs	r3, #192	; 0xc0
 80055da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055dc:	2302      	movs	r3, #2
 80055de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055e0:	2301      	movs	r3, #1
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80055e8:	2302      	movs	r3, #2
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ec:	f107 031c 	add.w	r3, r7, #28
 80055f0:	4619      	mov	r1, r3
 80055f2:	4805      	ldr	r0, [pc, #20]	; (8005608 <HAL_TIM_Encoder_MspInit+0xe0>)
 80055f4:	f7fa ff06 	bl	8000404 <HAL_GPIO_Init>
}
 80055f8:	bf00      	nop
 80055fa:	3730      	adds	r7, #48	; 0x30
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	40000800 	.word	0x40000800
 8005608:	48000400 	.word	0x48000400

0800560c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <HAL_TIM_PWM_MspInit+0x38>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10b      	bne.n	8005636 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800561e:	4a0a      	ldr	r2, [pc, #40]	; (8005648 <HAL_TIM_PWM_MspInit+0x3c>)
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_TIM_PWM_MspInit+0x3c>)
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	61d3      	str	r3, [r2, #28]
 800562a:	4b07      	ldr	r3, [pc, #28]	; (8005648 <HAL_TIM_PWM_MspInit+0x3c>)
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40000400 	.word	0x40000400
 8005648:	40021000 	.word	0x40021000

0800564c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <HAL_TIM_Base_MspInit+0x38>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10b      	bne.n	8005676 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_TIM_Base_MspInit+0x3c>)
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_TIM_Base_MspInit+0x3c>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005668:	6193      	str	r3, [r2, #24]
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <HAL_TIM_Base_MspInit+0x3c>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40014800 	.word	0x40014800
 8005688:	40021000 	.word	0x40021000

0800568c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08a      	sub	sp, #40	; 0x28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005694:	f107 0314 	add.w	r3, r7, #20
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	609a      	str	r2, [r3, #8]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_TIM_MspPostInit+0x9c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d138      	bne.n	8005720 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ae:	4a1f      	ldr	r2, [pc, #124]	; (800572c <HAL_TIM_MspPostInit+0xa0>)
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <HAL_TIM_MspPostInit+0xa0>)
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056b8:	6153      	str	r3, [r2, #20]
 80056ba:	4b1c      	ldr	r3, [pc, #112]	; (800572c <HAL_TIM_MspPostInit+0xa0>)
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	613b      	str	r3, [r7, #16]
 80056c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c6:	4a19      	ldr	r2, [pc, #100]	; (800572c <HAL_TIM_MspPostInit+0xa0>)
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <HAL_TIM_MspPostInit+0xa0>)
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d0:	6153      	str	r3, [r2, #20]
 80056d2:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_TIM_MspPostInit+0xa0>)
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80056de:	2350      	movs	r3, #80	; 0x50
 80056e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e2:	2302      	movs	r3, #2
 80056e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056ea:	2303      	movs	r3, #3
 80056ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056ee:	2302      	movs	r3, #2
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f2:	f107 0314 	add.w	r3, r7, #20
 80056f6:	4619      	mov	r1, r3
 80056f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80056fc:	f7fa fe82 	bl	8000404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005700:	2303      	movs	r3, #3
 8005702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005704:	2302      	movs	r3, #2
 8005706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005710:	2302      	movs	r3, #2
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005714:	f107 0314 	add.w	r3, r7, #20
 8005718:	4619      	mov	r1, r3
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <HAL_TIM_MspPostInit+0xa4>)
 800571c:	f7fa fe72 	bl	8000404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005720:	bf00      	nop
 8005722:	3728      	adds	r7, #40	; 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40000400 	.word	0x40000400
 800572c:	40021000 	.word	0x40021000
 8005730:	48000400 	.word	0x48000400

08005734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800573c:	f107 0314 	add.w	r3, r7, #20
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	60da      	str	r2, [r3, #12]
 800574a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <HAL_UART_MspInit+0x7c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d128      	bne.n	80057a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_UART_MspInit+0x80>)
 8005758:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <HAL_UART_MspInit+0x80>)
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005760:	61d3      	str	r3, [r2, #28]
 8005762:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <HAL_UART_MspInit+0x80>)
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576e:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <HAL_UART_MspInit+0x80>)
 8005770:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <HAL_UART_MspInit+0x80>)
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005778:	6153      	str	r3, [r2, #20]
 800577a:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_UART_MspInit+0x80>)
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005786:	230c      	movs	r3, #12
 8005788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578a:	2302      	movs	r3, #2
 800578c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005792:	2300      	movs	r3, #0
 8005794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005796:	2307      	movs	r3, #7
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800579a:	f107 0314 	add.w	r3, r7, #20
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057a4:	f7fa fe2e 	bl	8000404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80057a8:	bf00      	nop
 80057aa:	3728      	adds	r7, #40	; 0x28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40004400 	.word	0x40004400
 80057b4:	40021000 	.word	0x40021000

080057b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08c      	sub	sp, #48	; 0x30
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80057c8:	2200      	movs	r2, #0
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	2019      	movs	r0, #25
 80057ce:	f7fa fdef 	bl	80003b0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80057d2:	2019      	movs	r0, #25
 80057d4:	f7fa fe08 	bl	80003e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80057d8:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <HAL_InitTick+0x9c>)
 80057da:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <HAL_InitTick+0x9c>)
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057e2:	6193      	str	r3, [r2, #24]
 80057e4:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_InitTick+0x9c>)
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057f0:	f107 0210 	add.w	r2, r7, #16
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fc f8e4 	bl	80019c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005800:	f7fc f8c0 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 8005804:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <HAL_InitTick+0xa0>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	0c9b      	lsrs	r3, r3, #18
 8005810:	3b01      	subs	r3, #1
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005814:	4b11      	ldr	r3, [pc, #68]	; (800585c <HAL_InitTick+0xa4>)
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <HAL_InitTick+0xa8>)
 8005818:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800581a:	4b10      	ldr	r3, [pc, #64]	; (800585c <HAL_InitTick+0xa4>)
 800581c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005820:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005822:	4a0e      	ldr	r2, [pc, #56]	; (800585c <HAL_InitTick+0xa4>)
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <HAL_InitTick+0xa4>)
 800582a:	2200      	movs	r2, #0
 800582c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800582e:	4b0b      	ldr	r3, [pc, #44]	; (800585c <HAL_InitTick+0xa4>)
 8005830:	2200      	movs	r2, #0
 8005832:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005834:	4809      	ldr	r0, [pc, #36]	; (800585c <HAL_InitTick+0xa4>)
 8005836:	f7fc fb15 	bl	8001e64 <HAL_TIM_Base_Init>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d104      	bne.n	800584a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005840:	4806      	ldr	r0, [pc, #24]	; (800585c <HAL_InitTick+0xa4>)
 8005842:	f7fc fb80 	bl	8001f46 <HAL_TIM_Base_Start_IT>
 8005846:	4603      	mov	r3, r0
 8005848:	e000      	b.n	800584c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	3730      	adds	r7, #48	; 0x30
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021000 	.word	0x40021000
 8005858:	431bde83 	.word	0x431bde83
 800585c:	20001ba4 	.word	0x20001ba4
 8005860:	40012c00 	.word	0x40012c00

08005864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005872:	b480      	push	{r7}
 8005874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005876:	e7fe      	b.n	8005876 <HardFault_Handler+0x4>

08005878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800587c:	e7fe      	b.n	800587c <MemManage_Handler+0x4>

0800587e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800587e:	b480      	push	{r7}
 8005880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005882:	e7fe      	b.n	8005882 <BusFault_Handler+0x4>

08005884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005888:	e7fe      	b.n	8005888 <UsageFault_Handler+0x4>

0800588a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800588a:	b480      	push	{r7}
 800588c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800589c:	4802      	ldr	r0, [pc, #8]	; (80058a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800589e:	f7fc fc81 	bl	80021a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058a2:	bf00      	nop
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20001ba4 	.word	0x20001ba4

080058ac <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <SystemInit+0x84>)
 80058b2:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <SystemInit+0x84>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80058c0:	4a1c      	ldr	r2, [pc, #112]	; (8005934 <SystemInit+0x88>)
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <SystemInit+0x88>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80058cc:	4919      	ldr	r1, [pc, #100]	; (8005934 <SystemInit+0x88>)
 80058ce:	4b19      	ldr	r3, [pc, #100]	; (8005934 <SystemInit+0x88>)
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <SystemInit+0x8c>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80058d8:	4a16      	ldr	r2, [pc, #88]	; (8005934 <SystemInit+0x88>)
 80058da:	4b16      	ldr	r3, [pc, #88]	; (8005934 <SystemInit+0x88>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80058e8:	4a12      	ldr	r2, [pc, #72]	; (8005934 <SystemInit+0x88>)
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <SystemInit+0x88>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80058f4:	4a0f      	ldr	r2, [pc, #60]	; (8005934 <SystemInit+0x88>)
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <SystemInit+0x88>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80058fe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8005900:	4a0c      	ldr	r2, [pc, #48]	; (8005934 <SystemInit+0x88>)
 8005902:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <SystemInit+0x88>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f023 030f 	bic.w	r3, r3, #15
 800590a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800590c:	4909      	ldr	r1, [pc, #36]	; (8005934 <SystemInit+0x88>)
 800590e:	4b09      	ldr	r3, [pc, #36]	; (8005934 <SystemInit+0x88>)
 8005910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005912:	4b0a      	ldr	r3, [pc, #40]	; (800593c <SystemInit+0x90>)
 8005914:	4013      	ands	r3, r2
 8005916:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <SystemInit+0x88>)
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800591e:	4b04      	ldr	r3, [pc, #16]	; (8005930 <SystemInit+0x84>)
 8005920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005924:	609a      	str	r2, [r3, #8]
#endif
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	e000ed00 	.word	0xe000ed00
 8005934:	40021000 	.word	0x40021000
 8005938:	f87fc00c 	.word	0xf87fc00c
 800593c:	ff00fccc 	.word	0xff00fccc

08005940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005944:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005946:	e003      	b.n	8005950 <LoopCopyDataInit>

08005948 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800594a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800594c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800594e:	3104      	adds	r1, #4

08005950 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005950:	480b      	ldr	r0, [pc, #44]	; (8005980 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005954:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005956:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005958:	d3f6      	bcc.n	8005948 <CopyDataInit>
	ldr	r2, =_sbss
 800595a:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <LoopForever+0x12>)
	b	LoopFillZerobss
 800595c:	e002      	b.n	8005964 <LoopFillZerobss>

0800595e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800595e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005960:	f842 3b04 	str.w	r3, [r2], #4

08005964 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005964:	4b09      	ldr	r3, [pc, #36]	; (800598c <LoopForever+0x16>)
	cmp	r2, r3
 8005966:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005968:	d3f9      	bcc.n	800595e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800596a:	f7ff ff9f 	bl	80058ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800596e:	f000 f811 	bl	8005994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005972:	f7fe ffb9 	bl	80048e8 <main>

08005976 <LoopForever>:

LoopForever:
    b LoopForever
 8005976:	e7fe      	b.n	8005976 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005978:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800597c:	08005b28 	.word	0x08005b28
	ldr	r0, =_sdata
 8005980:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005984:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8005988:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 800598c:	20001be4 	.word	0x20001be4

08005990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005990:	e7fe      	b.n	8005990 <ADC1_2_IRQHandler>
	...

08005994 <__libc_init_array>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	4e0d      	ldr	r6, [pc, #52]	; (80059cc <__libc_init_array+0x38>)
 8005998:	4c0d      	ldr	r4, [pc, #52]	; (80059d0 <__libc_init_array+0x3c>)
 800599a:	1ba4      	subs	r4, r4, r6
 800599c:	10a4      	asrs	r4, r4, #2
 800599e:	2500      	movs	r5, #0
 80059a0:	42a5      	cmp	r5, r4
 80059a2:	d109      	bne.n	80059b8 <__libc_init_array+0x24>
 80059a4:	4e0b      	ldr	r6, [pc, #44]	; (80059d4 <__libc_init_array+0x40>)
 80059a6:	4c0c      	ldr	r4, [pc, #48]	; (80059d8 <__libc_init_array+0x44>)
 80059a8:	f000 f820 	bl	80059ec <_init>
 80059ac:	1ba4      	subs	r4, r4, r6
 80059ae:	10a4      	asrs	r4, r4, #2
 80059b0:	2500      	movs	r5, #0
 80059b2:	42a5      	cmp	r5, r4
 80059b4:	d105      	bne.n	80059c2 <__libc_init_array+0x2e>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059bc:	4798      	blx	r3
 80059be:	3501      	adds	r5, #1
 80059c0:	e7ee      	b.n	80059a0 <__libc_init_array+0xc>
 80059c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059c6:	4798      	blx	r3
 80059c8:	3501      	adds	r5, #1
 80059ca:	e7f2      	b.n	80059b2 <__libc_init_array+0x1e>
 80059cc:	08005b20 	.word	0x08005b20
 80059d0:	08005b20 	.word	0x08005b20
 80059d4:	08005b20 	.word	0x08005b20
 80059d8:	08005b24 	.word	0x08005b24

080059dc <memset>:
 80059dc:	4402      	add	r2, r0
 80059de:	4603      	mov	r3, r0
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d100      	bne.n	80059e6 <memset+0xa>
 80059e4:	4770      	bx	lr
 80059e6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ea:	e7f9      	b.n	80059e0 <memset+0x4>

080059ec <_init>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr

080059f8 <_fini>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr
